<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql-使用</title>
      <link href="/2019/01/03/mysql/Mysql-%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/01/03/mysql/Mysql-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql-使用"><a href="#Mysql-使用" class="headerlink" title="Mysql-使用"></a>Mysql-使用</h1><h2 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br><span class="line">show tables from database_name;</span><br><span class="line">show databases;</span><br><span class="line">show columns from table_name from database_name;</span><br><span class="line">show grants for user_name;</span><br><span class="line">show index from table_name;</span><br><span class="line">show table status;</span><br><span class="line">show privileges;</span><br><span class="line">show create database database_name;</span><br><span class="line">show create table table_name;</span><br><span class="line">show engines;</span><br><span class="line">show innodb status;</span><br><span class="line">show logs;</span><br><span class="line">show warnings;</span><br><span class="line">show errors;</span><br><span class="line">show [storage] engines;</span><br><span class="line"></span><br><span class="line">show variables;</span><br><span class="line">set global max_connections = 1000;</span><br><span class="line">show variables like &apos;%下面变量%&apos;</span><br><span class="line">max_connections 最大允许连接数</span><br><span class="line">1. back_log</span><br><span class="line"></span><br><span class="line">指定MySQL可能的连接数量。当MySQL主线程在很短的时间内得到非常多的连接请求，该参数就起作用，之后主线程花些时间(尽管很短)检查连接并且启动一个新线程。</span><br><span class="line"></span><br><span class="line">back_log参数的值指出在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中。如果系统在一个短时间内有很多连接，则需要增大该参数的值，该参数值指定到来的TCP/IP连接的侦听队列的大小。不同的操作系统在这个队列大小上有它自己的限制。 试图设定back_log高于你的操作系统的限制将是无效的。</span><br><span class="line"></span><br><span class="line">当观察MySQL进程列表，发现大量 264084 | unauthenticated user | xxx.xxx.xxx.xxx | NULL | Connect | NULL | login | NULL 的待连接进程时，就要加大 back_log 的值。back_log默认值为50。</span><br><span class="line"></span><br><span class="line">2. basedir</span><br><span class="line"></span><br><span class="line">MySQL主程序所在路径，即：--basedir参数的值。</span><br><span class="line"></span><br><span class="line">3. bdb_cache_size</span><br><span class="line"></span><br><span class="line">分配给BDB类型数据表的缓存索引和行排列的缓冲区大小，如果不使用DBD类型数据表，则应该在启动MySQL时加载 --skip-bdb 参数以避免内存浪费。</span><br><span class="line"></span><br><span class="line">4.bdb_log_buffer_size</span><br><span class="line"></span><br><span class="line">分配给BDB类型数据表的缓存索引和行排列的缓冲区大小，如果不使用DBD类型数据表，则应该将该参数值设置为0，或者在启动MySQL时加载 --skip-bdb 参数以避免内存浪费。</span><br><span class="line"></span><br><span class="line">5.bdb_home</span><br><span class="line"></span><br><span class="line">参见 --bdb-home 选项。</span><br><span class="line"></span><br><span class="line">6. bdb_max_lock</span><br><span class="line"></span><br><span class="line">指定最大的锁表进程数量(默认为10000)，如果使用BDB类型数据表，则可以使用该参数。如果在执行大型事物处理或者查询时发现 bdb: Lock table is out of available locks or Got error 12 from ... 错误，则应该加大该参数值。</span><br><span class="line"></span><br><span class="line">7. bdb_logdir</span><br><span class="line"></span><br><span class="line">指定使用BDB类型数据表提供服务时的日志存放位置。即为 --bdb-logdir 的值。</span><br><span class="line"></span><br><span class="line">8. bdb_shared_data</span><br><span class="line"></span><br><span class="line">如果使用 --bdb-shared-data 选项则该参数值为On。</span><br><span class="line"></span><br><span class="line">9. bdb_tmpdir</span><br><span class="line"></span><br><span class="line">BDB类型数据表的临时文件目录。即为 --bdb-tmpdir 的值。</span><br><span class="line"></span><br><span class="line">10. binlog_cache_size</span><br><span class="line"></span><br><span class="line">为binary log指定在查询请求处理过程中SQL 查询语句使用的缓存大小。如果频繁应用于大量、复杂的SQL表达式处理，则应该加大该参数值以获得性能提升。</span><br><span class="line"></span><br><span class="line">11. bulk_insert_buffer_size</span><br><span class="line"></span><br><span class="line">指定 MyISAM 类型数据表表使用特殊的树形结构的缓存。使用整块方式(bulk)能够加快插入操作( INSERT ... SELECT, INSERT ... VALUES (...), (...), ..., 和 LOAD DATA INFILE) 的速度和效率。该参数限制每个线程使用的树形结构缓存大小，如果设置为0则禁用该加速缓存功能。注意：该参数对应的缓存操作只能用户向非空数据表中执行插入操作!默认值为 8MB。</span><br><span class="line"></span><br><span class="line">12. character_set</span><br><span class="line"></span><br><span class="line">MySQL的默认字符集。</span><br><span class="line"></span><br><span class="line">13. character_sets</span><br><span class="line"></span><br><span class="line">MySQL所能提供支持的字符集。</span><br><span class="line"></span><br><span class="line">14. concurrent_inserts</span><br><span class="line"></span><br><span class="line">如果开启该参数，MySQL则允许在执行 SELECT 操作的同时进行 INSERT 操作。如果要关闭该参数，可以在启动 mysqld 时加载 --safe 选项，或者使用 --skip-new 选项。默认为On。</span><br><span class="line"></span><br><span class="line">15. connect_timeout</span><br><span class="line"></span><br><span class="line">指定MySQL服务等待应答一个连接报文的最大秒数，超出该时间，MySQL向客户端返回 bad handshake。</span><br><span class="line"></span><br><span class="line">16. datadir</span><br><span class="line"></span><br><span class="line">指定数据库路径。即为 --datadir 选项的值。</span><br><span class="line"></span><br><span class="line">17. delay_key_write</span><br><span class="line"></span><br><span class="line">该参数只对 MyISAM 类型数据表有效。有如下的取值种类：</span><br><span class="line"></span><br><span class="line">off: 如果在建表语句中使用 CREATE TABLE ... DELAYED_KEY_WRITES，则全部忽略</span><br><span class="line"></span><br><span class="line">DELAYED_KEY_WRITES;</span><br><span class="line"></span><br><span class="line">on: 如果在建表语句中使用 CREATE TABLE ... DELAYED_KEY_WRITES，则使用该选项(默认);</span><br><span class="line"></span><br><span class="line">all: 所有打开的数据表都将按照 DELAYED_KEY_WRITES 处理。</span><br><span class="line"></span><br><span class="line">如果 DELAYED_KEY_WRITES 开启，对于已经打开的数据表而言，在每次索引更新时都不刷新带有</span><br><span class="line"></span><br><span class="line">DELAYED_KEY_WRITES 选项的数据表的key buffer，除非该数据表关闭。该参数会大幅提升写入键值的速</span><br><span class="line"></span><br><span class="line">度。如果使用该参数，则应该检查所有数据表：myisamchk --fast --force。</span><br><span class="line"></span><br><span class="line">18.delayed_insert_limit</span><br><span class="line"></span><br><span class="line">在插入delayed_insert_limit行后，INSERT DELAYED处理模块将检查是否有未执行的SELECT语句。如果有，在继续处理前执行允许这些语句。</span><br><span class="line"></span><br><span class="line">19. delayed_insert_timeout</span><br><span class="line"></span><br><span class="line">一个INSERT DELAYED线程应该在终止之前等待INSERT语句的时间。</span><br><span class="line"></span><br><span class="line">20. delayed_queue_size</span><br><span class="line"></span><br><span class="line">为处理INSERT DELAYED分配的队列大小(以行为单位)。如果排队满了，任何进行INSERT DELAYED的客户必须等待队列空间释放后才能继续。</span><br><span class="line"></span><br><span class="line">21. flush</span><br><span class="line"></span><br><span class="line">在启动MySQL时加载 --flush 参数打开该功能。</span><br><span class="line"></span><br><span class="line">22. flush_time</span><br><span class="line"></span><br><span class="line">如果该设置为非0值，那么每flush_time秒，所有打开的表将被关，以释放资源和sync到磁盘。注意：只建议在使用 Windows9x/Me 或者当前操作系统资源严重不足时才使用该参数!</span><br><span class="line"></span><br><span class="line">23. ft_boolean_syntax</span><br><span class="line"></span><br><span class="line">搜索引擎维护员希望更改允许用于逻辑全文搜索的操作符。这些则由变量 ft_boolean_syntax 控制。</span><br><span class="line"></span><br><span class="line">24. ft_min_word_len</span><br><span class="line"></span><br><span class="line">指定被索引的关键词的最小长度。注意：在更改该参数值后，索引必须重建!</span><br><span class="line"></span><br><span class="line">25. ft_max_word_len</span><br><span class="line"></span><br><span class="line">指定被索引的关键词的最大长度。注意：在更改该参数值后，索引必须重建!</span><br><span class="line"></span><br><span class="line">26. ft_max_word_len_for_sort</span><br><span class="line"></span><br><span class="line">指定在使用REPAIR, CREATE INDEX, or ALTER TABLE等方法进行快速全文索引重建过程中所能使用的关键词的最大长度。超出该长度限制的关键词将使用低速方式进行插入。加大该参数的值，MySQL将会建立更大的临时文件(这会减轻CPU负载，但效率将取决于磁盘I/O效率)，并且在一个排序取内存放更少的键值。</span><br><span class="line"></span><br><span class="line">27. ft_stopword_file</span><br><span class="line"></span><br><span class="line">从 ft_stopword_file 变量指定的文件中读取列表。在修改了 stopword 列表后，必须重建 FULLTEXT 索引。</span><br><span class="line"></span><br><span class="line">28. have_innodb</span><br><span class="line"></span><br><span class="line">YES: MySQL支持InnoDB类型数据表; DISABLE: 使用 --skip-innodb 关闭对InnoDB类型数据表的支持。</span><br><span class="line"></span><br><span class="line">29. have_bdb</span><br><span class="line"></span><br><span class="line">YES: MySQL支持伯克利类型数据表; DISABLE: 使用 --skip-bdb 关闭对伯克利类型数据表的支持。</span><br><span class="line"></span><br><span class="line">30. have_raid</span><br><span class="line"></span><br><span class="line">YES: 使MySQL支持RAID功能。</span><br><span class="line"></span><br><span class="line">31. have_openssl</span><br><span class="line"></span><br><span class="line">YES: 使MySQL支持SSL加密协议。</span><br><span class="line"></span><br><span class="line">32. init_file</span><br><span class="line"></span><br><span class="line">指定一个包含SQL查询语句的文件，该文件在MySQL启动时将被加载，文件中的SQL语句也会被执行。</span><br><span class="line"></span><br><span class="line">33. interactive_timeout</span><br><span class="line"></span><br><span class="line">服务器在关上它前在一个交互连接上等待行动的秒数。一个交互的客户被定义为对mysql_real_connect()使用CLIENT_INTERACTIVE选项的客户。也可见wait_timeout。</span><br><span class="line"></span><br><span class="line">34. join_buffer_size</span><br><span class="line"></span><br><span class="line">用于全部联合(join)的缓冲区大小(不是用索引的联结)。缓冲区对2个表间的每个全部联结分配一次缓冲区，当增加索引不可能时，增加该值可得到一个更快的全部联结。(通常得到快速联结的最佳方法是增加索引。)</span><br><span class="line"></span><br><span class="line">35. key_buffer_size</span><br><span class="line"></span><br><span class="line">用于索引块的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，系统将开始变慢慢。必须为OS文件系统缓存留下一些空间。为了在写入多个行时得到更多的速度。</span><br><span class="line"></span><br><span class="line">36. language</span><br><span class="line"></span><br><span class="line">用户输出报错信息的语言。</span><br><span class="line"></span><br><span class="line">37. large_file_support</span><br><span class="line"></span><br><span class="line">开启大文件支持。</span><br><span class="line"></span><br><span class="line">38. locked_in_memory</span><br><span class="line"></span><br><span class="line">使用 --memlock 将mysqld锁定在内存中。</span><br><span class="line"></span><br><span class="line">39. log</span><br><span class="line"></span><br><span class="line">记录所有查询操作。</span><br><span class="line"></span><br><span class="line">40. log_update</span><br><span class="line"></span><br><span class="line">开启update log。</span><br><span class="line"></span><br><span class="line">41. log_bin</span><br><span class="line"></span><br><span class="line">开启 binary log。</span><br><span class="line"></span><br><span class="line">42. log_slave_updates</span><br><span class="line"></span><br><span class="line">如果使用链状同步或者多台Slave之间进行同步则需要开启此参数。</span><br><span class="line"></span><br><span class="line">43. long_query_time</span><br><span class="line"></span><br><span class="line">如果一个查询所用时间超过该参数值，则该查询操作将被记录在Slow_queries中。</span><br><span class="line"></span><br><span class="line">44. lower_case_table_names</span><br><span class="line"></span><br><span class="line">1: MySQL总使用小写字母进行SQL操作;</span><br><span class="line"></span><br><span class="line">0: 关闭该功能。</span><br><span class="line"></span><br><span class="line">注意：如果使用该参数，则应该在启用前将所有数据表转换为小写字母。</span><br><span class="line"></span><br><span class="line">45. max_allowed_packet</span><br><span class="line"></span><br><span class="line">一个查询语句包的最大尺寸。消息缓冲区被初始化为net_buffer_length字节，但是可在需要时增加到max_allowed_packet个字节。该值太小则会在处理大包时产生错误。如果使用大的BLOB列，必须增加该值。</span><br><span class="line"></span><br><span class="line">46. net_buffer_length</span><br><span class="line"></span><br><span class="line">通信缓冲区在查询期间被重置到该大小。通常不要改变该参数值，但是如果内存不足，可以将它设置为查询期望的大小。(即，客户发出的SQL语句期望的长度。如果语句超过这个长度，缓冲区自动地被扩大，直到max_allowed_packet个字节。)</span><br><span class="line"></span><br><span class="line">47. max_binlog_cache_size</span><br><span class="line"></span><br><span class="line">指定binary log缓存的最大容量，如果设置的过小，则在执行复杂查询语句时MySQL会出错。</span><br><span class="line"></span><br><span class="line">48. max_binlog_size</span><br><span class="line"></span><br><span class="line">指定binary log文件的最大容量，默认为1GB。</span><br><span class="line"></span><br><span class="line">49. max_connections</span><br><span class="line"></span><br><span class="line">允许同时连接MySQL服务器的客户数量。如果超出该值，MySQL会返回Too many connections错误，但通常情况下，MySQL能够自行解决。</span><br><span class="line"></span><br><span class="line">50. max_connect_errors</span><br><span class="line"></span><br><span class="line">对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST;。</span><br><span class="line"></span><br><span class="line">51. max_delayed_threads</span><br><span class="line"></span><br><span class="line">不要启动多于的这个数字的线程来处理INSERT DELAYED语句。如果你试图在所有INSERT DELAYED线程在用后向一张新表插入数据，行将被插入，就像DELAYED属性没被指定那样。</span><br><span class="line"></span><br><span class="line">52. max_heap_table_size</span><br><span class="line"></span><br><span class="line">内存表所能使用的最大容量。</span><br><span class="line"></span><br><span class="line">53. max_join_size</span><br><span class="line"></span><br><span class="line">如果要查询多于max_join_size个记录的联合将返回一个错误。如果要执行没有一个WHERE的语句并且耗费大量时间，且返回上百万行的联结，则需要加大该参数值。</span><br><span class="line"></span><br><span class="line">54. max_sort_length</span><br><span class="line"></span><br><span class="line">在排序BLOB或TEXT值时使用的字节数(每个值仅头max_sort_length个字节被使用;其余的被忽略)。</span><br><span class="line"></span><br><span class="line">55. max_user_connections</span><br><span class="line"></span><br><span class="line">指定来自同一用户的最多连接数。设置为0则代表不限制。</span><br><span class="line"></span><br><span class="line">56. max_tmp_tables</span><br><span class="line"></span><br><span class="line">(该参数目前还没有作用)。一个客户能同时保持打开的临时表的最大数量。</span><br><span class="line"></span><br><span class="line">57. max_write_lock_count</span><br><span class="line"></span><br><span class="line">当出现max_write_lock_count个写入锁定数量后，开始允许一些被锁定的读操作开始执行。避免写入锁定过多，读取操作处于长时间等待状态。</span><br><span class="line"></span><br><span class="line">58. myisam_recover_options</span><br></pre></td></tr></table></figure><h2 id="查看连接数"><a href="#查看连接数" class="headerlink" title="查看连接数"></a>查看连接数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show processlist; #只列出前100条</span><br><span class="line">show full processlist;</span><br></pre></td></tr></table></figure><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">show status;</span><br><span class="line">show status like &apos;%下面变量%&apos;;</span><br><span class="line">Aborted_clients 由于客户没有正确关闭连接已经死掉，已经放弃的连接数量。 </span><br><span class="line">Aborted_connects 尝试已经失败的MySQL服务器的连接的次数。 </span><br><span class="line">Connections 试图连接MySQL服务器的次数。 </span><br><span class="line">Created_tmp_tables 当执行语句时，已经被创造了的隐含临时表的数量。 </span><br><span class="line">Delayed_insert_threads 正在使用的延迟插入处理器线程的数量。 </span><br><span class="line">Delayed_writes 用INSERT DELAYED写入的行数。 </span><br><span class="line">Delayed_errors 用INSERT DELAYED写入的发生某些错误(可能重复键值)的行数。 </span><br><span class="line">Flush_commands 执行FLUSH命令的次数。 </span><br><span class="line">Handler_delete 请求从一张表中删除行的次数。 </span><br><span class="line">Handler_read_first 请求读入表中第一行的次数。 </span><br><span class="line">Handler_read_key 请求数字基于键读行。 </span><br><span class="line">Handler_read_next 请求读入基于一个键的一行的次数。 </span><br><span class="line">Handler_read_rnd 请求读入基于一个固定位置的一行的次数。 </span><br><span class="line">Handler_update 请求更新表中一行的次数。 </span><br><span class="line">Handler_write 请求向表中插入一行的次数。 </span><br><span class="line">Key_blocks_used 用于关键字缓存的块的数量。 </span><br><span class="line">Key_read_requests 请求从缓存读入一个键值的次数。 </span><br><span class="line">Key_reads 从磁盘物理读入一个键值的次数。 </span><br><span class="line">Key_write_requests 请求将一个关键字块写入缓存次数。 </span><br><span class="line">Key_writes 将一个键值块物理写入磁盘的次数。 </span><br><span class="line">Max_used_connections 同时使用的连接的最大数目。 </span><br><span class="line">Not_flushed_key_blocks 在键缓存中已经改变但是还没被清空到磁盘上的键块。 </span><br><span class="line">Not_flushed_delayed_rows 在INSERT DELAY队列中等待写入的行的数量。 </span><br><span class="line">Open_tables 打开表的数量。 </span><br><span class="line">Open_files 打开文件的数量。 </span><br><span class="line">Open_streams 打开流的数量(主要用于日志记载） </span><br><span class="line">Opened_tables 已经打开的表的数量。 </span><br><span class="line">Questions 发往服务器的查询的数量。 </span><br><span class="line">Slow_queries 要花超过long_query_time时间的查询数量。 </span><br><span class="line">Threads_connected 当前打开的连接的数量。 </span><br><span class="line">Threads_running 不在睡眠的线程数量。 </span><br><span class="line">Uptime 服务器工作了多少秒。</span><br></pre></td></tr></table></figure><h2 id="mysql-按照条件导出sql"><a href="#mysql-按照条件导出sql" class="headerlink" title="mysql 按照条件导出sql"></a>mysql 按照条件导出sql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p xxxdb --no-create-db=TRUE --no-create-info=TRUE --add-drop-table=FALSE --where=&quot;xxxx = xxx&quot; biz_appointment&gt;rs.sql;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p xxxdb --no-create-db=TRUE --no-create-info=TRUE --add-drop-table=FALSE -w &quot;(order_id) in (select id from biz_order where xxxxx=10067&quot; --lock-all-tables biz_order_trade &gt; rs_order_trade.sql;</span><br></pre></td></tr></table></figure><h2 id="忘记root密码"><a href="#忘记root密码" class="headerlink" title="忘记root密码"></a>忘记root密码</h2><h3 id="修改MySQL的登录设置"><a href="#修改MySQL的登录设置" class="headerlink" title="修改MySQL的登录设置"></a>修改MySQL的登录设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/my.cnf </span><br><span class="line">在[mysqld]的段中加上一句：skip-grant-tables</span><br></pre></td></tr></table></figure><h3 id="重新启动mysqld"><a href="#重新启动mysqld" class="headerlink" title="重新启动mysqld"></a>重新启动mysqld</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h3 id="登录并修改MySQL的root密码"><a href="#登录并修改MySQL的root密码" class="headerlink" title="登录并修改MySQL的root密码"></a>登录并修改MySQL的root密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql</span><br><span class="line">use mysql</span><br><span class="line">update user set authentication_string=password(&apos;123456&apos;) where user=&apos;root&apos;;</span><br><span class="line">flush privileges ;</span><br></pre></td></tr></table></figure><h3 id="改回登录设置"><a href="#改回登录设置" class="headerlink" title="改回登录设置"></a>改回登录设置</h3><h3 id="重新启动mysqld-1"><a href="#重新启动mysqld-1" class="headerlink" title="重新启动mysqld"></a>重新启动mysqld</h3><h2 id="mysqladmin"><a href="#mysqladmin" class="headerlink" title="mysqladmin"></a>mysqladmin</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">create databasename</span><br><span class="line">drop databasename</span><br><span class="line">extended-status              给出服务器的一个扩展状态消息</span><br><span class="line">flush-hosts                     洗掉所有缓存的主机</span><br><span class="line">flush-logs                      洗掉所有日志 </span><br><span class="line">flush-tables                    洗掉所有表 </span><br><span class="line">flush-privileges                再次装载授权表(同reload) </span><br><span class="line">kill id,id,...                  杀死mysql线程 </span><br><span class="line">password                        新口令，将老口令改为新口令</span><br><span class="line">ping                            检查mysqld是否活着 </span><br><span class="line">processlist                     显示服务其中活跃线程列表</span><br><span class="line">reload                          重载授权表 </span><br><span class="line">refresh                  洗掉所有表并关闭和打开日志文件</span><br><span class="line">shutdown                        关掉服务器 </span><br><span class="line">status                          给出服务器的简短状态消息</span><br><span class="line">variables                       打印出可用变量</span><br><span class="line">version                         得到服务器的版本信息</span><br></pre></td></tr></table></figure><h2 id="第三方参照"><a href="#第三方参照" class="headerlink" title="第三方参照"></a>第三方参照</h2><p><a href="http://www.cnblogs.com/huangxincheng/p/7456397.html" target="_blank" rel="noopener">缓存一致性和跨服务器查询的数据异构解决方案canal</a></p><p><a href="http://www.cnblogs.com/lyhabc/p/3691555.html" target="_blank" rel="noopener">MYSQL 学习</a></p><p><a href="https://blog.csdn.net/longxibendi/article/details/42195399" target="_blank" rel="noopener">编译安装altas</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-配置</title>
      <link href="/2019/01/03/mysql/MySQL%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2019/01/03/mysql/MySQL%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL配置文件"><a href="#MySQL配置文件" class="headerlink" title="MySQL配置文件"></a>MySQL配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"></span><br><span class="line">port = 3306</span><br><span class="line"></span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">port = 3306</span><br><span class="line"></span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line"></span><br><span class="line">datadir = /data/mysql</span><br><span class="line"></span><br><span class="line">pid-file = /data/mysql/mysql.pid</span><br><span class="line"></span><br><span class="line">user = mysql</span><br><span class="line"></span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line"></span><br><span class="line">server-id = 1 #表示是本机的序号为1,一般来讲就是master的意思</span><br><span class="line"></span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line"># 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，</span><br><span class="line"></span><br><span class="line"># 则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求</span><br><span class="line"></span><br><span class="line">#skip-networking</span><br><span class="line"></span><br><span class="line">back_log = 600</span><br><span class="line"></span><br><span class="line"># MySQL能有的连接数量。当主要MySQL线程在一个很短时间内得到非常多的连接请求，这就起作用，</span><br><span class="line"></span><br><span class="line"># 然后主线程花些时间(尽管很短)检查连接并且启动一个新线程。back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。</span><br><span class="line"></span><br><span class="line"># 如果期望在一个短时间内有很多连接，你需要增加它。也就是说，如果MySQL的连接数据达到max_connections时，新来的请求将会被存在堆栈中，</span><br><span class="line"></span><br><span class="line"># 以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。</span><br><span class="line"></span><br><span class="line"># 另外，这值（back_log）限于您的操作系统对到来的TCP/IP连接的侦听队列的大小。</span><br><span class="line"></span><br><span class="line"># 你的操作系统在这个队列大小上有它自己的限制（可以检查你的OS文档找出这个变量的最大值），试图设定back_log高于你的操作系统的限制将是无效的。</span><br><span class="line"></span><br><span class="line">max_connections = 1000</span><br><span class="line"></span><br><span class="line"># MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下，因为如果连接数越多，介于MySQL会为每个连接提供连接缓冲区，就会开销越多的内存，所以要适当调整该值，不能盲目提高设值。可以过&apos;conn%&apos;通配符查看当前状态的连接数量，以定夺该值的大小。</span><br><span class="line"></span><br><span class="line">max_connect_errors = 6000</span><br><span class="line"></span><br><span class="line"># 对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST。</span><br><span class="line"></span><br><span class="line">open_files_limit = 65535</span><br><span class="line"></span><br><span class="line"># MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，</span><br><span class="line"></span><br><span class="line"># 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。</span><br><span class="line"></span><br><span class="line">table_open_cache = 128</span><br><span class="line"></span><br><span class="line"># MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中，当MySQL在这个缓存中找不到相应信息时，才会去磁盘上读取。默认值64</span><br><span class="line"></span><br><span class="line"># 假定系统有200个并发连接，则需将此参数设置为200*N(N为每个连接所需的文件描述符数目)；</span><br><span class="line"></span><br><span class="line"># 当把table_open_cache设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上</span><br><span class="line"></span><br><span class="line">max_allowed_packet = 4M</span><br><span class="line"></span><br><span class="line"># 接受的数据包大小；增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或MySQLd必须返回大的结果行时MySQLd才会分配更多内存。</span><br><span class="line"></span><br><span class="line"># 该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。</span><br><span class="line"></span><br><span class="line">binlog_cache_size = 1M</span><br><span class="line"></span><br><span class="line"># 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K</span><br><span class="line"></span><br><span class="line">max_heap_table_size = 8M</span><br><span class="line"></span><br><span class="line"># 定义了用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。这个变量支持动态改变</span><br><span class="line"></span><br><span class="line">tmp_table_size = 16M</span><br><span class="line"></span><br><span class="line"># MySQL的heap（堆积）表缓冲大小。所有联合在一个DML指令内完成，并且大多数联合甚至可以不用临时表即可以完成。</span><br><span class="line"></span><br><span class="line"># 大多数临时表是基于内存的(HEAP)表。具有大的记录长度的临时表 (所有列的长度的和)或包含BLOB列的表存储在硬盘上。</span><br><span class="line"></span><br><span class="line"># 如果某个内部heap（堆积）表大小超过tmp_table_size，MySQL可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表。还可以通过设置tmp_table_size选项来增加临时表的大小。也就是说，如果调高该值，MySQL同时将增加heap表的大小，可达到提高联接查询速度的效果</span><br><span class="line"></span><br><span class="line">read_buffer_size = 2M</span><br><span class="line"></span><br><span class="line"># MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。</span><br><span class="line"></span><br><span class="line"># 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能</span><br><span class="line"></span><br><span class="line">read_rnd_buffer_size = 8M</span><br><span class="line"></span><br><span class="line"># MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，</span><br><span class="line"></span><br><span class="line"># MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大</span><br><span class="line"></span><br><span class="line">sort_buffer_size = 8M</span><br><span class="line"></span><br><span class="line"># MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。</span><br><span class="line"></span><br><span class="line"># 如果不能，可以尝试增加sort_buffer_size变量的大小</span><br><span class="line"></span><br><span class="line">join_buffer_size = 8M</span><br><span class="line"></span><br><span class="line"># 联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享</span><br><span class="line"></span><br><span class="line">thread_cache_size = 8</span><br><span class="line"></span><br><span class="line"># 这个值（默认8）表示可以重新利用保存在缓存中线程的数量，当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，</span><br><span class="line"></span><br><span class="line"># 如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，</span><br><span class="line"></span><br><span class="line"># 增加这个值可以改善系统性能.通过比较Connections和Threads_created状态的变量，可以看到这个变量的作用。(–&gt;表示要调整的值)</span><br><span class="line"></span><br><span class="line"># 根据物理内存设置规则如下：</span><br><span class="line"></span><br><span class="line"># 1G  —&gt; 8</span><br><span class="line"></span><br><span class="line"># 2G  —&gt; 16</span><br><span class="line"></span><br><span class="line"># 3G  —&gt; 32</span><br><span class="line"></span><br><span class="line"># 大于3G  —&gt; 64</span><br><span class="line"></span><br><span class="line">query_cache_size = 8M</span><br><span class="line"></span><br><span class="line">#MySQL的查询缓冲大小（从4.0.1开始，MySQL提供了查询缓冲机制）使用查询缓冲，MySQL将SELECT语句和查询结果存放在缓冲区中，</span><br><span class="line"></span><br><span class="line"># 今后对于同样的SELECT语句（区分大小写），将直接从缓冲区中读取结果。根据MySQL用户手册，使用查询缓冲最多可以达到238%的效率。</span><br><span class="line"></span><br><span class="line"># 通过检查状态值&apos;Qcache_%&apos;，可以知道query_cache_size设置是否合理：如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，</span><br><span class="line"></span><br><span class="line"># 如果Qcache_hits的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；如果Qcache_hits的值不大，则表明你的查询重复率很低，</span><br><span class="line"></span><br><span class="line"># 这种情况下使用查询缓冲反而会影响效率，那么可以考虑不用查询缓冲。此外，在SELECT语句中加入SQL_NO_CACHE可以明确表示不使用查询缓冲</span><br><span class="line"></span><br><span class="line">query_cache_limit = 2M</span><br><span class="line"></span><br><span class="line">#指定单个查询能够使用的缓冲区大小，默认1M</span><br><span class="line"></span><br><span class="line">key_buffer_size = 4M</span><br><span class="line"></span><br><span class="line">#指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，</span><br><span class="line"></span><br><span class="line"># 系统将开始换页并且真的变慢了。对于内存在4GB左右的服务器该参数可设置为384M或512M。通过检查状态值Key_read_requests和Key_reads，</span><br><span class="line"></span><br><span class="line"># 可以知道key_buffer_size设置是否合理。比例key_reads/key_read_requests应该尽可能的低，</span><br><span class="line"></span><br><span class="line"># 至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE &apos;key_read%&apos;获得)。注意：该参数值设置的过大反而会是服务器整体效率降低</span><br><span class="line"></span><br><span class="line">ft_min_word_len = 4</span><br><span class="line"></span><br><span class="line"># 分词词汇最小长度，默认4</span><br><span class="line"></span><br><span class="line">transaction_isolation = REPEATABLE-READ</span><br><span class="line"></span><br><span class="line"># MySQL支持4种事务隔离级别，他们分别是：</span><br><span class="line"></span><br><span class="line"># READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.</span><br><span class="line"></span><br><span class="line"># 如没有指定，MySQL默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED</span><br><span class="line"></span><br><span class="line">log_bin = mysql-bin</span><br><span class="line"></span><br><span class="line">binlog_format = mixed</span><br><span class="line"></span><br><span class="line">expire_logs_days = 30 #超过30天的binlog删除</span><br><span class="line"></span><br><span class="line">log_error = /data/mysql/mysql-error.log #错误日志路径</span><br><span class="line"></span><br><span class="line">slow_query_log = 1</span><br><span class="line"></span><br><span class="line">long_query_time = 1 #慢查询时间 超过1秒则为慢查询</span><br><span class="line"></span><br><span class="line">slow_query_log_file = /data/mysql/mysql-slow.log</span><br><span class="line"></span><br><span class="line">performance_schema = 0</span><br><span class="line"></span><br><span class="line">explicit_defaults_for_timestamp</span><br><span class="line"></span><br><span class="line">#lower_case_table_names = 1 #不区分大小写</span><br><span class="line"></span><br><span class="line">skip-external-locking #MySQL选项以避免外部锁定。该选项默认开启</span><br><span class="line"></span><br><span class="line">default-storage-engine = InnoDB #默认存储引擎</span><br><span class="line"></span><br><span class="line">innodb_file_per_table = 1</span><br><span class="line"></span><br><span class="line"># InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间</span><br><span class="line"></span><br><span class="line"># 独立表空间优点：</span><br><span class="line"></span><br><span class="line"># 1．每个表都有自已独立的表空间。</span><br><span class="line"></span><br><span class="line"># 2．每个表的数据和索引都会存在自已的表空间中。</span><br><span class="line"></span><br><span class="line"># 3．可以实现单表在不同的数据库中移动。</span><br><span class="line"></span><br><span class="line"># 4．空间可以回收（除drop table操作处，表空不能自已回收）</span><br><span class="line"></span><br><span class="line"># 缺点：</span><br><span class="line"></span><br><span class="line"># 单表增加过大，如超过100G</span><br><span class="line"></span><br><span class="line"># 结论：</span><br><span class="line"></span><br><span class="line"># 共享表空间在Insert操作上少有优势。其它都没独立表空间表现好。当启用独立表空间时，请合理调整：innodb_open_files</span><br><span class="line"></span><br><span class="line">innodb_open_files = 500</span><br><span class="line"></span><br><span class="line"># 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300</span><br><span class="line"></span><br><span class="line">innodb_buffer_pool_size = 64M</span><br><span class="line"></span><br><span class="line"># InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.</span><br><span class="line"></span><br><span class="line"># 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.</span><br><span class="line"></span><br><span class="line"># 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%</span><br><span class="line"></span><br><span class="line"># 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.</span><br><span class="line"></span><br><span class="line"># 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,</span><br><span class="line"></span><br><span class="line"># 所以不要设置的太高.</span><br><span class="line"></span><br><span class="line">innodb_write_io_threads = 4</span><br><span class="line"></span><br><span class="line">innodb_read_io_threads = 4</span><br><span class="line"></span><br><span class="line"># innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4</span><br><span class="line"></span><br><span class="line"># 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64</span><br><span class="line"></span><br><span class="line">innodb_thread_concurrency = 0</span><br><span class="line"></span><br><span class="line"># 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量</span><br><span class="line"></span><br><span class="line">innodb_purge_threads = 1</span><br><span class="line"></span><br><span class="line"># InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操作是主线程的一部分，这意味着运行时它可能会堵塞其它的数据库操作。</span><br><span class="line"></span><br><span class="line"># 从MySQL5.5.X版本开始，该操作运行于独立的线程中,并支持更多的并发数。用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单</span><br><span class="line"></span><br><span class="line"># 独线程,默认情况下参数设置为0(不使用单独线程),设置为 1 时表示使用单独的清除线程。建议为1</span><br><span class="line"></span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line"></span><br><span class="line"># 0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。</span><br><span class="line"></span><br><span class="line"># 主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1</span><br><span class="line"></span><br><span class="line"># 1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。</span><br><span class="line"></span><br><span class="line"># 2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。</span><br><span class="line"></span><br><span class="line"># 每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘</span><br><span class="line"></span><br><span class="line"># 默认值1是为了保证完整的ACID。当然，你可以将这个配置项设为1以外的值来换取更高的性能，但是在系统崩溃的时候，你将会丢失1秒的数据。</span><br><span class="line"></span><br><span class="line"># 设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。InnoDB在做恢复的时候会忽略这个值。</span><br><span class="line"></span><br><span class="line"># 总结</span><br><span class="line"></span><br><span class="line"># 设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2，如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能</span><br><span class="line"></span><br><span class="line">innodb_log_buffer_size = 2M</span><br><span class="line"></span><br><span class="line"># 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间</span><br><span class="line"></span><br><span class="line">innodb_log_file_size = 32M</span><br><span class="line"></span><br><span class="line"># 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间</span><br><span class="line"></span><br><span class="line">innodb_log_files_in_group = 3</span><br><span class="line"></span><br><span class="line"># 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</span><br><span class="line"></span><br><span class="line">innodb_max_dirty_pages_pct = 90</span><br><span class="line"></span><br><span class="line"># innodb主线程刷新缓存池中的数据，使脏数据比例小于90%</span><br><span class="line"></span><br><span class="line">innodb_lock_wait_timeout = 120</span><br><span class="line"></span><br><span class="line"># InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒</span><br><span class="line"></span><br><span class="line">bulk_insert_buffer_size = 8M</span><br><span class="line"></span><br><span class="line"># 批量插入缓存大小， 这个参数是针对MyISAM存储引擎来说的。适用于在一次性插入100-1000+条记录时， 提高效率。默认值是8M。可以针对数据量的大小，翻倍增加。</span><br><span class="line"></span><br><span class="line">myisam_sort_buffer_size = 8M</span><br><span class="line"></span><br><span class="line"># MyISAM设置恢复表之时使用的缓冲区的尺寸，当在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区</span><br><span class="line"></span><br><span class="line">myisam_max_sort_file_size = 10G</span><br><span class="line"></span><br><span class="line"># 如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出</span><br><span class="line"></span><br><span class="line">myisam_repair_threads = 1</span><br><span class="line"></span><br><span class="line"># 如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内)</span><br><span class="line"></span><br><span class="line">interactive_timeout = 28800</span><br><span class="line"></span><br><span class="line"># 服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。默认值：28800秒（8小时）</span><br><span class="line"></span><br><span class="line">wait_timeout = 28800</span><br><span class="line"></span><br><span class="line"># 服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，</span><br><span class="line"></span><br><span class="line"># 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。参数默认值：28800秒（8小时）</span><br><span class="line"></span><br><span class="line"># MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL Server处理完相应的操作后，</span><br><span class="line"></span><br><span class="line"># 应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，</span><br><span class="line"></span><br><span class="line"># 最终肯定会达到MySQL Server的连接上限数，这会报&apos;too many connections&apos;的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。</span><br><span class="line"></span><br><span class="line"># 在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，</span><br><span class="line"></span><br><span class="line"># 可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line"></span><br><span class="line">quick</span><br><span class="line"></span><br><span class="line">max_allowed_packet = 16M #服务器发送和接受的最大包长度</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line"></span><br><span class="line">key_buffer_size = 8M</span><br><span class="line"></span><br><span class="line">sort_buffer_size = 8M</span><br><span class="line"></span><br><span class="line">read_buffer = 4M</span><br><span class="line"></span><br><span class="line">write_buffer = 4M</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-网络监控</title>
      <link href="/2018/12/25/linux/iftop/"/>
      <url>/2018/12/25/linux/iftop/</url>
      
        <content type="html"><![CDATA[<h1 id="iftop"><a href="#iftop" class="headerlink" title="iftop"></a>iftop</h1><p>TX：发送流量<br>RX：接收流量<br>TOTAL：总流量<br>Cumm：运行iftop到目前时间的总流量<br>peak：流量峰值<br>rates：分别表示过去 2s 10s 40s 的平均流量</p><p>按h切换是否显示帮助;</p><p>按n切换显示本机的IP或主机名;</p><p>按s切换是否显示本机的host信息;</p><p>按d切换是否显示远端目标主机的host信息;</p><p>按t切换显示格式为2行/1行/只显示发送流量/只显示接收流量;</p><p>按N切换显示端口号或端口服务名称;</p><p>按S切换是否显示本机的端口信息;</p><p>按D切换是否显示远端目标主机的端口信息;</p><p>按p切换是否显示端口信息;</p><p>按P切换暂停/继续显示;</p><p>按b切换是否显示平均流量图形条;</p><p>按B切换计算2秒或10秒或40秒内的平均流量;</p><p>按T切换是否显示每个连接的总流量;</p><p>按l打开屏幕过滤功能，输入要过滤的字符，比如ip,按回车后，屏幕就只显示这个IP相关的流量信息;</p><p>按L切换显示画面上边的刻度;刻度不同，流量图形条会有变化;</p><p>按j或按k可以向上或向下滚动屏幕显示的连接记录;</p><p>按1或2或3可以根据右侧显示的三列流量数据进行排序;</p><p>按&lt;根据左边的本机名或IP排序;</p><p>按&gt;根据远端目标主机的主机名或IP排序;</p><p>按o切换是否固定只显示当前的连接;</p><p>按f可以编辑过滤代码，这是翻译过来的说法，我还没用过这个！</p><p>按!可以使用shell命令，这个没用过！没搞明白啥命令在这好用呢！</p><p>按q退出监控。</p><p>常用：t p n</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDE-idea</title>
      <link href="/2018/12/25/tool/IDEA/"/>
      <url>/2018/12/25/tool/IDEA/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="显示当前类的层次结构"><a href="#显示当前类的层次结构" class="headerlink" title="显示当前类的层次结构"></a>显示当前类的层次结构</h3><p>⌃H(control + H)</p><h3 id="显示方法层次结构"><a href="#显示方法层次结构" class="headerlink" title="显示方法层次结构"></a>显示方法层次结构</h3><p>⌘⇧H(common+shift+h)</p><h3 id="显示调用层次结构"><a href="#显示调用层次结构" class="headerlink" title="显示调用层次结构"></a>显示调用层次结构</h3><p>⌃⌥H(control+alt+h)</p><h3 id="复制行"><a href="#复制行" class="headerlink" title="复制行"></a>复制行</h3><p>⌘D</p><h3 id="自动代码"><a href="#自动代码" class="headerlink" title="自动代码"></a>自动代码</h3><h3 id="可以显示当前文件的结构"><a href="#可以显示当前文件的结构" class="headerlink" title="可以显示当前文件的结构"></a>可以显示当前文件的结构</h3><p>⌘F12</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p>⌘⌥U</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-内核调优</title>
      <link href="/2018/12/24/linux/%E5%86%85%E6%A0%B8%E8%B0%83%E4%BC%98sysctl.conf/"/>
      <url>/2018/12/24/linux/%E5%86%85%E6%A0%B8%E8%B0%83%E4%BC%98sysctl.conf/</url>
      
        <content type="html"><![CDATA[<h1 id="内核调优sysctl-conf"><a href="#内核调优sysctl-conf" class="headerlink" title="内核调优sysctl.conf"></a>内核调优sysctl.conf</h1><h2 id="net-ipv4-tcp-syncookies-1"><a href="#net-ipv4-tcp-syncookies-1" class="headerlink" title="net.ipv4.tcp_syncookies = 1"></a>net.ipv4.tcp_syncookies = 1</h2><p>表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</p><h2 id="net-ipv4-tcp-tw-reuse-1"><a href="#net-ipv4-tcp-tw-reuse-1" class="headerlink" title="net.ipv4.tcp_tw_reuse = 1"></a>net.ipv4.tcp_tw_reuse = 1</h2><p>表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</p><h2 id="net-ipv4-tcp-tw-recycle-1"><a href="#net-ipv4-tcp-tw-recycle-1" class="headerlink" title="net.ipv4.tcp_tw_recycle = 1"></a>net.ipv4.tcp_tw_recycle = 1</h2><p>表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭；</p><h2 id="net-ipv4-tcp-fin-timeout-30"><a href="#net-ipv4-tcp-fin-timeout-30" class="headerlink" title="net.ipv4.tcp_fin_timeout = 30"></a>net.ipv4.tcp_fin_timeout = 30</h2><p>修改系統默认的 TIMEOUT 时间</p><h2 id="net-ipv4-tcp-keepalive-time-1200"><a href="#net-ipv4-tcp-keepalive-time-1200" class="headerlink" title="net.ipv4.tcp_keepalive_time = 1200"></a>net.ipv4.tcp_keepalive_time = 1200</h2><p>表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。</p><h2 id="net-ipv4-ip-local-port-range-10000-65000"><a href="#net-ipv4-ip-local-port-range-10000-65000" class="headerlink" title="net.ipv4.ip_local_port_range = 10000 65000"></a>net.ipv4.ip_local_port_range = 10000 65000</h2><p>表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为10000到65000。（注意：这里不要将最低值设的太低，否则可能会占用掉正常的端口！）</p><h2 id="net-ipv4-tcp-max-syn-backlog-8192"><a href="#net-ipv4-tcp-max-syn-backlog-8192" class="headerlink" title="net.ipv4.tcp_max_syn_backlog = 8192"></a>net.ipv4.tcp_max_syn_backlog = 8192</h2><p>表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。</p><h2 id="net-ipv4-tcp-max-tw-buckets-6000"><a href="#net-ipv4-tcp-max-tw-buckets-6000" class="headerlink" title="net.ipv4.tcp_max_tw_buckets = 6000"></a>net.ipv4.tcp_max_tw_buckets = 6000</h2><p>表示系统同时保持TIME_WAIT的最大数量，如果超过这个数字，TIME_WAIT将立刻被清除并打印警告信息。默 认为180000，改为6000。对于Apache、Nginx等服务器，上几行的参数可以很好地减少TIME_WAIT套接字数量，但是对于Squid，效果却不大。此项参数可以控制TIME_WAIT的最大数量，避免Squid服务器被大量的TIME_WAIT拖死。</p><h2 id="net-ipv4-tcp-max-syn-backlog-65536"><a href="#net-ipv4-tcp-max-syn-backlog-65536" class="headerlink" title="net.ipv4.tcp_max_syn_backlog = 65536"></a>net.ipv4.tcp_max_syn_backlog = 65536</h2><p>记录的那些尚未收到客户端确认信息的连接请求的最大值。对于有128M内存的系统而言，缺省值是1024，小内存的系统则是128。</p><h2 id="net-core-netdev-max-backlog-32768"><a href="#net-core-netdev-max-backlog-32768" class="headerlink" title="net.core.netdev_max_backlog = 32768"></a>net.core.netdev_max_backlog = 32768</h2><p>每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</p><h2 id="net-core-somaxconn-32768"><a href="#net-core-somaxconn-32768" class="headerlink" title="net.core.somaxconn = 32768"></a>net.core.somaxconn = 32768</h2><p>web应用中listen函数的backlog默认会给我们内核参数的net.core.somaxconn限制到128，而nginx定义的NGX_LISTEN_BACKLOG默认为511，所以有必要调整这个值。</p><h2 id="net-core-wmem-default-8388608"><a href="#net-core-wmem-default-8388608" class="headerlink" title="net.core.wmem_default = 8388608"></a>net.core.wmem_default = 8388608</h2><h2 id="net-core-rmem-default-8388608"><a href="#net-core-rmem-default-8388608" class="headerlink" title="net.core.rmem_default = 8388608"></a>net.core.rmem_default = 8388608</h2><h2 id="net-core-rmem-max-16777216-最大socket读buffer-可参考的优化值-873200"><a href="#net-core-rmem-max-16777216-最大socket读buffer-可参考的优化值-873200" class="headerlink" title="net.core.rmem_max = 16777216           最大socket读buffer,可参考的优化值:873200"></a>net.core.rmem_max = 16777216           最大socket读buffer,可参考的优化值:873200</h2><h2 id="net-core-wmem-max-16777216-最大socket写buffer-可参考的优化值-873200"><a href="#net-core-wmem-max-16777216-最大socket写buffer-可参考的优化值-873200" class="headerlink" title="net.core.wmem_max = 16777216           最大socket写buffer,可参考的优化值:873200"></a>net.core.wmem_max = 16777216           最大socket写buffer,可参考的优化值:873200</h2><h2 id="net-ipv4-tcp-timestsmps-0"><a href="#net-ipv4-tcp-timestsmps-0" class="headerlink" title="net.ipv4.tcp_timestsmps = 0"></a>net.ipv4.tcp_timestsmps = 0</h2><p>时间戳可以避免序列号的卷绕。一个1Gbps的链路肯定会遇到以前用过的序列号。时间戳能够让内核接受这种“异常”的数据包。这里需要将其关掉。</p><h2 id="net-ipv4-tcp-synack-retries-2"><a href="#net-ipv4-tcp-synack-retries-2" class="headerlink" title="net.ipv4.tcp_synack_retries = 2"></a>net.ipv4.tcp_synack_retries = 2</h2><p>为了打开对端的连接，内核需要发送一个SYN并附带一个回应前面一个SYN的ACK。也就是所谓三次握手中的第二次握手。这个设置决定了内核放弃连接之前发送SYN+ACK包的数量。</p><h2 id="net-ipv4-tcp-syn-retries-2"><a href="#net-ipv4-tcp-syn-retries-2" class="headerlink" title="net.ipv4.tcp_syn_retries = 2"></a>net.ipv4.tcp_syn_retries = 2</h2><p>在内核放弃建立连接之前发送SYN包的数量。</p><h2 id="net-ipv4-tcp-tw-len-1"><a href="#net-ipv4-tcp-tw-len-1" class="headerlink" title="#net.ipv4.tcp_tw_len = 1"></a>#net.ipv4.tcp_tw_len = 1</h2><h2 id="net-ipv4-tcp-tw-reuse-1-1"><a href="#net-ipv4-tcp-tw-reuse-1-1" class="headerlink" title="net.ipv4.tcp_tw_reuse = 1"></a>net.ipv4.tcp_tw_reuse = 1</h2><p> 开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接。</p><h2 id="net-ipv4-tcp-wmem-8192-436600-873200"><a href="#net-ipv4-tcp-wmem-8192-436600-873200" class="headerlink" title="net.ipv4.tcp_wmem = 8192 436600 873200"></a>net.ipv4.tcp_wmem = 8192 436600 873200</h2><p>TCP写buffer,可参考的优化值: 8192 436600 873200</p><h2 id="net-ipv4-tcp-rmem-32768-436600-873200"><a href="#net-ipv4-tcp-rmem-32768-436600-873200" class="headerlink" title="net.ipv4.tcp_rmem  = 32768 436600 873200"></a>net.ipv4.tcp_rmem  = 32768 436600 873200</h2><p>TCP读buffer,可参考的优化值: 32768 436600 873200</p><h2 id="net-ipv4-tcp-mem-94500000-91500000-92700000"><a href="#net-ipv4-tcp-mem-94500000-91500000-92700000" class="headerlink" title="net.ipv4.tcp_mem = 94500000 91500000 92700000"></a>net.ipv4.tcp_mem = 94500000 91500000 92700000</h2><p> 同样有3个值,意思是:<br>net.ipv4.tcp_mem[0]:低于此值，TCP没有内存压力。<br>net.ipv4.tcp_mem[1]:在此值下，进入内存压力阶段。<br>net.ipv4.tcp_mem[2]:高于此值，TCP拒绝分配socket。<br>上述内存单位是页，而不是字节。可参考的优化值是:786432 1048576 1572864</p><h2 id="net-ipv4-tcp-max-orphans-3276800"><a href="#net-ipv4-tcp-max-orphans-3276800" class="headerlink" title="net.ipv4.tcp_max_orphans = 3276800"></a>net.ipv4.tcp_max_orphans = 3276800</h2><p>系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。<br>如果超过这个数字，连接将即刻被复位并打印出警告信息。<br>这个限制仅仅是为了防止简单的DoS攻击，不能过分依靠它或者人为地减小这个值，<br>更应该增加这个值(如果增加了内存之后)。</p><h2 id="net-ipv4-tcp-fin-timeout-30-1"><a href="#net-ipv4-tcp-fin-timeout-30-1" class="headerlink" title="net.ipv4.tcp_fin_timeout = 30"></a>net.ipv4.tcp_fin_timeout = 30</h2><p>如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间。对端可以出错并永远不关闭连接，甚至意外当机。缺省值是60秒。2.2 内核的通常值是180秒，你可以按这个设置，但要记住的是，即使你的机器是一个轻载的WEB服务器，也有因为大量的死套接字而内存溢出的风险，FIN- WAIT-2的危险性比FIN-WAIT-1要小，因为它最多只能吃掉1.5K内存，但是它们的生存期长些。</p><h2 id="DOS和DDOS原理"><a href="#DOS和DDOS原理" class="headerlink" title="DOS和DDOS原理"></a>DOS和DDOS原理</h2><p>假冒的IP发来海量的请求连接的第一个握手包（SYN包），被攻击服务器回应第二个握手包（SYN+ACK包），因为对方是假冒IP，对方永远收不到包且不会回应第三个握手包。导致被攻击服务器保持大量SYN_RECV状态的“半连接”</p><h3 id="应急处理"><a href="#应急处理" class="headerlink" title="应急处理"></a>应急处理</h3><p>netstat -na&gt;net.log<br>netstat -na |grep SYN_RECV|more<br>iptables -A INPUT -s  173.0.0.0/8  -p tcp  –dport 80 -j DROP</p><h3 id="使用F5挡攻击-中转一层"><a href="#使用F5挡攻击-中转一层" class="headerlink" title="使用F5挡攻击,中转一层"></a>使用F5挡攻击,中转一层</h3><p>让客户端先和F5三次握手，连接建立之后F5才转发到后端业务服务器</p><h3 id="调整系统参数挡攻击"><a href="#调整系统参数挡攻击" class="headerlink" title="调整系统参数挡攻击"></a>调整系统参数挡攻击</h3><p>tcp_synack_retries = 0<br>不重试，默认重试5次<br>net.ipv4.tcp_max_syn_backlog = 200000</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">sysctl -a | grep net.ipv4.tcp_tw_reuse</span><br><span class="line"></span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">kernel.sysrq = 0</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line">vm.swappiness = 0</span><br><span class="line">net.ipv4.neigh.default.gc_stale_time=120</span><br><span class="line">net.ipv4.conf.all.rp_filter=0</span><br><span class="line">net.ipv4.conf.default.rp_filter=0</span><br><span class="line">net.ipv4.conf.default.arp_announce = 2</span><br><span class="line">net.ipv4.conf.all.arp_announce=2</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 8192</span><br><span class="line">net.ipv4.tcp_synack_retries = 2</span><br><span class="line">net.ipv4.conf.lo.arp_announce=2</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line">sysctl -a | grep net.ipv4.tcp_tw_reuse</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java-时间复杂度</title>
      <link href="/2018/12/22/JVM/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2018/12/22/JVM/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><h2 id="时间复杂度说明"><a href="#时间复杂度说明" class="headerlink" title="时间复杂度说明"></a>时间复杂度说明</h2><table><thead><tr><th>复杂度</th><th>标记符号</th><th>描述</th></tr></thead><tbody><tr><td>常量</td><td>O(1)</td><td>操作的数量为常数，与输入的数据的规模无关。</td></tr><tr><td>对数</td><td>O(log2 n)</td><td>操作的数量与输入数据的规模 n 的比例是 log2 (n),当n=8，log2(8)=3即2的立方=8，以10为底的对数简写做 lg N</td></tr><tr><td>线性</td><td>O(n)</td><td>操作的数量与输入数据的规模 n 成正比</td></tr><tr><td>平方</td><td>O(n2)</td><td>操作的数量与输入数据的规模 n 的比例为二次平方</td></tr><tr><td>立方</td><td>O(n3)</td><td></td></tr><tr><td>指数</td><td>O(2n) O(kn) O(n!)</td><td>指数级的操作，快速的增长</td></tr></tbody></table><h2 id="时间复杂度与运行时间"><a href="#时间复杂度与运行时间" class="headerlink" title="时间复杂度与运行时间"></a>时间复杂度与运行时间</h2><table><thead><tr><th>复杂度</th><th>1000</th><th>10000</th><th>100000</th></tr></thead><tbody><tr><td>O(1)</td><td>&lt;1s</td><td>&lt;1s</td><td>&lt;1s</td></tr><tr><td>O(log2(n))</td><td>&lt;1s</td><td>&lt;1s</td><td>&lt;1s</td></tr><tr><td>O(n)</td><td>&lt;1s</td><td>&lt;1s</td><td>&lt;1s</td></tr><tr><td>(n*log2(n))</td><td>&lt;1s</td><td>&lt;1s</td><td>&lt;1s</td></tr><tr><td>O(n2)</td><td>&lt;1s</td><td>2s</td><td>3-4 min</td></tr><tr><td>O(n3)</td><td>20s</td><td>5 hours</td><td>231 days</td></tr></tbody></table><p>ps:循环1 &lt;&lt; n，时间复杂度为 2的n次方</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-隔离级别</title>
      <link href="/2018/12/14/mysql/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
      <url>/2018/12/14/mysql/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql隔离级别"><a href="#Mysql隔离级别" class="headerlink" title="Mysql隔离级别"></a>Mysql隔离级别</h1><p>场景一：B事务update 未commit<br>场景二：B事务update commit<br>场景三：B事务insert commit，A事务commit</p><h2 id="read-uncommit："><a href="#read-uncommit：" class="headerlink" title="read-uncommit："></a>read-uncommit：</h2><p>一：A事务select出update后结果。脏读！不可重复读！幻读！</p><h2 id="read-commit："><a href="#read-commit：" class="headerlink" title="read-commit："></a>read-commit：</h2><p>一：A事务select出update前结果。不脏读。<br>二：A事务select出update后结果。不可重复读！幻读！</p><h2 id="repeatable-read"><a href="#repeatable-read" class="headerlink" title="repeatable-read:"></a>repeatable-read:</h2><p>一：A事务select出update前结果。不脏读。<br>二：A事务select出update前结果。可重复读。<br>三：突然多出一条记录。幻读！<br>原理：使用了MVCC机制，select操作不会更新版本号，是快照读（历史版本）；insert、update和delete会更新版本号，是当前读（当前版本）。</p><h2 id="serializable"><a href="#serializable" class="headerlink" title="serializable:"></a>serializable:</h2><p>B事务insert 失败！<br>原理：锁表</p><p>小结：不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tool-brew</title>
      <link href="/2018/12/12/tool/Homebrew/"/>
      <url>/2018/12/12/tool/Homebrew/</url>
      
        <content type="html"><![CDATA[<h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h1><h2 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tomcat</span><br></pre></td></tr></table></figure><p>安装的是最新版的版本</p><h2 id="卸载-Tomcat"><a href="#卸载-Tomcat" class="headerlink" title="卸载 Tomcat"></a>卸载 Tomcat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall tomcat</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade tomcat</span><br></pre></td></tr></table></figure><p>更新不会删除原来的，相当于重新安装一个最新版，也就是说配置不能共用</p><h2 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew switch tomcat 8.5.4</span><br></pre></td></tr></table></figure><p>升级会出现几个不同版本的 Tomcat 同时存在，切换到指定的版本就很有必要了<br>卸载</p><h2 id="卸载全部旧版本"><a href="#卸载全部旧版本" class="headerlink" title="卸载全部旧版本"></a>卸载全部旧版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup tomcat</span><br></pre></td></tr></table></figure><h2 id="卸载当前版本"><a href="#卸载当前版本" class="headerlink" title="卸载当前版本"></a>卸载当前版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew remove tomcat</span><br></pre></td></tr></table></figure><h2 id="卸载全部版本"><a href="#卸载全部版本" class="headerlink" title="卸载全部版本"></a>卸载全部版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall --force tomcat</span><br></pre></td></tr></table></figure><h2 id="卸载指定版本"><a href="#卸载指定版本" class="headerlink" title="卸载指定版本"></a>卸载指定版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew switch tomcat 8.5.4</span><br><span class="line">brew remove tomcat</span><br></pre></td></tr></table></figure><h2 id="查看已安装的-Tomcat-的版本和最新的版本信息"><a href="#查看已安装的-Tomcat-的版本和最新的版本信息" class="headerlink" title="查看已安装的 Tomcat 的版本和最新的版本信息"></a>查看已安装的 Tomcat 的版本和最新的版本信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info tomcat</span><br></pre></td></tr></table></figure><h2 id="查看可安装的-Tomcat-的所有版本"><a href="#查看可安装的-Tomcat-的所有版本" class="headerlink" title="查看可安装的 Tomcat 的所有版本"></a>查看可安装的 Tomcat 的所有版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search tomcat</span><br></pre></td></tr></table></figure><p>输出:<br>homebrew/versions/tomcat6<br>homebrew/versions/tomcat7<br>tomcat<br>tomcat-native</p><h2 id="安装指定版本的-Tomcat，例如-tomcat6"><a href="#安装指定版本的-Tomcat，例如-tomcat6" class="headerlink" title="安装指定版本的 Tomcat，例如 tomcat6"></a>安装指定版本的 Tomcat，例如 tomcat6</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install homebrew/versions/tomcat6</span><br></pre></td></tr></table></figure><h2 id="列出已经安装的软件"><a href="#列出已经安装的软件" class="headerlink" title="列出已经安装的软件"></a>列出已经安装的软件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure><h2 id="查看-brew-的帮助"><a href="#查看-brew-的帮助" class="headerlink" title="查看 brew 的帮助"></a>查看 brew 的帮助</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man brew</span><br></pre></td></tr></table></figure><h2 id="列出所有安装的软件里可以升级的"><a href="#列出所有安装的软件里可以升级的" class="headerlink" title="列出所有安装的软件里可以升级的"></a>列出所有安装的软件里可以升级的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew outdated</span><br></pre></td></tr></table></figure><h2 id="清理不需要的版本极其安装包缓存"><a href="#清理不需要的版本极其安装包缓存" class="headerlink" title="清理不需要的版本极其安装包缓存"></a>清理不需要的版本极其安装包缓存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring boot-启动</title>
      <link href="/2018/11/29/spring/spring%20boot-%E5%90%AF%E5%8A%A8/"/>
      <url>/2018/11/29/spring/spring%20boot-%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-boot-启动"><a href="#spring-boot-启动" class="headerlink" title="spring boot-启动"></a>spring boot-启动</h1><h2 id="启动原理"><a href="#启动原理" class="headerlink" title="启动原理"></a>启动原理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">* SpringBootApplication</span><br><span class="line">*     0. ComponetScan</span><br><span class="line">*        EnableAutoConfiguration</span><br><span class="line">*           AutoConfigurationPackage</span><br><span class="line">*           Import(AutoConfigurationImportSelector.class)-&gt;spring.factores</span><br><span class="line">*               Conifuration</span><br><span class="line">*               ConditionalOnClass</span><br><span class="line">*               ConditionalOnProperty</span><br><span class="line">* run</span><br><span class="line">*     1. new SpringApplication</span><br><span class="line">*         create ApplicationContext</span><br><span class="line">*         SpringFactoriesLoader load ApplicationContextInitializer</span><br><span class="line">*         SpringFactoriesLoader load ApplicationListener</span><br><span class="line">*         main</span><br><span class="line">*     2. for **ApplicationRunListener.started()**</span><br><span class="line">*     3. init Environment</span><br><span class="line">*     4. **ApplicationRunListener.environmentPrepared()**</span><br><span class="line">*     5. sout banner</span><br><span class="line">*     6. ApplicationContextClass.setEnviroment(env) (ShutdownHook BeanNameGenerator ResourceLoader)</span><br><span class="line">*     7. SpringFactoriesLoader ApplicationContextInitializer.initialize()</span><br><span class="line">*     8. **ApplicationRunListener.contextPrepared()**</span><br><span class="line">*     9. 0-&gt;ApplicationContext</span><br><span class="line">*     10. **ApplicationRunListener.contextLoaded()**</span><br><span class="line">*     11. ApplicationContext.refresh()</span><br><span class="line">*     12. CommandLineRunner</span><br><span class="line">*     13. **ApplicationRunListener.finished()**</span><br></pre></td></tr></table></figure><ol><li>扫描所有configuration类和spring.factores中定义的初始化类</li><li>创建applicationContext，springFactoriesLoader load Initializer 和 applicationLister</li><li>applicationRunLister -&gt; started</li><li>初始化 环境变量</li><li>applicationRunLister -&gt; environmentPrepared</li><li>设置环境变量到applicationContext</li></ol><h2 id="spring-boot-war"><a href="#spring-boot-war" class="headerlink" title="spring boot war"></a>spring boot war</h2><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'war'</span></span><br><span class="line"><span class="keyword">compile</span>(<span class="string">"org.springframework.boot:spring-boot-starter-web:$&#123;springBootVersion&#125;"</span>) &#123;</span><br><span class="line">            <span class="keyword">exclude</span> module:<span class="string">"spring-boot-starter-tomcat"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">"javax.servlet:javax.servlet-api:3.1.0"</span>)</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">"org.apache.tomcat:tomcat-servlet-api:8.0.36"</span>)</span><br></pre></td></tr></table></figure><h3 id="Application-java"><a href="#Application-java" class="headerlink" title="Application.java"></a>Application.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *重写configure</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> builder</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.sources(Application.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC处理流程"><a href="#SpringMVC处理流程" class="headerlink" title="SpringMVC处理流程"></a>SpringMVC处理流程</h2><ul><li>用户发送请求至前端控制器DispatcherServlet。</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li><li>处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter处理器适配器。</li><li>HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</li><li>Controller执行完成返回ModelAndView。</li><li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</li><li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</li><li>ViewReslover解析后返回具体View。</li><li>DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</li><li>DispatcherServlet响应用户。</li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java-JVM调优</title>
      <link href="/2018/11/20/JVM/JVM%E8%B0%83%E4%BC%98/"/>
      <url>/2018/11/20/JVM/JVM%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h1><h2 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h2><ol><li>基本数据类型，堆对象的引用，程序存储在栈中，方法以先进后出进栈，栈的起点是main方法<br>一个线程对应一个栈空间，栈是运行单元，<strong>栈调优参数：-Xss</strong>，StackOverFlowError是栈中死循环无法返回递归。</li><li>对象存储在堆中，堆是存储单元。<strong>堆调优参数：-Xms</strong></li></ol><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><ol><li>引用计数：增加一个对象引用，计数加1，减少一个对象引用，计数减1，计数为0 回收，问题：循环引用无法回收</li><li>标记-清除：第一阶段从根节点开始标记对象引用，第二阶段未标记的对象清除。问题：空间碎片</li><li>复制：两块内存，复制正在使用对象到另外一块内存空间。问题：两倍空间</li><li>标记-整理：第一阶段从根节点开始标记对象引用，第二阶段未标记的对象清除同时整理存活对象到清除的对象空间上</li></ol><h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><p>不同对象有不同的生命周期（人也如此），session，socket等需要长周期，String 这种不变类需要短周期</p><ol><li>分代：</li></ol><ul><li>年轻代（Eden，survivor），有意思的命名！Eden：伊甸园，亚当夏娃居住地。survivor：幸存者</li><li>年老代，</li><li>持久代（方法区），java.lang.OutOfMemoryError: PermGen space，<strong>调优参数：-XX:MaxPermSize</strong>。<br>调优经验：<br>问题描述：thrift定义了大量big class，尽管以及做了生产环境1024M的调优，但依旧出现PerGen space错误。<br>解决办法：升级到jdk8。<br>原理：因为jdk8已经元空间代替持久代，metaspace占用本地内存，不占用虚拟机内存。</li></ul><ol start="2"><li>GC类型</li></ol><ul><li>scavenge（搜索） GC：主要作用于年轻代，高频清理Eden，采用并行收集器，<strong>调优参数：XX:+UseParallelGC</strong></li><li>full GC</li></ul><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><ul><li>-Xmx：JVM最大可用内存</li><li>-Xms：JVM初始内存，设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存</li><li>-Xmn：年轻代内存</li><li>-Xss：</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题-持续更新</title>
      <link href="/2018/11/16/other/%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
      <url>/2018/11/16/other/%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="面试题-持续更新"><a href="#面试题-持续更新" class="headerlink" title="面试题-持续更新"></a>面试题-持续更新</h1><h2 id="一、Java基础"><a href="#一、Java基础" class="headerlink" title="一、Java基础"></a>一、Java基础</h2><p>Collections.sort()方法<br>写一个类，继承AtomicLong，再写一个setIfGreater方法，如果新值比旧值大就替换，要求无锁并线程安全。<br>实现一个LinkedMultiValueMap类，一个key对应多个value（value可以存储List<v>），需要实现add方法，set方法，get方法，put方法等。要求无锁并线程安全。<br>举例说明Spring框架的异步servlet。<br>Java阻塞队列ArrayBlockingQueue和LinkedBlockingQueue实现原理分析</v></p><h2 id="二、Java多线程"><a href="#二、Java多线程" class="headerlink" title="二、Java多线程"></a>二、Java多线程</h2><p>线程池的原理，为什么要创建线程池？创建线程池的方式；<br>线程的生命周期，什么时候会出现僵死进程；<br>说说线程安全问题，什么实现线程安全，如何实现线程安全；<br>创建线程池有哪几个核心参数？ 如何合理配置线程池的大小？<br>volatile、ThreadLocal的使用场景和原理；<br>ThreadLocal什么时候会出现OOM的情况？为什么？<br>synchronized、volatile区别、synchronized锁粒度、模拟死锁场景、原子性与可见性；</p><h2 id="三、JVM相关"><a href="#三、JVM相关" class="headerlink" title="三、JVM相关"></a>三、JVM相关</h2><p>JVM内存模型，GC机制和原理；<br>GC分哪两种，Minor GC 和Full GC有什么区别？什么时候会触发Full GC？分别采用什么算法？<br>JVM里的有几种classloader，为什么会有多种？<br>什么是双亲委派机制？介绍一些运作过程，双亲委派模型的好处；<br>什么情况下我们需要破坏双亲委派模型；<br>常见的JVM调优方法有哪些？可以具体到调整哪个参数，调成什么值？<br>JVM虚拟机内存划分、类加载器、垃圾收集算法、垃圾收集器、class文件结构是如何解析的；<br>java 查看GC日志，如何计算 allocation rate 和 promotion rate </p><h2 id="四、Java扩展篇"><a href="#四、Java扩展篇" class="headerlink" title="四、Java扩展篇"></a>四、Java扩展篇</h2><p>红黑树的实现原理和应用场景；<br>NIO是什么？适用于何种场景？<br>Java9比Java8改进了什么；<br>HashMap内部的数据结构是什么？底层是怎么实现的？（还可能会延伸考察ConcurrentHashMap与HashMap、HashTable等，考察对技术细节的深入了解程度）；<br>说说反射的用途及实现，反射是不是很慢，我们在项目中是否要避免使用反射；<br>说说自定义注解的场景及实现；<br>List 和 Map 区别，Arraylist 与 LinkedList 区别，ArrayList 与 Vector 区别；</p><h2 id="五、Spring相关"><a href="#五、Spring相关" class="headerlink" title="五、Spring相关"></a>五、Spring相关</h2><p>Spring AOP的实现原理和场景？<br>Spring bean的作用域和生命周期；<br>Spring Boot比Spring做了哪些改进？ Spring 5比Spring4做了哪些改进；<br>如何自定义一个Spring Boot Starter？<br>Spring IOC是什么？优点是什么？<br>SpringMVC、动态代理、反射、AOP原理、事务隔离级别；</p><h2 id="六、中间件篇"><a href="#六、中间件篇" class="headerlink" title="六、中间件篇"></a>六、中间件篇</h2><p>Dubbo完整的一次调用链路介绍；<br>Dubbo支持几种负载均衡策略？<br>Dubbo Provider服务提供者要控制执行并发请求上限，具体怎么做？<br>Dubbo启动的时候支持几种配置方式？<br>了解几种消息中间件产品？各产品的优缺点介绍；<br>消息中间件如何保证消息的一致性和如何进行消息的重试机制？<br>Spring Cloud熔断机制介绍；<br>Spring Cloud对比下Dubbo，什么场景下该使用Spring Cloud？</p><h2 id="七、数据库篇"><a href="#七、数据库篇" class="headerlink" title="七、数据库篇"></a>七、数据库篇</h2><p>锁机制介绍：行锁、表锁、排他锁、共享锁；<br>乐观锁的业务场景及实现方式；<br>事务介绍，分布式事物的理解，常见的解决方案有哪些，什么事两阶段提交、三阶段提交；<br>MySQL记录binlog的方式主要包括三种模式？每种模式的优缺点是什么？<br>MySQL锁，悲观锁、乐观锁、排它锁、共享锁、表级锁、行级锁；<br>分布式事务的原理2阶段提交，同步异步阻塞非阻塞；<br>数据库事务隔离级别，MySQL默认的隔离级别、Spring如何实现事务、JDBC如何实现事务、嵌套事务实现、分布式事务实现；<br>SQL的整个解析、执行过程原理、SQL行转列；<br>mysql语句优化</p><h2 id="八、Redis"><a href="#八、Redis" class="headerlink" title="八、Redis"></a>八、Redis</h2><p>Redis为什么这么快？redis采用多线程会有哪些问题？<br>Redis支持哪几种数据结构；<br>Redis跳跃表的问题；<br>Redis单进程单线程的Redis如何能够高并发?<br>Redis如何使用Redis实现分布式锁？<br>Redis分布式锁操作的原子性，Redis内部是如何实现的？</p><h2 id="九、监控"><a href="#九、监控" class="headerlink" title="九、监控"></a>九、监控</h2><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>CPU负载：监控CPU一段时间内负载平均值<br>CPU数量：监控CPU在线或者最大数量<br>CPU利用率：监控一段时间内CPU的idle，nice，user<br>CPU信息：监测CPU相关信息，如频率</p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>内存总大小<br>内存使用量<br>剩余内存<br>内存缓存</p><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>从设备到内存统计<br>从内存到设备统计<br>交换空间大小</p><h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><p>磁盘读取统计信息<br>磁盘写入统计<br>磁盘空间</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程CPU利用率百分比<br>用户进程使用内存<br>进程数量</p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>网络接口列表<br>网卡流入量统计<br>网卡流出量统计</p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP状态</p><h2 id="十、数据结构与算法"><a href="#十、数据结构与算法" class="headerlink" title="十、数据结构与算法"></a>十、数据结构与算法</h2><p>二叉树<br>红黑树</p><h2 id="十一、架构"><a href="#十一、架构" class="headerlink" title="十一、架构"></a>十一、架构</h2><p>反向代理方面，nginx的基本配置，比如如何通过lua语言设置规则，如何设置session粘滞。如果可以，再看些nginx的底层，比如协议，集群设置，失效转移等。</p><p>远程调用dubbo方面，可以看下dubbo和zookeeper整合的知识点，再深一步，了解下dubbo底层的传输协议和序列化方式。</p><p>消息队列方面，可以看下kafka或任意一种组件的使用方式，简单点可以看下配置，工作组的设置，再深入点，可以看下Kafka集群，持久化的方式，以及发送消息是用长连接还是短拦截。</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>k8s集群安装</title>
      <link href="/2018/10/11/k8s/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/10/11/k8s/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="k8s集群部署"><a href="#k8s集群部署" class="headerlink" title="k8s集群部署"></a>k8s集群部署</h1><h2 id="master"><a href="#master" class="headerlink" title="master"></a>master</h2><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl --static set-hostname master</span><br><span class="line">vi /etc/hosts</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install firewalld -y</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">apt install selinux-utils -y</span><br><span class="line">setenforce 0</span><br><span class="line">swapoff -a</span><br></pre></td></tr></table></figure><p>vi /etc/sysctl.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure></p><p>sysctl -p</p><p>vi /etc/docker/daemon.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;iptables&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/sysctl.d/k8s.conf &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装包允许apt通过HTTPS使用仓库</span></span><br><span class="line"><span class="number">1</span>. apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加Docker官方GPG key</span></span><br><span class="line"><span class="number">2</span>. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key <span class="keyword">add</span> -</span><br><span class="line"></span><br><span class="line"># 设置Docker稳定版仓库</span><br><span class="line">3. add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</span><br><span class="line"></span><br><span class="line">4. add-apt-repository "deb https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial main"</span><br><span class="line"></span><br><span class="line">5. apt-get update</span><br><span class="line"></span><br><span class="line"># 安装Docker CE（社区版）</span><br><span class="line">6. apt-get install -y docker-ce=17.03.2~ce-0~ubuntu-xenial</span><br></pre></td></tr></table></figure><h3 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y kubelet=1.10.3-00 kubeadm=1.10.3-00 kubectl=1.10.3-00 --allow-unauthenticated</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-cache madison kubeadm</span><br><span class="line">apt-get remove -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><h3 id="kubeadm初始化集群"><a href="#kubeadm初始化集群" class="headerlink" title="kubeadm初始化集群"></a>kubeadm初始化集群</h3><p><a href="https://hub.docker.com/u/anjia0532" target="_blank" rel="noopener">国内镜像</a><br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">images=(kube-proxy-amd64:v1.<span class="number">10.3</span> kube-scheduler-amd64:v1.<span class="number">10.3</span> kube-controller-manager-amd64:v1.<span class="number">10.3</span> kube-apiserver-amd64:v1.<span class="number">10.3</span> etcd-amd64:<span class="number">3.1</span>.<span class="number">12</span> pause-amd64:<span class="number">3.1</span> k8s-dns-sidecar-amd64:<span class="number">1.14</span>.<span class="number">8</span> k8s-dns-kube-dns-amd64:<span class="number">1.14</span>.<span class="number">8</span> k8s-dns-dnsmasq-nanny-amd64:<span class="number">1.14</span>.<span class="number">8</span>)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">  docker pull anjia0532/$imageName</span><br><span class="line">  docker tag anjia0532/$imageName k8s.gcr.io/$imageName</span><br><span class="line">  docker rmi anjia0532/$imageName</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建/etc/sysctl.d/k8s.conf文件，添加如下内容：</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br></pre></td></tr></table></figure><h4 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h4><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version <span class="number">1.10</span>.<span class="number">3</span> --apiserver-advertise-address=<span class="number">172</span>.xx.xxx.xx --pod-network-cidr=<span class="number">10.244</span>.<span class="number">0.0</span>/<span class="number">16</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><h4 id="生成如下串，请记录下来"><a href="#生成如下串，请记录下来" class="headerlink" title="生成如下串，请记录下来"></a>生成如下串，请记录下来</h4><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join <span class="number">172</span>.xx.xxx.xx:<span class="number">6443</span> --token xxxxxx --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line">kubectl get pod --all-namespaces</span><br><span class="line">kubectl create -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel-rbac.yml</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">heapster</span><br><span class="line">kubectl create -f http://res.yinnote.com/kubernetes/heapster/<span class="number">1.5</span>.<span class="number">1</span>/heapster-rbac.yaml</span><br><span class="line">kubectl create -f http://res.yinnote.com/kubernetes/heapster/<span class="number">1.5</span>.<span class="number">1</span>/influxdb/heapster.yaml</span><br></pre></td></tr></table></figure><h4 id="kubernetes-dashboard安装"><a href="#kubernetes-dashboard安装" class="headerlink" title="kubernetes-dashboard安装"></a>kubernetes-dashboard安装</h4><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull siriuszg/kubernetes-dashboard-amd64</span><br><span class="line">docker tag siriuszg/kubernetes-dashboard-amd64 k8s.gcr.io/kubernetes-dashboard-amd64:v1.<span class="number">10.0</span></span><br><span class="line"></span><br><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</span><br><span class="line"></span><br><span class="line">vi kubernetes-dashboard.yaml</span><br><span class="line">修改：</span><br><span class="line">type:NodePort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成client-certificate-data</span></span><br><span class="line">grep <span class="string">'client-certificate-data'</span> ~/.kube/config | head -n <span class="number">1</span> | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt;&gt; kubecfg.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成client-key-data</span></span><br><span class="line">grep <span class="string">'client-key-data'</span> ~/.kube/config | head -n <span class="number">1</span> | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt;&gt; kubecfg.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成p12</span></span><br><span class="line">openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name <span class="string">"kubernetes-client"</span></span><br><span class="line"></span><br><span class="line">https://<span class="number">192.168</span>.x.xxx:<span class="number">6443</span>/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl describe secret admin-<span class="keyword">user</span> --namespace=kube-system</span><br></pre></td></tr></table></figure><h2 id="node1"><a href="#node1" class="headerlink" title="node1"></a>node1</h2><h3 id="将Node加到集群中"><a href="#将Node加到集群中" class="headerlink" title="将Node加到集群中"></a>将Node加到集群中</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">images=(kube-proxy-amd64:v1.<span class="number">10.3</span> kube-scheduler-amd64:v1.<span class="number">10.3</span> kube-controller-manager-amd64:v1.<span class="number">10.3</span> kube-apiserver-amd64:v1.<span class="number">10.3</span> etcd-amd64:<span class="number">3.1</span>.<span class="number">12</span> pause-amd64:<span class="number">3.1</span> k8s-dns-sidecar-amd64:<span class="number">1.14</span>.<span class="number">8</span> k8s-dns-kube-dns-amd64:<span class="number">1.14</span>.<span class="number">8</span> k8s-dns-dnsmasq-nanny-amd64:<span class="number">1.14</span>.<span class="number">8</span>)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">  docker pull anjia0532/$imageName</span><br><span class="line">  docker tag anjia0532/$imageName k8s.gcr.io/$imageName</span><br><span class="line">  docker rmi anjia0532/$imageName</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">kubeadm join <span class="number">172</span>.xx.xxx.xxx:<span class="number">6443</span> --token xxxxx --discovery-token-ca-cert-hash sha256:xxxxxxxxx</span><br></pre></td></tr></table></figure><hr><h2 id="k8s默认配置文件路径"><a href="#k8s默认配置文件路径" class="headerlink" title="k8s默认配置文件路径"></a>k8s默认配置文件路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/kubernetes/manifests</span><br></pre></td></tr></table></figure><h2 id="cni默认路径"><a href="#cni默认路径" class="headerlink" title="cni默认路径"></a>cni默认路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/cni/net.d</span><br></pre></td></tr></table></figure><h2 id="卸载集群"><a href="#卸载集群" class="headerlink" title="卸载集群"></a>卸载集群</h2><p>想要撤销kubeadm做的事，首先要排除节点，并确保在关闭节点之前要清空节点。</p><h3 id="在主节点上运行："><a href="#在主节点上运行：" class="headerlink" title="在主节点上运行："></a>在主节点上运行：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain &lt;node name&gt; --delete-local-data --force --ignore-daemonsets</span><br><span class="line">kubectl delete node &lt;node name&gt; --grace-period=0 --force</span><br></pre></td></tr></table></figure><p>然后在需要移除的节点上，重置kubeadm的安装状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure></p><p>如果你想重新配置集群，只需运行kubeadm init或者kubeadm join并使用所需的参数即可。</p><h3 id="卸载cni"><a href="#卸载cni" class="headerlink" title="卸载cni"></a>卸载cni</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br><span class="line">systemctl stop kubelet</span><br><span class="line">systemctl stop docker</span><br><span class="line">rm -rf /var/lib/cni/</span><br><span class="line">rm -rf /var/lib/kubelet/*</span><br><span class="line">rm -rf /etc/cni/</span><br><span class="line">ifconfig cni0 down</span><br><span class="line">ifconfig flannel.1 down</span><br><span class="line">ifconfig docker0 down</span><br><span class="line">ip link delete cni0</span><br><span class="line">ip link delete flannel.1</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl -u kubelet</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go-Golang NF</title>
      <link href="/2018/09/30/go/Niox%20Golang%20NF/"/>
      <url>/2018/09/30/go/Niox%20Golang%20NF/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-NF"><a href="#Golang-NF" class="headerlink" title="Golang NF"></a>Golang NF</h1><h2 id="NF简介"><a href="#NF简介" class="headerlink" title="NF简介"></a>NF简介</h2><p>NF是一个开发Go应用的框架。</p><h2 id="Golang开发环境搭建"><a href="#Golang开发环境搭建" class="headerlink" title="Golang开发环境搭建"></a>Golang开发环境搭建</h2><p>windows下安装Golang<br>windows下的安装步骤如下：<br>以go 1.6为例：<br>下载go1.6.windows-amd64.zip,​<a href="https://golang.org/dl/" target="_blank" rel="noopener">官方下载地址</a>，​<a href="http://pan.baidu.com/s/1hq1mrDM" target="_blank" rel="noopener">墙内下载</a><br>将下载的zip文件解压缩到期望安装的目录,这里假设该目录为%INSTALL_HOME%，解压缩完成后为 %INSTALL_HOME%/go<br>配置环境变量<br>GOROOT=%INSTALL_HOME%/go<br>GOPATH=%GO_WORKING_DIR%<br>将%GOROOT%/bin追加到系统的PATH环境变量下<br>以上配置成功后，在命令行下分别运行go version和go env可以看到具体go版本信息和配置的环境变量信息</p><h2 id="安装git-for-windows"><a href="#安装git-for-windows" class="headerlink" title="安装git-for-windows"></a>安装git-for-windows</h2><p>go get命令会使用到git,需要确保开发机器上的git命令可用。 可以下载安装​git-for-windows。</p><h2 id="Eclipse-IDE-Goclipse"><a href="#Eclipse-IDE-Goclipse" class="headerlink" title="Eclipse IDE + Goclipse"></a>Eclipse IDE + Goclipse</h2><p>Eclipse 4.5 (Mars) or later.<br>Java VM version 8 or later. （Goclipse要求Java8)<br>​Goclipse ​安装指南<br>GDB安装及Goclipse配置</p><p>Goclipse的调试功能需要使用GDB，在Windows下需要安装[mingw-w64 ​<a href="http://mingw-w64.org/doku.php]" target="_blank" rel="noopener">http://mingw-w64.org/doku.php]</a><br>在Eclipse的Preferences下的’C/C++’/‘Debug’/‘GDB’的配置页的gdb debugger中配置gdb可执行文件的具体路径。<br>在Eclipse的Preferences下的’Go’/‘Tool’的配置页中配置和安装gocode和godef</p><h2 id="Glide包管理工具"><a href="#Glide包管理工具" class="headerlink" title="Glide包管理工具"></a>Glide包管理工具</h2><h3 id="Glide-工具简介"><a href="#Glide-工具简介" class="headerlink" title="Glide 工具简介"></a>Glide 工具简介</h3><p>​Glide是golang包管理工具,相当于node的npm, python的pip, .net的NuGet等工具,用于管理golang开发中引用的第三方库.<br>Glide提供简单易用的依赖库管理,简单配置glide.yaml文件后就可以获取github等地host的依赖库.除此之外还支持从本地git库中获取依赖库.方便开发者管理组织代码以及vendor依赖.<br>主要特性</p><ul><li>简单易用的vendor库管理</li><li>支持​versioning package</li><li>支持添加库别名, aliasing package</li><li>支持golang提供的工具</li><li>支持仓库缓存,$GOPATH中仓库的重用</li><li>一定程度上能避免重复引用引用依赖<h3 id="Glide-安装"><a href="#Glide-安装" class="headerlink" title="Glide 安装"></a>Glide 安装</h3>下载release的可执行文件<br>Glide提供可执行文件的直接下载,根据target的运行环境自行选择binary下载, ​点此下载<br>经过测试稳定易用的版本目前为0.8.3, 下载后添加到环境变量PATH中,确保glide命令可以在命令行执行<br>从源码编译安装<br>glide也是用golang开发的，因此使用go get可以从源码编译安装glide的最新版本。编译的可执行文件被install到gopath下。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u github.com/Masterminds/glide</span><br></pre></td></tr></table></figure><h2 id="Glide-使用"><a href="#Glide-使用" class="headerlink" title="Glide 使用"></a>Glide 使用</h2><p>在使用glide命令工具前必须先正确设置GOPATH<br>目录结构:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- $GOPATH/src/myProject (Your project)</span><br><span class="line">|</span><br><span class="line">|-- glide.yaml</span><br><span class="line">|</span><br><span class="line">|-- glide.lock</span><br><span class="line">|</span><br><span class="line">|-- main.<span class="keyword">go</span> (Your main <span class="keyword">go</span> code can live here)</span><br><span class="line">|</span><br><span class="line">|-- mySubpackage (You can create your own subpackages, too)</span><br><span class="line">|    |</span><br><span class="line">|    |-- foo.<span class="keyword">go</span></span><br><span class="line">|</span><br><span class="line">|-- vendor</span><br><span class="line">     |-- github.com</span><br><span class="line">          |</span><br><span class="line">          |-- Masterminds</span><br><span class="line">                |</span><br><span class="line">                |-- ... etc.</span><br></pre></td></tr></table></figure><p>Glide适用场景下的目录结构如上所示, glide.yaml文件中配置有依赖库的列表, 在命令行中glide.yaml同级目录中执行 glide install 命令, glide会创建vendor目录,并且将所有获取的依赖包放到vendor目录中.<br>引用第三方包时, 和引用go get 取得的依赖时一样.<br>例如:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">glide get github.com/Masterminds/cookoo</span><br><span class="line"><span class="keyword">go</span> get github.com/Masterminds/cookoo</span><br><span class="line">        <span class="comment">// "gopkg.in/mgo.v2/bson"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/Masterminds/cookoo"</span></span><br></pre></td></tr></table></figure><p>以上两个命令依赖库的下载位置不同,但是引用时无区别</p><p>PS: Go1.5试用glide需要额外设置环境变量 GO15VENDOREXPERIMENT = 1, Go1.6则不需要设置</p><h3 id="Glide-Get"><a href="#Glide-Get" class="headerlink" title="Glide Get"></a>Glide Get</h3><p>glide get [package name] 能够获取参数中的扩展依赖,放在vendor目录下,并且生成glide.yaml中的对应条目</p><h3 id="Glide-Update"><a href="#Glide-Update" class="headerlink" title="Glide Update"></a>Glide Update</h3><p>glide update (aliased to up) 能够获取并更新glide.yaml中所有条目,并且放在vendor目录下,对于每个item的依赖会进行递归扫描.对于依赖中的其他包管理配置文件Godep, GPM, gb等,glide也会识别并下载更新到vendor目录下. glide.lock 文件中会生成或被更新,包含每个当前的依赖包的版本信息,精确到特定的commit</p><h3 id="Glide-Install"><a href="#Glide-Install" class="headerlink" title="Glide Install"></a>Glide Install</h3><p>glide install 能够获取并更新glide.lock file中的所有条目,由于glide.lock中包含版本信息,能够获取特定版本的依赖包. glide up 命令会重新生成或更新glide.lock文件.</p><h3 id="Glide-novendor"><a href="#Glide-novendor" class="headerlink" title="Glide novendor"></a>Glide novendor</h3><p>glide novendor (aliased to nv) Glide能够很好的和go工具一起使用,例如<br>go test sample:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> test ./...     <span class="comment">// 执行所有当前目录以及子目录下包括vendor目录下的test代码</span></span><br><span class="line"><span class="keyword">go</span> test $(glide novendor) <span class="comment">//执行所有当前目录以及子目录下,不包括vendor目录下的test代码</span></span><br></pre></td></tr></table></figure><h3 id="Glide-Rebuild"><a href="#Glide-Rebuild" class="headerlink" title="Glide Rebuild"></a>Glide Rebuild</h3><p>glide rebuild 重新编译第三方依赖,在gopath下的pkg目录下生成.a文件.<br>例子:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ glide rebuild</span><br><span class="line">[INFO] Building dependencies.</span><br><span class="line">[INFO] Running <span class="keyword">go</span> build github.com/kylelemons/<span class="keyword">go</span>-gypsy/yaml</span><br><span class="line">[INFO] Running <span class="keyword">go</span> build github.com/Masterminds/cookoo/cli</span><br><span class="line">[INFO] Running <span class="keyword">go</span> build github.com/Masterminds/cookoo</span><br></pre></td></tr></table></figure><h3 id="glide-yaml"><a href="#glide-yaml" class="headerlink" title="glide.yaml"></a>glide.yaml</h3><p>例子:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">package:</span> <span class="string">github.com/Masterminds/glide</span></span><br><span class="line"><span class="attr">import:</span></span><br><span class="line"><span class="attr">  - package:</span> <span class="string">github.com/Masterminds/semver</span>               <span class="string">//</span> <span class="string">从github.com</span> </span><br><span class="line"><span class="attr">  - package:</span> <span class="string">github.com/Masterminds/cookoo</span>               <span class="string">//</span> <span class="string">别名</span></span><br><span class="line"><span class="attr">    vcs:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    version:</span> <span class="string">^1.2.0</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">git@192.168.1.101/cookoo.git</span>                   <span class="string">//</span> <span class="string">从远程git仓库下载,</span> <span class="string">也可以是本地仓库</span></span><br></pre></td></tr></table></figure><h2 id="Config-Center-nconf"><a href="#Config-Center-nconf" class="headerlink" title="Config Center(nconf)"></a>Config Center(nconf)</h2><h3 id="nconf简介"><a href="#nconf简介" class="headerlink" title="nconf简介"></a>nconf简介</h3><p>nconf是NF框架基于​etcd的实现的集中配置管理中心(类似于淘宝的diamond和百度的disconf)<br>nconf可以为各种业务组件提供统一的配置管理服务。<br>nconf当前具有如下特点：<br>支持配置的分布式管理和配置发布统一化<br>提供简单的web管理端<br>支持多目录,多配置值监听<br>配置值的加密解密功能<br>nconf.NConf<br>niox/nf/nconf包提供了一个NConf接口，提供访问Config Center的基本功能.<br>该接口定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NConf <span class="keyword">interface</span> &#123;</span><br><span class="line">Get(key <span class="keyword">string</span>) <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">Set(key <span class="keyword">string</span>, value <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">Delete(key <span class="keyword">string</span>, recursive <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line">Watch(key <span class="keyword">string</span>, processor <span class="function"><span class="keyword">func</span><span class="params">(NodeMap)</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">GetInt</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">GetNodeMap</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">NodeMap</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">        <span class="title">GetNodes</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">NNode</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>使用nconf包下的func NewNConf(machines []string, userName, password string) NConf函数可以获取一个NConf接口的实例，全局持有即可，通过上面定义的方法从Config Center获取配置数据。<br>nconf使用示例<br>基于nconf读取配置信息，创建redis基础设施，监控redis配置，发生变化时重新初始化基础资源.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">redis nredis.Redis</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">mutex.Lock()</span><br><span class="line"><span class="keyword">defer</span> mutex.Unlock()</span><br><span class="line">cfgKey := <span class="string">"/res/redis"</span></span><br><span class="line"><span class="comment">// 从nconf中获取redis相关配置</span></span><br><span class="line">cfg := ncf.GetNodeMap(cfgKey)</span><br><span class="line"><span class="comment">// 创建redis基础设施</span></span><br><span class="line">createRedis(cfg)</span><br><span class="line"><span class="comment">// 监控redis相关配置,配置变化时重建基础设施</span></span><br><span class="line">ncf.Watch(cfgKey, createRedis)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createRedis</span><span class="params">(cfg nconf.NodeMap)</span></span> &#123;</span><br><span class="line">address := cfg.GetString(<span class="string">"/res/redis/address"</span>)</span><br><span class="line">password := cfg.GetString(<span class="string">"/res/redis/password"</span>)</span><br><span class="line">dbIndex := cfg.GetInt(<span class="string">"/res/redis/dbIndex"</span>)</span><br><span class="line"></span><br><span class="line">redis = nredis.NewRedis(address, password, dbIndex)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nconf-web管理端"><a href="#nconf-web管理端" class="headerlink" title="nconf web管理端"></a>nconf web管理端</h3><p>使用nconf管理后台可以维护配置中心存放的配置信息。<br><a href="http://192.168.1.101:9091/" target="_blank" rel="noopener">开发环境nconf​管理端地址</a><br>No image “NConfMangementConsole.png” attached to PcOneNf<br>基础设施和资源<br>NF框架提供mysql 使用NF框架提供的特性之前,需要在项目目录中建立infra目录添加初始化代码, 根据需要初始化需要用到的模块,并且要添加导入nconf.ini配置文件到你的项目中,以便NF框架连接到etcd集群<br>使用之前请首先取得glide.yaml, glide.lock文件执行glide install命令以获取第三方依赖</p><p>目录结构:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- $GOPATH/src/myProject (Your project)</span><br><span class="line">|</span><br><span class="line">|-- glide.yaml  <span class="comment">// "gopkg.in/mgo.v2/bson"</span></span><br><span class="line">|</span><br><span class="line">|-- glide.lock</span><br><span class="line">|</span><br><span class="line">|-- main.<span class="keyword">go</span> (Your main <span class="keyword">go</span> code can live here)</span><br><span class="line">|</span><br><span class="line">|-- nconf.ini    <span class="comment">// 包含etcd配置信息</span></span><br><span class="line">|</span><br><span class="line">|-- infra</span><br><span class="line">|    |</span><br><span class="line">|    |-- res</span><br><span class="line">|         |</span><br><span class="line">|         |-- init.<span class="keyword">go</span></span><br><span class="line">|         |-- nconf.<span class="keyword">go</span>                      <span class="comment">//nconf 配置初始化(mandatory) </span></span><br><span class="line">|         |-- mysql.<span class="keyword">go</span>  </span><br><span class="line">|         |-- 其他模块 </span><br><span class="line">|</span><br><span class="line">|-- vendor</span><br><span class="line">     |-- github.com</span><br><span class="line">          |</span><br><span class="line">          |-- Masterminds</span><br><span class="line">                |</span><br><span class="line">                |-- ... etc.</span><br></pre></td></tr></table></figure><h2 id="nsql"><a href="#nsql" class="headerlink" title="nsql"></a>nsql</h2><h3 id="nsql-示例"><a href="#nsql-示例" class="headerlink" title="nsql 示例"></a>nsql 示例</h3><p>示例数据库mysql</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Hospital <span class="keyword">struct</span> &#123;</span><br><span class="line">Id       <span class="keyword">int</span>    <span class="string">`db:"ID"`</span></span><br><span class="line">Name     <span class="keyword">string</span> <span class="string">`db:"NAME"`</span></span><br><span class="line">CityCode <span class="keyword">string</span> <span class="string">`db:"CITY_CODE"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Get查询单个"><a href="#Get查询单个" class="headerlink" title="Get查询单个"></a>Get查询单个</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">query := <span class="string">"SELECT ID , NAME , CITY_CODE FROM master_hospital WHERE ID = ?"</span></span><br><span class="line">result := &amp;Hospital&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> !db.Get(result, query, <span class="number">9</span>) &#123;</span><br><span class="line">result = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(result)</span><br><span class="line">query := <span class="string">"SELECT NAME FROM master_hospital WHERE ID = ?"</span></span><br><span class="line">result := <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> !db.Get(&amp;result, query, <span class="number">9</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">"未获取到"</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure><h3 id="NamedGet查询单个"><a href="#NamedGet查询单个" class="headerlink" title="NamedGet查询单个"></a>NamedGet查询单个</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">query := <span class="string">"SELECT ID , NAME , CITY_CODE FROM master_hospital WHERE ID = :ID"</span></span><br><span class="line">result := &amp;Hospital&#123;&#125;</span><br><span class="line">arg := &amp;Hospital&#123;Id: <span class="number">9</span>&#125;</span><br><span class="line"><span class="keyword">if</span> !db.NamedGet(result, query, arg) &#123;</span><br><span class="line">result = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(result)</span><br><span class="line">query := <span class="string">"SELECT NAME FROM master_hospital WHERE ID = :ID"</span></span><br><span class="line">result := <span class="string">""</span></span><br><span class="line">arg := &amp;Hospital&#123;Id: <span class="number">19</span>&#125;</span><br><span class="line"><span class="keyword">if</span> !db.NamedGet(&amp;result, query, arg) &#123;</span><br><span class="line">fmt.Println(<span class="string">"未获取到"</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure><h3 id="Select查询多个"><a href="#Select查询多个" class="headerlink" title="Select查询多个"></a>Select查询多个</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">query := &quot;SELECT ID , NAME , CITY_CODE FROM master_hospital WHERE ID &gt; ? AND ID &lt; ?&quot;</span><br><span class="line">result := []*Hospital&#123;&#125;</span><br><span class="line">db.Select(&amp;result, query, 2, 10)</span><br><span class="line">fmt.Println(result)</span><br><span class="line">query := &quot;SELECT ID  FROM master_hospital WHERE ID &gt; ? AND ID &lt; ?&quot;</span><br><span class="line">result := []int&#123;&#125;</span><br><span class="line">db.Select(&amp;result, query, 2, 10)</span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure><h3 id="NamedSelect查询多个"><a href="#NamedSelect查询多个" class="headerlink" title="NamedSelect查询多个"></a>NamedSelect查询多个</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">query := <span class="string">"SELECT ID , NAME , CITY_CODE FROM master_hospital WHERE ID &lt; :ID"</span></span><br><span class="line">result := []*Hospital&#123;&#125;</span><br><span class="line">arg := &amp;Hospital&#123;Id: <span class="number">10</span>&#125;</span><br><span class="line">db.NamedSelect(&amp;result, query, arg)</span><br><span class="line">fmt.Println(result)</span><br><span class="line">query := <span class="string">"SELECT ID FROM master_hospital WHERE ID &lt; :ID"</span></span><br><span class="line">result := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">arg := &amp;Hospital&#123;Id: <span class="number">10</span>&#125;</span><br><span class="line">db.NamedSelect(&amp;result, query, arg)</span><br><span class="line">fmt.Println(result)</span><br></pre></td></tr></table></figure><h3 id="Exec和NamedExec"><a href="#Exec和NamedExec" class="headerlink" title="Exec和NamedExec"></a>Exec和NamedExec</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">query := <span class="string">"UPDATE master_hospital SET NAME= ? WHERE ID = ?"</span></span><br><span class="line">result := db.Exec(query, <span class="string">"虚拟医院"</span>, <span class="number">9</span>)</span><br><span class="line">fmt.Println(result.RowsAffected())</span><br><span class="line">query := <span class="string">"UPDATE master_hospital SET NAME= :NAME WHERE ID = :ID"</span></span><br><span class="line">hosp := &amp;Hospital&#123;Id: <span class="number">9</span>, Name: <span class="string">"虚拟医院"</span>&#125;</span><br><span class="line">result := db.NamedExec(query, hosp)</span><br><span class="line">fmt.Println(result.RowsAffected())</span><br></pre></td></tr></table></figure><h3 id="Begin和Tx"><a href="#Begin和Tx" class="headerlink" title="Begin和Tx"></a>Begin和Tx</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tx := db.Begin()</span><br><span class="line">query := <span class="string">"UPDATE master_hospital SET NAME= :NAME WHERE ID = :ID"</span></span><br><span class="line">hosp := &amp;Hospital&#123;Id: <span class="number">9</span>, Name: <span class="string">"虚拟医院1"</span>&#125;</span><br><span class="line">result := tx.NamedExec(query, hosp)</span><br><span class="line">fmt.Println(result.RowsAffected())</span><br><span class="line">tx.Commit()</span><br></pre></td></tr></table></figure><h3 id="Prepare和PrepareNamed"><a href="#Prepare和PrepareNamed" class="headerlink" title="Prepare和PrepareNamed"></a>Prepare和PrepareNamed</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">query := <span class="string">"UPDATE master_hospital SET NAME= :NAME WHERE ID = :ID"</span></span><br><span class="line">stmt := db.PrepareNamed(query)</span><br><span class="line"></span><br><span class="line">hosp1 := &amp;Hospital&#123;Id: <span class="number">9</span>, Name: <span class="string">"虚拟医院 v2.0+"</span>&#125;</span><br><span class="line">hosp2 := &amp;Hospital&#123;Id: <span class="number">3</span>, Name: <span class="string">"安徽省省直机关医院"</span>&#125;</span><br><span class="line"></span><br><span class="line">result1 := stmt.NamedExec(hosp1)</span><br><span class="line">result2 := stmt.NamedExec(hosp2)</span><br><span class="line">fmt.Println(result1.RowsAffected(), result2.RowsAffected())</span><br></pre></td></tr></table></figure><h2 id="数据访问访问对象示例"><a href="#数据访问访问对象示例" class="headerlink" title="数据访问访问对象示例"></a>数据访问访问对象示例</h2><p>目录结构:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">- $GOPATH/src/myProject (Your project)</span><br><span class="line">|</span><br><span class="line">|-- glide.yaml</span><br><span class="line">|</span><br><span class="line">|-- glide.lock</span><br><span class="line">|</span><br><span class="line">|-- main.<span class="keyword">go</span> (Your main <span class="keyword">go</span> code can live here)</span><br><span class="line">|</span><br><span class="line">|-- nconf.ini    <span class="comment">// 包含etcd配置信息</span></span><br><span class="line">|</span><br><span class="line">|-- infra</span><br><span class="line">|    |</span><br><span class="line">|    |-- res</span><br><span class="line">|    |    |</span><br><span class="line">|    |    |-- init.<span class="keyword">go</span></span><br><span class="line">|    |    |-- nconf.<span class="keyword">go</span>                      <span class="comment">//nconf 配置初始化(mandatory) </span></span><br><span class="line">|    |    |-- mysql.<span class="keyword">go</span>  </span><br><span class="line">|    |</span><br><span class="line">|    |-- data                               <span class="comment">//包含dao 文件</span></span><br><span class="line">|    |    |</span><br><span class="line">|    |    |-- config_hospital_cloud_dao.<span class="keyword">go</span>  <span class="comment">// </span></span><br><span class="line">|    |</span><br><span class="line">|    |-- model                              <span class="comment">//包含数据实体</span></span><br><span class="line">|         |</span><br><span class="line">|         |-- config_hospital_cloud.<span class="keyword">go</span>      <span class="comment">// </span></span><br><span class="line">|</span><br><span class="line">|-- vendor</span><br><span class="line">     |-- github.com</span><br><span class="line">          |</span><br><span class="line">          |-- Masterminds</span><br><span class="line">                |</span><br><span class="line">                |-- ... etc.</span><br></pre></td></tr></table></figure><p>目录结构如上所示</p><h3 id="初始化NF框架中mysql模块nsql"><a href="#初始化NF框架中mysql模块nsql" class="headerlink" title="初始化NF框架中mysql模块nsql"></a>初始化NF框架中mysql模块nsql</h3><p>infra/res/mysql.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        _ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">        <span class="string">"niox/nf/nconf"</span></span><br><span class="line">        <span class="string">"niox/nf/nsql"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">        db nsql.DB</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mutex.Lock()</span><br><span class="line">        <span class="keyword">defer</span> mutex.Unlock()                  </span><br><span class="line"></span><br><span class="line">        cfgKey := <span class="string">"/res/mysql"</span>                  <span class="comment">// 指定etcd中对应的key</span></span><br><span class="line">        cfg = ncf.GetNodeMap(<span class="string">"/res/mysql"</span>)      <span class="comment">// 从etcd中取出mysql连接字符串</span></span><br><span class="line">        createDB(cfg)                           <span class="comment">// 建立DB连接池</span></span><br><span class="line">        ncf.Watch(cfgKey, createDB)             <span class="comment">// 监听指定etcd key下的变化,如果存在变化,自动使用新配置重新初始化db连接池</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createDB</span><span class="params">(cfg nconf.NodeMap)</span></span> &#123;</span><br><span class="line">        <span class="comment">// [username[:password]@][protocol[(address)]]/dbname[?param1=value1&amp;...&amp;paramN=valueN]</span></span><br><span class="line">        dsn := cfg.GetString(<span class="string">"/res/mysql/dsn"</span>)</span><br><span class="line">        db = nsql.NewDB(<span class="string">"mysql"</span>, dsn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDB</span><span class="params">()</span> <span class="title">nsql</span>.<span class="title">DB</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">        db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>infra/res/init.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Logger seelog.LoggerInterface</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//首先初始化nconf</span></span><br><span class="line">    initNConf()</span><br><span class="line">    </span><br><span class="line">    initDB()        <span class="comment">// 调用同为res包下的mysql.go的initDB方法,初始化mysql模块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义Dao以及model实体"><a href="#定义Dao以及model实体" class="headerlink" title="定义Dao以及model实体"></a>定义Dao以及model实体</h3><p>infra/data/config_hospital_cloud_dao.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">"niox/infra/model"</span></span><br><span class="line">        <span class="string">"niox/infra/res"</span></span><br><span class="line">        <span class="string">"niox/nf/nsql"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ConfigHospitalCloudDao <span class="keyword">interface</span> &#123;</span><br><span class="line">        <span class="comment">// 根据医院id获取 医院PC2配置信息</span></span><br><span class="line">        GetByHospId(hospId <span class="keyword">int</span>) *model.ConfigHospitalCloud</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewConfigHospitalCloudDao</span><span class="params">()</span> <span class="title">ConfigHospitalCloudDao</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;configHospitalCloudDaoImpl&#123;DB: res.GetDB()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> configHospitalCloudDaoImpl <span class="keyword">struct</span> &#123;</span><br><span class="line">        nsql.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据医院id获取 医院PC2配置信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dao *configHospitalCloudDaoImpl)</span> <span class="title">GetByHospId</span><span class="params">(hospId <span class="keyword">int</span>)</span> *<span class="title">model</span>.<span class="title">ConfigHospitalCloud</span></span> &#123;</span><br><span class="line">        sql := <span class="string">`SELECT</span></span><br><span class="line"><span class="string">          chc.ID,</span></span><br><span class="line"><span class="string">          chc.HOSPITAL_ID,</span></span><br><span class="line"><span class="string">          chc.VERSION_ID,</span></span><br><span class="line"><span class="string">          chc.IP,</span></span><br><span class="line"><span class="string">          chc.PORT,</span></span><br><span class="line"><span class="string">          chc.TIMEOUT,</span></span><br><span class="line"><span class="string">          chc.PROTOCOL,</span></span><br><span class="line"><span class="string">          chc.DEFAULT_PROTOCOL,</span></span><br><span class="line"><span class="string">          chc.OUTING_IP,</span></span><br><span class="line"><span class="string">          chc.TRANSPORT_TYPE,</span></span><br><span class="line"><span class="string">          chc.API_KEY,</span></span><br><span class="line"><span class="string">          chc.ENABLE</span></span><br><span class="line"><span class="string">    FROM config_hospital_cloud chc</span></span><br><span class="line"><span class="string">    WHERE HOSPITAL_ID = ?`</span></span><br><span class="line">        cfgHc := &amp;model.ConfigHospitalCloud&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dao.DB.Get(cfgHc, sql, hospId) &#123;</span><br><span class="line">                <span class="keyword">return</span> cfgHc</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>infra/data/config_hospital_cloud_dao.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">"niox/nf/util/lang"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先查看niox/nf/util/lang 包中封装的数据库类型定义, 理解lang.Int等类型为golang基础类型的可空封装</span></span><br><span class="line"><span class="keyword">type</span> ConfigHospitalCloud <span class="keyword">struct</span> &#123;</span><br><span class="line">        Id              lang.Int    <span class="string">`db:"ID" json:"id"`</span></span><br><span class="line">        HospitalId      lang.Int    <span class="string">`db:"HOSPITAL_ID" json:"hospitalId"`</span></span><br><span class="line">        VersionId       lang.Int    <span class="string">`db:"VERSION_ID" json:"versionId"`</span></span><br><span class="line">        Ip              lang.String <span class="string">`db:"IP" json:"ip"`</span></span><br><span class="line">        Port            lang.Int    <span class="string">`db:"PORT" json:"port"`</span></span><br><span class="line">        Timeout         lang.Int    <span class="string">`db:"TIMEOUT" json:"timeout"`</span></span><br><span class="line">        Protocol        lang.String <span class="string">`db:"PROTOCOL" json:"protocol"`</span></span><br><span class="line">        DefaultProtocol lang.Int    <span class="string">`db:"DEFAULT_PROTOCOL" json:"defaultProtocol"`</span></span><br><span class="line">        OutingIp        lang.String <span class="string">`db:"OUTING_IP" json:"outingIp"`</span></span><br><span class="line">        TransportType   lang.Int    <span class="string">`db:"TRANSPORT_TYPE" json:"transportType"`</span></span><br><span class="line">        ApiKey          lang.String <span class="string">`db:"API_KEY" json:"apiKey"`</span></span><br><span class="line">        Enable          lang.Int    <span class="string">`db:"ENABLE" json:"enable"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Dao以及model访问数据库"><a href="#使用Dao以及model访问数据库" class="headerlink" title="使用Dao以及model访问数据库"></a>使用Dao以及model访问数据库</h3><p>main.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">"encoding/json"</span></span><br><span class="line">        <span class="string">"fmt"</span></span><br><span class="line">        <span class="string">"niox/infra/data"</span></span><br><span class="line">        <span class="string">"niox/infra/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        dao := data.NewConfigHospitalCloudDao()</span><br><span class="line">        result := dao.GetByHospId(<span class="number">1</span>)</span><br><span class="line">        fmt.Println(result)</span><br><span class="line">        bt, _ := json.Marshal(result)</span><br><span class="line">        fmt.Println(<span class="keyword">string</span>(bt))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nmgo"><a href="#nmgo" class="headerlink" title="nmgo"></a>nmgo</h2><h3 id="nmgo-示例"><a href="#nmgo-示例" class="headerlink" title="nmgo 示例"></a>nmgo 示例</h3><h4 id="示例mongo实体"><a href="#示例mongo实体" class="headerlink" title="示例mongo实体"></a>示例mongo实体</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name <span class="keyword">string</span></span><br><span class="line">        Age  <span class="keyword">int</span></span><br><span class="line">        ID   bson.ObjectId <span class="string">`bson:"_id,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例Insert"><a href="#示例Insert" class="headerlink" title="示例Insert"></a>示例Insert</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.GetMongo().Insert(<span class="string">"CollectionName"</span>, Person&#123;ID: NewObjectId(), Name: <span class="string">"foo"</span>, Age: <span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="示例Update"><a href="#示例Update" class="headerlink" title="示例Update"></a>示例Update</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.GetMongo().Update(<span class="string">"CollectionName"</span>, M&#123;<span class="string">"name"</span>: <span class="string">"foo"</span>&#125;, M&#123;<span class="string">"$inc"</span>: M&#123;<span class="string">"age"</span>: <span class="number">1</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="示例UpdateAll"><a href="#示例UpdateAll" class="headerlink" title="示例UpdateAll"></a>示例UpdateAll</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.GetMongo().UpdateAll(<span class="string">"CollectionName"</span>, M&#123;<span class="string">"name"</span>: <span class="string">"foo"</span>&#125;, M&#123;<span class="string">"$inc"</span>: M&#123;<span class="string">"age"</span>: <span class="number">1</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="示例Upsert"><a href="#示例Upsert" class="headerlink" title="示例Upsert"></a>示例Upsert</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.GetMongo().Upsert(<span class="string">"CollectionName"</span>, M&#123;<span class="string">"id"</span>: id&#125;, Person&#123;ID: id, Name: <span class="string">"foo"</span>, Age: <span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="示例Find"><a href="#示例Find" class="headerlink" title="示例Find"></a>示例Find</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res.GetMongo().Find(<span class="string">"CollectionName"</span>, M&#123;<span class="string">"name"</span>: <span class="string">"foo"</span>&#125;, <span class="function"><span class="keyword">func</span><span class="params">(query *Query)</span></span> &#123;</span><br><span class="line">        query.All(&amp;res)</span><br><span class="line">        <span class="comment">// query.Skip(10).Limit(10).All(&amp;res)  // pipe</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="NMgo-API"><a href="#NMgo-API" class="headerlink" title="NMgo API:"></a>NMgo API:</h2><h3 id="Mongo-interface"><a href="#Mongo-interface" class="headerlink" title="Mongo interface"></a>Mongo interface</h3><h4 id="Insert-collection-string-value-…interface"><a href="#Insert-collection-string-value-…interface" class="headerlink" title="Insert(collection string, value …interface{})　"></a>Insert(collection string, value …interface{})　</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">collection 传入插入的集合, value 传入需要插入的数据结构,可以为多个</span><br><span class="line">Update(collection string, selector, value interface&#123;&#125;) </span><br><span class="line">collection 传入集合名字, selector 传入过滤selector, value 传入update结构 Update仅仅更新一条数据,如果需要更新所有符合条件的数据请用UpdateAll</span><br><span class="line">UpdateAll?(collection string, selector, value interface&#123;&#125;) *ChangeInfo? </span><br><span class="line">collection 传入集合名字, selector 传入过滤selector, value 传入update结构, 返回 ChangeInfo? 结构指针</span><br><span class="line">Upsert(collection string, selector, value interface&#123;&#125;) *ChangeInfo? </span><br><span class="line">collection 传入集合名字, selector 传入过滤selector, value 传入结构数据, 返回ChangeInfo 结构指针</span><br><span class="line">Find(collection string, selector M, fn func(query Query)) </span><br><span class="line">collection 传入集合名字, selector 传入过滤selector, 传入handler function, 在返回query中,使用query提供接口自定义parse数据</span><br><span class="line">Remove(collection string, selector M) </span><br><span class="line">collection 传入集合名字, selector 传入过滤selector 删除操作</span><br><span class="line">Query interface</span><br></pre></td></tr></table></figure><h4 id="Batch-n-int-Query"><a href="#Batch-n-int-Query" class="headerlink" title="Batch(n int) Query"></a>Batch(n int) Query</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Batch Size 在mongo数据库中定义, 默认batch size (100 docs 4MB)</span><br><span class="line">Prefetch(p float64) Query </span><br><span class="line">Prefetch 如果iter中待处理的doc数量为 P * batch size, 则开始获取下一个batch的数据, 默认值为0.25. 例如 query.Batch(200).Prefetch(0.25) batch size 设置为200, prefetch 会在iter中剩余50个待处理的doc时,预先获取下一个batch</span><br><span class="line">Skip(n int) Query </span><br><span class="line">Skip 跳过前n条数据</span><br><span class="line">Limit(n int) Query </span><br><span class="line">Limit 获取n条数据</span><br><span class="line">Select(selector interface&#123;&#125;) Query </span><br><span class="line">selector 传入结构化过滤selector</span><br><span class="line">Sort(fields ...string) Query </span><br><span class="line">fields 传入field名字, 按传入fields排序, 如果需要反序,在field名字前加减号. .Sort(&quot;firstname&quot;, &quot;-lastname&quot;)</span><br><span class="line">One(result interface&#123;&#125;) bool </span><br><span class="line">result 传入结构指针, 从query中取出一个doc, 赋值到result中</span><br><span class="line">All(result interface&#123;&#125;) </span><br><span class="line">result 传入切片, 从query中取出所有doc, 赋值到result</span><br><span class="line">Count() int </span><br><span class="line">返回query中doc数量</span><br><span class="line">Distinct(key string, result interface&#123;&#125;) </span><br><span class="line">key 传入需要去重的key, result 传入切片, unmarshal当前query按照传入key去重后的结果到result切片里</span><br><span class="line">MapReduce?(job *MapReduce?, result interface&#123;&#125;) *MapReduceInfo? </span><br><span class="line">MapReduce? 在当前query上执行MapReduce</span><br></pre></td></tr></table></figure><p>目录结构:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">- $GOPATH/src/msyProject (Your project)</span><br><span class="line">|</span><br><span class="line">|-- glide.yaml</span><br><span class="line">|</span><br><span class="line">|-- glide.lock</span><br><span class="line">|</span><br><span class="line">|-- main.<span class="keyword">go</span> (Your main <span class="keyword">go</span> code can live here)</span><br><span class="line">|</span><br><span class="line">|-- nconf.ini    <span class="comment">// 包含etcd配置信息</span></span><br><span class="line">|</span><br><span class="line">|-- infra</span><br><span class="line">|    |</span><br><span class="line">|    |-- res</span><br><span class="line">|    |    |</span><br><span class="line">|    |    |-- init.<span class="keyword">go</span></span><br><span class="line">|    |    |-- nconf.<span class="keyword">go</span>                      <span class="comment">//nconf 配置初始化(mandatory) </span></span><br><span class="line">|    |    |-- mongo.<span class="keyword">go</span>  </span><br><span class="line">|    |</span><br><span class="line">|    |-- model                              <span class="comment">//包含数据实体</span></span><br><span class="line">|         |</span><br><span class="line">|         |-- </span><br><span class="line">|</span><br><span class="line">|-- vendor</span><br><span class="line">     |-- github.com</span><br><span class="line">          |</span><br><span class="line">          |-- Masterminds</span><br><span class="line">                |</span><br><span class="line">                |-- ... etc.</span><br></pre></td></tr></table></figure><p>目录结构如上所示</p><h2 id="初始化NF框架中mongo模块"><a href="#初始化NF框架中mongo模块" class="headerlink" title="初始化NF框架中mongo模块"></a>初始化NF框架中mongo模块</h2><p>infra/res/mongo.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">"niox/nf/nconf"</span></span><br><span class="line">        <span class="string">"niox/nf/nmgo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">        mongo nmgo.Mongo</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMongo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mutex.Lock()</span><br><span class="line">        <span class="keyword">defer</span> mutex.Unlock()</span><br><span class="line"></span><br><span class="line">        cfgKey := <span class="string">"/res/mongo"</span></span><br><span class="line">        cfg := ncf.GetNodeMap(cfgKey)</span><br><span class="line">        createMongo(cfg)</span><br><span class="line">        ncf.Watch(cfgKey, createMongo)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createMongo</span><span class="params">(cfg nconf.NodeMap)</span></span> &#123;</span><br><span class="line">        <span class="comment">// mongo地址,例如mongodb://username:password@hostname:port/databasename</span></span><br><span class="line">        url := cfg.GetString(<span class="string">"/res/mongo/url"</span>)</span><br><span class="line"></span><br><span class="line">        mongo = nmgo.NewMongo(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMongo</span><span class="params">()</span> <span class="title">nmgo</span>.<span class="title">Mongo</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mongo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name <span class="keyword">string</span></span><br><span class="line">        Age  <span class="keyword">int</span></span><br><span class="line">        ID   bson.ObjectId <span class="string">`bson:"_id,omitempty"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">        res.GetMongo().Insert(dummyCol, Person&#123;ID: NewObjectId(), Name: <span class="string">"foo"</span>, Age: <span class="number">10</span>&#125;)</span><br><span class="line">        res.GetMongo().Update(dummyCol, M&#123;<span class="string">"name"</span>: <span class="string">"foo"</span>&#125;, M&#123;<span class="string">"$inc"</span>: M&#123;<span class="string">"age"</span>: <span class="number">1</span>&#125;&#125;)</span><br><span class="line">        res.GetMongo().UpdateAll(dummyCol, M&#123;<span class="string">"name"</span>: <span class="string">"foo"</span>&#125;, M&#123;<span class="string">"$inc"</span>: M&#123;<span class="string">"age"</span>: <span class="number">1</span>&#125;&#125;)</span><br><span class="line">        res.GetMongo().Upsert(dummyCol, M&#123;<span class="string">"id"</span>: id&#125;, Person&#123;ID: id, Name: <span class="string">"foo"</span>, Age: <span class="number">10</span>&#125;)</span><br><span class="line">        res.GetMongo().Find(dummyCol, M&#123;<span class="string">"name"</span>: <span class="string">"foo"</span>&#125;, <span class="function"><span class="keyword">func</span><span class="params">(query *Query)</span></span> &#123;</span><br><span class="line">             query.All(&amp;res)</span><br><span class="line">        &#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="nredis"><a href="#nredis" class="headerlink" title="nredis"></a>nredis</h2><p>niox/nf/nredis包提供了一个Redis接口，提供了访问redis数据库的基本功能.</p><h3 id="nredis-Redis"><a href="#nredis-Redis" class="headerlink" title="nredis.Redis"></a>nredis.Redis</h3><p>一个Redis接口的实例对应一个redis库。</p><p>在程序中使用nredis包的NewRedis(redisServer, redisPassword string, dbIndex int) Redis函数获取一个Redis接口的实例,在资源层全局持有即可。</p><p>Redis接口如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Redis <span class="keyword">interface</span> &#123;</span><br><span class="line">GetString(key <span class="keyword">string</span>) (<span class="keyword">string</span>, <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line">SetString(key, value <span class="keyword">string</span>, ttl ...<span class="keyword">int64</span>)</span><br><span class="line"></span><br><span class="line">GetObject(key <span class="keyword">string</span>, value <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">SetObject(key <span class="keyword">string</span>, value <span class="keyword">interface</span>&#123;&#125;, ttl ...<span class="keyword">int64</span>)</span><br><span class="line"></span><br><span class="line">GetStringMap(key <span class="keyword">string</span>) <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">SetStringMap(key <span class="keyword">string</span>, fields <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">Delete(key <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">Deletes(keys ...<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">GetConn() Conn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Redis的接口的GetXXX,SetXXX,Delete方法的使用方式十分明显，这里不再展开.</p><h3 id="nredis-Conn"><a href="#nredis-Conn" class="headerlink" title="nredis.Conn"></a>nredis.Conn</h3><p>使用Redis接口的GetConn方法GetConn() Conn可以取得一个连接.注意使用Conn，需要使用defer调用Conn的Close方法</p><p>Conn接口中的方法不是并发调用安全的。</p><p>使用Conn的Do方法Do(cmd string, args …interface{}) *reply,可以直接执行​redis命令用来实现更加复杂的功能。例如:</p><p>事务</p><p>Redis的事务提供了一种“将多个命令打包， 然后一次性、按顺序地执行”的机制， 并且事务在执行的期间不会主动中断 —— 服务器在执行完事务中的所有命令之后， 才会继续处理其他客户端的其他命令。</p><p>一个事务从开始到结束经过以下三个阶段：</p><h4 id="开始事务"><a href="#开始事务" class="headerlink" title="开始事务"></a>开始事务</h4><h4 id="命令入队"><a href="#命令入队" class="headerlink" title="命令入队"></a>命令入队</h4><h4 id="执行事务"><a href="#执行事务" class="headerlink" title="执行事务"></a>执行事务</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">redis := res.GetRedis()</span><br><span class="line">conn := redis.GetConn()</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">conn.Do(<span class="string">"MULTI"</span>)</span><br><span class="line">conn.Do(<span class="string">"INCR"</span>, <span class="string">"foo"</span>)</span><br><span class="line">conn.Do(<span class="string">"INCR"</span>, <span class="string">"bar"</span>)</span><br><span class="line">result, err := conn.Do(<span class="string">"EXEC"</span>).Ints()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         ...</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="发布订阅pub-sub"><a href="#发布订阅pub-sub" class="headerlink" title="发布订阅pub/sub"></a>发布订阅pub/sub</h4><h5 id="sub"><a href="#sub" class="headerlink" title="sub:"></a>sub:</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">redis := res.GetRedis()</span><br><span class="line">conn := redis.GetConn()</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">conn.Send(<span class="string">"SUBSCRIBE"</span>, <span class="string">"/chat"</span>)</span><br><span class="line">conn.Flush()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">reply := conn.Receive()</span><br><span class="line"><span class="keyword">var</span> kind <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="keyword">string</span></span><br><span class="line">reply = reply.Scan(&amp;kind, &amp;ch)</span><br><span class="line"><span class="keyword">switch</span> kind &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"subscribe"</span>:</span><br><span class="line">fmt.Println(<span class="string">"订阅:"</span>, ch)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"message"</span>:</span><br><span class="line"><span class="keyword">var</span> msg <span class="keyword">string</span></span><br><span class="line">reply = reply.Scan(&amp;msg)</span><br><span class="line">fmt.Println(<span class="string">"收到消息:"</span>, msg, reply.Error())</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(kind)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="pub"><a href="#pub" class="headerlink" title="pub:"></a>pub:</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis := res.GetRedis()</span><br><span class="line">conn := redis.GetConn()</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">count, err := conn.Do(<span class="string">"PUBLISH"</span>, <span class="string">"/chat"</span>, <span class="string">"hello world"</span>).Int()</span><br><span class="line">fmt.Println(count, err)</span><br></pre></td></tr></table></figure><h2 id="nes"><a href="#nes" class="headerlink" title="nes"></a>nes</h2><p>NES API:</p><h3 id="ES-interface"><a href="#ES-interface" class="headerlink" title="ES interface"></a>ES interface</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Search(esindex string, estype string, esargs map[string]interface&#123;&#125;, esquery interface&#123;&#125;) SearchResult? </span><br><span class="line">esindex 传入index名字, estype 传入type, esargs 传入参数, esquery 传入esquery</span><br><span class="line">Index(esindex string, estype string, esidcolumn string, esargs map[string]interface&#123;&#125;, esdata interface&#123;&#125;) BaseResponse? </span><br><span class="line">esindex 传入index名字, estype 传入type, esidcolumn 使用数据中某一列当做ID, 传入列名, esargs 传入参数, esdata 传入结构化数据</span><br><span class="line">IndexWithID(esindex string, estype string, esid string, esargs map[string]interface&#123;&#125;, esdata interface&#123;&#125;) BaseResponse? </span><br><span class="line">esindex 传入index名字, estype 传入type, esid 传入id, esargs 传入参数, esdata 传入结构化数据</span><br><span class="line">Update(esindex string, estype string, esid string, esargs map[string]interface&#123;&#125;, esdata interface&#123;&#125;) BaseResponse? </span><br><span class="line">esindex 传入index名字, estype 传入type, esid 传入id, esargs 传入参数, esdata 传入结构化数据</span><br><span class="line">Delete(esindex string, estype string, esid string, esargs map[string]interface&#123;&#125;) BaseResponse? </span><br><span class="line">esindex 传入index名字, estype 传入type, esid 传入id, esargs 传入参数</span><br><span class="line">BulkIndex?(esindex string, estype string, esidcolumn string, parent string, ttl string, esdata interface&#123;&#125;) bool </span><br><span class="line">esindex 传入index名字, estype 传入type, esidcolumn 使用数据中某一列当做ID, 传入列名, esargs 传入参数, esdata 传入结构化数据切片</span><br></pre></td></tr></table></figure><p>使用示例</p><p>目录结构:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">- $GOPATH/src/msyProject (Your project)</span><br><span class="line">|</span><br><span class="line">|-- glide.yaml</span><br><span class="line">|</span><br><span class="line">|-- glide.lock</span><br><span class="line">|</span><br><span class="line">|-- main.<span class="keyword">go</span> (Your main <span class="keyword">go</span> code can live here)</span><br><span class="line">|</span><br><span class="line">|-- nconf.ini    <span class="comment">// 包含etcd配置信息</span></span><br><span class="line">|</span><br><span class="line">|-- infra</span><br><span class="line">|    |</span><br><span class="line">|    |-- res</span><br><span class="line">|    |    |</span><br><span class="line">|    |    |-- init.<span class="keyword">go</span></span><br><span class="line">|    |    |-- nconf.<span class="keyword">go</span>                      <span class="comment">//nconf 配置初始化(mandatory) </span></span><br><span class="line">|    |    |-- es.<span class="keyword">go</span>  </span><br><span class="line">|    |</span><br><span class="line">|    |-- model                              <span class="comment">//包含数据实体</span></span><br><span class="line">|         |</span><br><span class="line">|         |-- </span><br><span class="line">|</span><br><span class="line">|-- vendor</span><br><span class="line">     |-- github.com</span><br><span class="line">          |</span><br><span class="line">          |-- Masterminds</span><br><span class="line">                |</span><br><span class="line">                |-- ... etc.</span><br></pre></td></tr></table></figure><p>初始化NF框架中ES模块</p><p>infra/res/es.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">"niox/nf/nconf"</span></span><br><span class="line">        <span class="string">"niox/nf/nes"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">        es nes.ES</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initES</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mutex.Lock()</span><br><span class="line">        <span class="keyword">defer</span> mutex.Unlock()</span><br><span class="line"></span><br><span class="line">        cfgKey := <span class="string">"/res/es"</span></span><br><span class="line">        cfg := ncf.GetNodeMap(cfgKey)</span><br><span class="line">        createES(cfg)</span><br><span class="line">        ncf.Watch(cfgKey, createES)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createES</span><span class="params">(cfg nconf.NodeMap)</span></span> &#123;</span><br><span class="line">        es = nes.NewES(cfg.GetString(<span class="string">"/res/es/address"</span>), cfg.GetString(<span class="string">"/res/es/username"</span>), cfg.GetString(<span class="string">"/res/es/password"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetES</span><span class="params">()</span> <span class="title">nes</span>.<span class="title">ES</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> es</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    query :=<span class="string">`&#123;</span></span><br><span class="line"><span class="string">    "query" : &#123;</span></span><br><span class="line"><span class="string">        "term" : &#123; "id" : 9 &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line">    <span class="comment">// hospconfig 为带有json标签的结构体定义</span></span><br><span class="line">    result := hospConfig&#123;&#125;</span><br><span class="line">    resp := res,.Search(<span class="string">"gd"</span>, <span class="string">"hosp"</span>, <span class="literal">nil</span>, query)</span><br><span class="line">    </span><br><span class="line">    json.Unmarshal(*resp.Hits[<span class="number">0</span>].Source, &amp;result)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加新doc到index gd, type haha, 并且用Name 列当做ID</span></span><br><span class="line">    m := MyUser&#123;Name:<span class="string">"alex"</span>, Age: <span class="number">10</span>&#125;</span><br><span class="line">    resp := es.Index(<span class="string">"gd"</span>, <span class="string">"haha"</span>, <span class="string">"Name"</span>, <span class="literal">nil</span>, m)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以切片的方式添加新docs</span></span><br><span class="line">    data := []MyUser&#123;MyUser&#123;Name:<span class="string">"alex1"</span>, Age: <span class="number">1</span>&#125;, MyUser&#123;Name:<span class="string">"alex2"</span>, Age:<span class="number">2</span>&#125;&#125;    </span><br><span class="line">    </span><br><span class="line">    ok := es.BulkIndex(<span class="string">"gd"</span>, <span class="string">"haha"</span>, <span class="string">"Name"</span>, <span class="string">""</span>, <span class="string">""</span>, data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除index下的type</span></span><br><span class="line">    es.Delete(<span class="string">"gd"</span>, <span class="string">"haha"</span>, <span class="string">""</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h2 id="Niox-Api2-Go"><a href="#Niox-Api2-Go" class="headerlink" title="Niox Api2 Go"></a>Niox Api2 Go</h2><p>niox/service/api2包是Niox PC2 Api2 Client在Golang下的实现.</p><h3 id="idl"><a href="#idl" class="headerlink" title="idl"></a>idl</h3><p>niox/service/api2/idl下放置api2的idl文件,在windows执行该目录下的gen.bat基于idl生成生成go代码. 生成代码的目录结构如下,其结构和api2 idl定义的结构一致。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">niox/service/api2/tf</span><br><span class="line"> -- basedata</span><br><span class="line">    -- xx.<span class="keyword">go</span></span><br><span class="line"> -- enums</span><br><span class="line">    -- xx.<span class="keyword">go</span></span><br><span class="line"> -- request</span><br><span class="line">    -- xx.<span class="keyword">go</span></span><br><span class="line"> -- response</span><br><span class="line">    -- xx.<span class="keyword">go</span></span><br><span class="line"> -- service</span><br><span class="line">    -- xx.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><h3 id="api2-interface-and-proxy"><a href="#api2-interface-and-proxy" class="headerlink" title="api2 interface and proxy"></a>api2 interface and proxy</h3><p>生成的go代码中，在niox/service/api2/service包下包含api2各个service接口。如：SelfCheckService?, MasterDataService等等.</p><p>为便于使用，重新在niox/service/api2中定义这些接口，并以proxy的方式实现，结合PC1中存放的各个医院的PC2配置信息，实现按不同医院id获取具体的api2 service。</p><p>api2包提供了baseService接口和baseServiceProxy结构，基于这两个类型可以方便的完成api2各个service接口的定义和proxy实现。</p><p>以SelfCheckService为例：</p><p>在api2包下创建selfcheckservice_proxy.go文件.<br>在其中编译selfCheckService接口，内部组合(嵌套)baseService接口，同时重定义HeartBeat方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> selfCheckService <span class="keyword">interface</span> &#123;</span><br><span class="line">baseService</span><br><span class="line">HeartBeat(heartBeatRequest *request.HeartBeatRequest) *basedata.Result_</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写selfCheckServiceProxy结构，内部组合baseServiceProxy结构和基于idl生成的service.SelfCheckService结构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> selfCheckServiceProxy <span class="keyword">struct</span> &#123;</span><br><span class="line">baseServiceProxy</span><br><span class="line">service.SelfCheckService</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为selfCheckServiceProxy添加HeartBeat方法使其实现selfCheckService 接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *selfCheckServiceProxy)</span> <span class="title">HeartBeat</span><span class="params">(heartBeatRequest *request.HeartBeatRequest)</span> *<span class="title">basedata</span>.<span class="title">Result_</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> srv.ifAutoClose()</span><br><span class="line"><span class="comment">//设置认证信息</span></span><br><span class="line">heartBeatRequest.Security = srv.createSecurity()</span><br><span class="line"><span class="comment">//记录请求日志</span></span><br><span class="line">srv.logRequest(heartBeatRequest.Security, heartBeatRequest)</span><br><span class="line"><span class="comment">//调用api2</span></span><br><span class="line">resp, err := srv.SelfCheckService.HeartBeat(heartBeatRequest)</span><br><span class="line"><span class="comment">//记录响应日志</span></span><br><span class="line">srv.logResponse(heartBeatRequest.Security, resp, err)</span><br><span class="line">panicErr(err)</span><br><span class="line"><span class="keyword">return</span> resp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在api2.go中编写根据医院id创建selfCheckService 接口实例的两个New函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSelfCheckService</span><span class="params">(hospId <span class="keyword">int</span>)</span> <span class="title">selfCheckService</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> NewSelfCheckServiceAutoClose(hospId, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSelfCheckServiceAutoClose</span><span class="params">(hospId <span class="keyword">int</span>, autoClose <span class="keyword">bool</span>)</span> <span class="title">selfCheckService</span></span> &#123;</span><br><span class="line">baseProxy := createBaseServiceProxy(<span class="string">"SelfCheckService"</span>, hospId, autoClose)</span><br><span class="line">srv := service.NewSelfCheckServiceClientProtocol(baseProxy.transport, baseProxy.protocol, baseProxy.protocol)</span><br><span class="line"><span class="keyword">return</span> &amp;selfCheckServiceProxy&#123;baseServiceProxy: baseProxy, SelfCheckService: srv&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式，在业务组件中使用api2.NewSelfCheckService(hospId)获取selfCheckService实例，调用对应的方法即可。</p><p>另外api2包还暴露了api2.GetHospConfig(hospId int)用来返回指定医院PC2的配置信息.</p><h2 id="Seelog"><a href="#Seelog" class="headerlink" title="Seelog"></a>Seelog</h2><p>Seelog是适用于golang的logging框架,提供灵活易学的日志分发,过滤,组织格式化等功能. Seelog用golang实现</p><p>特性</p><p>XML可配置<br>修改配置文件后,可支持不用重启APP立即生效配置<br>支持多项目, 多方法使用不同配置文件<br>灵活可配置的message格式<br>支持同时输出到多个stream<br>支持console, file, buffered, rolling, smtp 等等writer<br>…<br>使用示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> log <span class="string">"github.com/cihub/seelog"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> log.Flush()</span><br><span class="line">    log.Info(<span class="string">"Hello from Seelog!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML配置文件示例</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;seelog&gt;</span><br><span class="line">    &lt;outputs formatid=<span class="string">"common"</span>&gt;</span><br><span class="line">        &lt;filter levels=<span class="string">"critical"</span>&gt;</span><br><span class="line">            &lt;rollingfile <span class="keyword">type</span>=<span class="string">"date"</span> filename=<span class="string">"logs/goapp-critical.log"</span> datepattern=<span class="string">"02.01.2006"</span>/&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">&lt;filter levels=<span class="string">"info"</span>&gt;</span><br><span class="line">            &lt;rollingfile <span class="keyword">type</span>=<span class="string">"date"</span> filename=<span class="string">"logs/goapp-info.log"</span> datepattern=<span class="string">"02.01.2006"</span>/&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/outputs&gt;</span><br><span class="line">    &lt;formats&gt;</span><br><span class="line">        &lt;format id=<span class="string">"common"</span> format=<span class="string">"%Date/%Time [%LEV] %FullPath %Func %Line %Msg%n"</span> /&gt;</span><br><span class="line">    &lt;/formats&gt;</span><br><span class="line">&lt;/seelog&gt;</span><br></pre></td></tr></table></figure><p><format id="common" format="%Date/%Time [%LEV] %FullPath? %Func %Line %Msg%n"><br>%Msg 为消息主体</format></p><p><rollingfile type="date" filename="logs/goapp-critical.log" datepattern="02.01.2006"><br>根据日期rolling分文件日志</rollingfile></p><p><filter levels="info"><br>根据级别过滤日志内容</filter></p><h2 id="应用构建"><a href="#应用构建" class="headerlink" title="应用构建"></a>应用构建</h2><p>直接编译成指定平台上的可执行文件.</p><h3 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h3><p>命令行进入golang代码的main包所在目录, 修改环境变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GOARCH = <span class="string">"amd64"</span></span><br><span class="line">GOOS = <span class="string">"linux"</span></span><br></pre></td></tr></table></figure><p>执行go install 命令即可生成可执行文件.</p><h3 id="使用glide-plugin机制构建"><a href="#使用glide-plugin机制构建" class="headerlink" title="使用glide plugin机制构建"></a>使用glide plugin机制构建</h3><p>windows下编写批处理文件glide-bt.bat示例如下.直接执行此文件或使用glide bt命令进行构建。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">cd /d %~dp0/</span><br><span class="line"></span><br><span class="line">cd /d ../..</span><br><span class="line">echo SET GOPATH=%cd%</span><br><span class="line">SET GOPATH=%cd%</span><br><span class="line"></span><br><span class="line">cd /d %~dp0/</span><br><span class="line"></span><br><span class="line">echo SET GOOS=linux</span><br><span class="line">SET GOOS=linux</span><br><span class="line"></span><br><span class="line">echo SET GOARCH=amd64</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line"></span><br><span class="line">cd /d %~dp0/app/api1</span><br><span class="line">echo build api1</span><br><span class="line">call <span class="keyword">go</span> install</span><br></pre></td></tr></table></figure><h2 id="Profiling"><a href="#Profiling" class="headerlink" title="Profiling"></a>Profiling</h2><h3 id="Web应用的profiling"><a href="#Web应用的profiling" class="headerlink" title="Web应用的profiling"></a>Web应用的profiling</h3><p>引用net/http/profile包即可添加路由到/debug/pprof/… 路径下<br>访问示例<br>​<a href="http://localhost:XXXX/debug/pprof/" target="_blank" rel="noopener">http://localhost:XXXX/debug/pprof/</a></p><p>代码示例:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用原生golang http包添加以下引用即可</span></span><br><span class="line">_ <span class="string">"net/http/pprof"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用martini框架,需要手动注册以下路由</span></span><br><span class="line">m.Group(<span class="string">"/debug/pprof"</span>, <span class="function"><span class="keyword">func</span><span class="params">(r martini.Router)</span></span> &#123;</span><br><span class="line">    r.Any(<span class="string">"/"</span>, pprof.Index)</span><br><span class="line">    r.Any(<span class="string">"/cmdline"</span>, pprof.Cmdline)</span><br><span class="line">    r.Any(<span class="string">"/profile"</span>, pprof.Profile)</span><br><span class="line">    r.Any(<span class="string">"/symbol"</span>, pprof.Symbol)</span><br><span class="line">    r.Any(<span class="string">"/block"</span>, pprof.Handler(<span class="string">"block"</span>).ServeHTTP)</span><br><span class="line">    r.Any(<span class="string">"/heap"</span>, pprof.Handler(<span class="string">"heap"</span>).ServeHTTP)</span><br><span class="line">    r.Any(<span class="string">"/goroutine"</span>, pprof.Handler(<span class="string">"goroutine"</span>).ServeHTTP)</span><br><span class="line">    r.Any(<span class="string">"/threadcreate"</span>, pprof.Handler(<span class="string">"threadcreate"</span>).ServeHTTP)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="非Web应用的profiling"><a href="#非Web应用的profiling" class="headerlink" title="非Web应用的profiling"></a>非Web应用的profiling</h3><p>可以引用runtime/pprof 包来监控信息,也可以引用net/http/pprof包,在goroutine中分配端口启动web服务即可</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kubectl常用命令</title>
      <link href="/2018/06/22/k8s/kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/06/22/k8s/kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="kubectl常用命令"><a href="#kubectl常用命令" class="headerlink" title="kubectl常用命令"></a>kubectl常用命令</h1><h2 id="创建pods："><a href="#创建pods：" class="headerlink" title="创建pods："></a>创建pods：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><h2 id="查看pods："><a href="#查看pods：" class="headerlink" title="查看pods："></a>查看pods：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get po -o wide -n kube-system</span><br></pre></td></tr></table></figure><h2 id="删除pods："><a href="#删除pods：" class="headerlink" title="删除pods："></a>删除pods：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pods kubernetes-dashboard-302935354-0h7p6 -n kube-system</span><br></pre></td></tr></table></figure><h2 id="查看报错日志："><a href="#查看报错日志：" class="headerlink" title="查看报错日志："></a>查看报错日志：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pods kubernetes-dashboard-2496492025-rwczb -n kube-system</span><br></pre></td></tr></table></figure><h2 id="查看明细日志："><a href="#查看明细日志：" class="headerlink" title="查看明细日志："></a>查看明细日志：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs kubernetes-dashboard-1338994370-w8bmt -n kube-system</span><br></pre></td></tr></table></figure><h2 id="动态修改服务"><a href="#动态修改服务" class="headerlink" title="动态修改服务"></a>动态修改服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system edit service kubernetes-dashboard</span><br></pre></td></tr></table></figure><h2 id="关键字补全"><a href="#关键字补全" class="headerlink" title="关键字补全"></a>关键字补全</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure><h2 id="获取yaml模板"><a href="#获取yaml模板" class="headerlink" title="获取yaml模板"></a>获取yaml模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run --image=nginx my-deploy -o yaml --dry-run &gt; my-deploy.yaml</span><br><span class="line">kubectl get statefulset/foo -o yaml --export &gt; new.yaml</span><br><span class="line">kubectl get node/xx -o yaml --export &gt; node.yaml</span><br></pre></td></tr></table></figure><h2 id="创建secret，从私用仓库拉取镜像"><a href="#创建secret，从私用仓库拉取镜像" class="headerlink" title="创建secret，从私用仓库拉取镜像"></a>创建secret，从私用仓库拉取镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret docker-registry myregistrykey --docker-server=https://index.docker.io/v1/ --docker-username=xxxx --docker-password=xxxx --docker-email=xxxx@qq.com</span><br></pre></td></tr></table></figure><h2 id="开放NodePort"><a href="#开放NodePort" class="headerlink" title="开放NodePort"></a>开放NodePort</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment kube-node --type=NodePort</span><br></pre></td></tr></table></figure><h2 id="helm命令"><a href="#helm命令" class="headerlink" title="helm命令"></a>helm命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm install --name elho-hook-1 ./elho-hook</span><br><span class="line">helm del elho-hook-1 —purge</span><br></pre></td></tr></table></figure><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><p>Q:<br>GPG error: <a href="http://archive.ubuntukylin.com:10006" target="_blank" rel="noopener">http://archive.ubuntukylin.com:10006</a> xenial InRelease: The following signatures couldn’t be verified because the public key is not available: NO_PUBKEY 8D5A09DC9B929006<br>A: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 8D5A09DC9B929006</span><br></pre></td></tr></table></figure></p><p>Q: kubectl get pod -n kube_get_comp_words_by_ref: command not found<br>A: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source /etc/bash_completion</span><br><span class="line">source &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Haproxy-配置</title>
      <link href="/2018/06/11/lb/Haproxy%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/"/>
      <url>/2018/06/11/lb/Haproxy%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="Haproxy配置文件说明"><a href="#Haproxy配置文件说明" class="headerlink" title="Haproxy配置文件说明"></a>Haproxy配置文件说明</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -st `cat /var/run/haproxy.pid`</span><br><span class="line">```</span><br></pre></td></tr></table></figure><pre><code>####################全局配置信息########################    #######参数是进程级的，通常和操作系统（OS）相关#########    global    maxconn 20480                   #默认最大连接数    log 127.0.0.1 local3            #[err warning info debug]    chroot /var/haproxy             #chroot运行的路径    uid 99                          #所属运行的用户uid    gid 99                          #所属运行的用户组    daemon                          #以后台形式运行haproxy    nbproc 1                        #进程数量(可以设置多个进程提高性能)    pidfile /var/run/haproxy.pid    #haproxy的pid存放路径,启动进程的用户必须有权限访问此文件    ulimit-n 65535                  #ulimit的数量限制   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">#####################默认的全局设置###################### </span><br><span class="line"></span><br><span class="line">       ##这些参数可以被利用配置到frontend，backend，listen组件## </span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       defaults </span><br><span class="line"></span><br><span class="line">       log global </span><br><span class="line"></span><br><span class="line">       mode http                       #所处理的类别 (#7层 http;4层tcp  ) </span><br><span class="line"></span><br><span class="line">       maxconn 20480                   #最大连接数 </span><br><span class="line"></span><br><span class="line">       option httplog                  #日志类别http日志格式        </span><br><span class="line">       </span><br><span class="line">       option httpclose                #每次请求完毕后主动关闭http通道 </span><br><span class="line"></span><br><span class="line">       option dontlognull              #不记录健康检查的日志信息 </span><br><span class="line"></span><br><span class="line">       option forwardfor               #如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip  </span><br><span class="line"></span><br><span class="line">       option redispatch               #serverId对应的服务器挂掉后,强制定向到其他健康的服务器  </span><br><span class="line"></span><br><span class="line">       option abortonclose             #当服务器负载很高的时候，自动结束掉当前队列处理比较久的连接 </span><br><span class="line"></span><br><span class="line">       stats refresh 30                #统计页面刷新间隔 </span><br><span class="line"></span><br><span class="line">       retries 3                       #3次连接失败就认为服务不可用，也可以通过后面设置 </span><br><span class="line"></span><br><span class="line">       balance roundrobin              #默认的负载均衡的方式,轮询方式 </span><br><span class="line"></span><br><span class="line">       #balance source                  #默认的负载均衡的方式,类似nginx的ip_hash </span><br><span class="line"></span><br><span class="line">       #balance leastconn               #默认的负载均衡的方式,最小连接 </span><br><span class="line"></span><br><span class="line">       contimeout 5000                 #连接超时 </span><br><span class="line"></span><br><span class="line">       clitimeout 50000                #客户端超时 </span><br><span class="line"></span><br><span class="line">       srvtimeout 50000                #服务器超时 </span><br><span class="line"></span><br><span class="line">       timeout check 2000              #心跳检测超时</span><br></pre></td></tr></table></figure></code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">####################监控页面的设置####################### </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">listen admin_status                    #Frontend和Backend的组合体,监控组的名称，按需自定义名称 </span><br><span class="line"></span><br><span class="line">        bind 0.0.0.0:65532             #监听端口 </span><br><span class="line"></span><br><span class="line">        mode http                      #http的7层模式 </span><br><span class="line"></span><br><span class="line">        log 127.0.0.1 local3 err       #错误日志记录 </span><br><span class="line"></span><br><span class="line">        stats refresh 5s               #每隔5秒自动刷新监控页面 </span><br><span class="line"></span><br><span class="line">        stats uri /admin?stats         #监控页面的url </span><br><span class="line"></span><br><span class="line">        stats realm xuequn\ xuequn   #监控页面的提示信息 </span><br><span class="line"></span><br><span class="line">        stats auth admin:admin         #监控页面的用户和密码admin,可以设置多个用户名 </span><br><span class="line"></span><br><span class="line">        stats auth admin1:admin1       #监控页面的用户和密码admin1 </span><br><span class="line"></span><br><span class="line">        stats hide-version             #隐藏统计页面上的HAproxy版本信息  </span><br><span class="line"></span><br><span class="line">        stats admin if TRUE            #手工启用/禁用,后端服务器(haproxy-1.4.9以后版本) </span><br><span class="line"></span><br><span class="line">       errorfile 403 /etc/haproxy/errorfiles/403.http </span><br><span class="line"></span><br><span class="line">       errorfile 500 /etc/haproxy/errorfiles/500.http </span><br><span class="line"></span><br><span class="line">       errorfile 502 /etc/haproxy/errorfiles/502.http </span><br><span class="line"></span><br><span class="line">       errorfile 503 /etc/haproxy/errorfiles/503.http </span><br><span class="line"></span><br><span class="line">       errorfile 504 /etc/haproxy/errorfiles/504.http</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#################HAProxy的日志记录内容设置################### </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">capture request  header Host           len 40 </span><br><span class="line"></span><br><span class="line">       capture request  header Content-Length len 10 </span><br><span class="line"></span><br><span class="line">       capture request  header Referer        len 200 </span><br><span class="line"></span><br><span class="line">       capture response header Server         len 40 </span><br><span class="line"></span><br><span class="line">       capture response header Content-Length len 10 </span><br><span class="line"></span><br><span class="line">       capture response header Cache-Control  len 8</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> #######################网站监测listen配置##################### </span><br><span class="line"></span><br><span class="line">       ###########此用法主要是监控haproxy后端服务器的监控状态############</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">listen site_status </span><br><span class="line"></span><br><span class="line">       bind 0.0.0.0:1081                    #监听端口 </span><br><span class="line"></span><br><span class="line">       mode http                            #http的7层模式 </span><br><span class="line"></span><br><span class="line">       log 127.0.0.1 local3 err             #[err warning info debug] </span><br><span class="line"></span><br><span class="line">       monitor-uri /site_status             #网站健康检测URL，用来检测HAProxy管理的网站是否可以用，正常返回200，不正常返回503 </span><br><span class="line"></span><br><span class="line">       acl site_dead nbsrv(server_web) lt 2 #定义网站down时的策略当挂在负载均衡上的指定backend的中有效机器数小于1台时返回true </span><br><span class="line"></span><br><span class="line">       acl site_dead nbsrv(server_blog) lt 2 </span><br><span class="line"></span><br><span class="line">       acl site_dead nbsrv(server_bbs)  lt 2  </span><br><span class="line"></span><br><span class="line">       monitor fail if site_dead            #当满足策略的时候返回503，网上文档说的是500，实际测试为503 </span><br><span class="line"></span><br><span class="line">       monitor-net 192.168.16.2/32          #来自192.168.16.2的日志信息不会被记录和转发 </span><br><span class="line"></span><br><span class="line">       monitor-net 192.168.16.3/32</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">########frontend配置############ </span><br><span class="line"></span><br><span class="line">       #####注意，frontend配置里面可以定义多个acl进行匹配操作########</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       frontend http_80_in </span><br><span class="line"></span><br><span class="line">       bind 0.0.0.0:80      #监听端口，即haproxy提供web服务的端口，和lvs的vip端口类似 </span><br><span class="line"></span><br><span class="line">       mode http            #http的7层模式 </span><br><span class="line"></span><br><span class="line">       log global           #应用全局的日志配置 </span><br><span class="line"></span><br><span class="line">       option httplog       #启用http的log </span><br><span class="line"></span><br><span class="line">       option httpclose     #每次请求完毕后主动关闭http通道，HA-Proxy不支持keep-alive模式 </span><br><span class="line"></span><br><span class="line">       option forwardfor    #如果后端服务器需要获得客户端的真实IP需要配置次参数，将可以从Http Header中获得客户端IP</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">########acl策略配置#############</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">acl xuequn_web hdr_reg(host) -i ^(www.xuequn.cn|ww1.xuequn.cn)$    #如果请求的域名满足正则表达式中的2个域名返回true -i是忽略大小写 </span><br><span class="line"></span><br><span class="line">       acl xuequn_blog hdr_dom(host) -i blog.xuequn.cn #如果请求的域名满足www.xuequn.cn返回true -i是忽略大小写 </span><br><span class="line"></span><br><span class="line">       #acl xuequn    hdr(host) -i xuequn.cn    #如果请求的域名满足xuequn.cn返回true -i是忽略大小写 </span><br><span class="line"></span><br><span class="line">       #acl file_req url_sub -i  killall   #在请求url中包含killall=，则此控制策略返回true,否则为false </span><br><span class="line"></span><br><span class="line">       #acl dir_req url_dir -i allow      #在请求url中存在allow作为部分地址路径，则此控制策略返回true,否则返回false </span><br><span class="line"></span><br><span class="line">       #acl missing_cl hdr_cnt(Content-length) eq 0    #当请求的header中Content-length等于0时返回true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">########acl策略匹配相应############# </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#block if missing_cl     #当请求中header中Content-length等于0阻止请求返回403 </span><br><span class="line"></span><br><span class="line">       #block if !file_req || dir_req       #block表示阻止请求，返回403错误，当前表示如果不满足策略file_req，或者满足策略dir_req，则阻止请求 </span><br><span class="line"></span><br><span class="line">       use_backend  server_web  if xuequn_web    #当满足xuequn_web的策略时使用server_web的backend </span><br><span class="line"></span><br><span class="line">       use_backend  server_blog if xuequn_blog     #当满足xuequn_blog的策略时使用server_blog的backend </span><br><span class="line"></span><br><span class="line">       #redirect prefix http://192.168.16.3 code 301 if xuequn     #当访问xuequn.cn的时候，用http的301挑转到http://192.168.16.3 </span><br><span class="line"></span><br><span class="line">       default_backend server_bbs     #以上都不满足的时候使用默认server_bbs的backend</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">##########backend的设置############## </span><br><span class="line"></span><br><span class="line">#下面我将设置三组服务器 server_web，server_blog，server_bbs</span><br><span class="line"></span><br><span class="line">###########################backend server_web############################# </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backend server_web </span><br><span class="line"></span><br><span class="line">       mode http            #http的7层模式 </span><br><span class="line"></span><br><span class="line">       balance roundrobin   #负载均衡的方式，roundrobin平均方式 </span><br><span class="line"></span><br><span class="line">       cookie SERVERID      #允许插入serverid到cookie中，serverid后面可以定义 </span><br><span class="line"></span><br><span class="line">       option httpchk GET /index.html #心跳检测的文件 </span><br><span class="line"></span><br><span class="line">       server web1 192.168.16.2:80 cookie web1 check inter 1500 rise 3 fall 3 weight 1  </span><br><span class="line"></span><br><span class="line">       #服务器定义，cookie 1表示serverid为web1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用， </span><br><span class="line"></span><br><span class="line">       #fall 3是3次失败认为服务器不可用，weight代表权重 </span><br><span class="line"></span><br><span class="line">       server web2 192.168.16.3:80 cookie web2 check inter 1500 rise 3 fall 3 weight 2 </span><br><span class="line"></span><br><span class="line">       #服务器定义，cookie 1表示serverid为web2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用， </span><br><span class="line"></span><br><span class="line">       #fall 3是3次失败认为服务器不可用，weight代表权重</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">###################################backend server_blog############################################### </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backend server_blog </span><br><span class="line"></span><br><span class="line">       mode http            #http的7层模式 </span><br><span class="line"></span><br><span class="line">       balance roundrobin   #负载均衡的方式，roundrobin平均方式 </span><br><span class="line"></span><br><span class="line">       cookie SERVERID      #允许插入serverid到cookie中，serverid后面可以定义 </span><br><span class="line"></span><br><span class="line">       option httpchk GET /index.html #心跳检测的文件 </span><br><span class="line"></span><br><span class="line">       server blog1 192.168.16.2:80 cookie blog1 check inter 1500 rise 3 fall 3 weight 1  </span><br><span class="line"></span><br><span class="line">       #服务器定义，cookie 1表示serverid为web1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重 </span><br><span class="line"></span><br><span class="line">       server blog2 192.168.16.3:80 cookie blog2 check inter 1500 rise 3 fall 3 weight 2 </span><br><span class="line"></span><br><span class="line">        #服务器定义，cookie 1表示serverid为web2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">###################################backend server_bbs############################################### </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backend server_bbs </span><br><span class="line"></span><br><span class="line">       mode http            #http的7层模式 </span><br><span class="line"></span><br><span class="line">       balance roundrobin   #负载均衡的方式，roundrobin平均方式 </span><br><span class="line"></span><br><span class="line">       cookie SERVERID      #允许插入serverid到cookie中，serverid后面可以定义 </span><br><span class="line"></span><br><span class="line">       option httpchk GET /index.html #心跳检测的文件 </span><br><span class="line"></span><br><span class="line">       server bbs1 192.168.16.2:80 cookie bbs1 check inter 1500 rise 3 fall 3 weight 1  </span><br><span class="line"></span><br><span class="line">       #服务器定义，cookie 1表示serverid为web1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重 </span><br><span class="line"></span><br><span class="line">       server bbs2 192.168.16.3:80 cookie bbs2 check inter 1500 rise 3 fall 3 weight 2 </span><br><span class="line"></span><br><span class="line">        #服务器定义，cookie 1表示serverid为web2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> lb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-文件权限</title>
      <link href="/2018/05/04/linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
      <url>/2018/05/04/linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">444 r--r--r--</span><br><span class="line">600 rw-------</span><br><span class="line">644 rw-r--r--</span><br><span class="line">666 rw-rw-rw-</span><br><span class="line">700 rwx------</span><br><span class="line">744 rwxr--r--</span><br><span class="line">755 rwxr-xr-x</span><br><span class="line">777 rwxrwxrwx</span><br><span class="line"></span><br><span class="line">* 1-3位数字代表文件所有者的权限，</span><br><span class="line">* 4-6位数字代表同组用户的权限，</span><br><span class="line">* 7-9数字代表其他用户的权限。</span><br><span class="line">* 读取的权限等于4，用r表示；</span><br><span class="line">* 写入的权限等于2，用w表示；</span><br><span class="line">* 执行的权限等于1，用x表示；</span><br><span class="line">* 0（没有权限）；</span><br><span class="line">* 4（读取权限）；</span><br><span class="line">* 5（4+1 | 读取+执行）；</span><br><span class="line">* 6（4+2 | 读取+写入）；</span><br><span class="line">* 7（4+2+1 | 读取+写入+执行）</span><br><span class="line">* 以755为例：</span><br><span class="line">* 1-3位7等于4+2+1，rwx，所有者具有读取、写入、执行权限；</span><br><span class="line">* 4-6位5等于4+1+0，r-x，同组用户具有读取、执行权限但没有写入权限；</span><br><span class="line">* 7-9位5，同上，也是r-x，其他用户具有读取、执行权限但没有写入权限。</span><br></pre></td></tr></table></figure><h2 id="将用户添加到组的指令"><a href="#将用户添加到组的指令" class="headerlink" title="将用户添加到组的指令"></a>将用户添加到组的指令</h2><h3 id="增加一个新用户到附加用户组"><a href="#增加一个新用户到附加用户组" class="headerlink" title="增加一个新用户到附加用户组"></a>增加一个新用户到附加用户组</h3><p><code>useradd -G admins,ftp,www,developers cnzhx</code></p><h3 id="增加一个新用户到主要用户组"><a href="#增加一个新用户到主要用户组" class="headerlink" title="增加一个新用户到主要用户组"></a>增加一个新用户到主要用户组</h3><p><code>useradd -g developers cnzhx</code></p><h3 id="将一个已有用户增加到一个已有用户组中"><a href="#将一个已有用户增加到一个已有用户组中" class="headerlink" title="将一个已有用户增加到一个已有用户组中"></a>将一个已有用户增加到一个已有用户组中</h3><p><code>usermod -a -G apache cnzhx</code></p><h3 id="如果要同时将-cnzhx-的主要用户组改为-apache，则直接使用-g-选项："><a href="#如果要同时将-cnzhx-的主要用户组改为-apache，则直接使用-g-选项：" class="headerlink" title="如果要同时将 cnzhx 的主要用户组改为 apache，则直接使用 -g 选项："></a>如果要同时将 cnzhx 的主要用户组改为 apache，则直接使用 -g 选项：</h3><p> <code>usermod -g apache cnzhx</code></p><h3 id="如果要将一个用户从某个组中删除"><a href="#如果要将一个用户从某个组中删除" class="headerlink" title="如果要将一个用户从某个组中删除"></a>如果要将一个用户从某个组中删除</h3><p><code>gpasswd -d user group</code><br><a href="https://www.cnblogs.com/jxhd1/p/6528574.html" target="_blank" rel="noopener">参照文献</a></p><h2 id="文件已被删除，但是引用该文件的进程仍然活动"><a href="#文件已被删除，但是引用该文件的进程仍然活动" class="headerlink" title="文件已被删除，但是引用该文件的进程仍然活动"></a>文件已被删除，但是引用该文件的进程仍然活动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof | grep deleted</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h --max-depth=1 /</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R </span><br><span class="line">mkdir -p</span><br></pre></td></tr></table></figure><h2 id="This-account-is-currently-not-available"><a href="#This-account-is-currently-not-available" class="headerlink" title="This account is currently not available"></a>This account is currently not available</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd | grep apache</span><br><span class="line">发现它的shell是“/sbin /nologin”，需要将起改成“/bin/bash”</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-系统信息</title>
      <link href="/2018/02/28/linux/Linux%E6%9F%A5%E7%9C%8BCPU%EF%BC%8C%E5%86%85%E5%AD%98%EF%BC%8C%E7%A1%AC%E7%9B%98/"/>
      <url>/2018/02/28/linux/Linux%E6%9F%A5%E7%9C%8BCPU%EF%BC%8C%E5%86%85%E5%AD%98%EF%BC%8C%E7%A1%AC%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux查看CPU，内存，硬盘"><a href="#Linux查看CPU，内存，硬盘" class="headerlink" title="Linux查看CPU，内存，硬盘"></a>Linux查看CPU，内存，硬盘</h1><h2 id="查看CPU"><a href="#查看CPU" class="headerlink" title="查看CPU"></a>查看CPU</h2><h3 id="查看CPU核数"><a href="#查看CPU核数" class="headerlink" title="查看CPU核数"></a>查看CPU核数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/cpuinfo | grep &quot;cpu cores&quot; | uniq</span><br><span class="line">cpu cores : 4</span><br></pre></td></tr></table></figure><h3 id="查看CPU个数"><a href="#查看CPU个数" class="headerlink" title="查看CPU个数"></a>查看CPU个数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/cpuinfo | grep &quot;physical id&quot; | uniq | wc -l</span><br><span class="line">2 **uniq命令：删除重复行;wc –l命令：统计行数**</span><br></pre></td></tr></table></figure><h3 id="查看CPU型号"><a href="#查看CPU型号" class="headerlink" title="查看CPU型号"></a>查看CPU型号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/cpuinfo | grep &apos;model name&apos; |uniq</span><br><span class="line">model name : Intel(R) Xeon(R) CPU E5630 @ 2.53GHz</span><br></pre></td></tr></table></figure><p><strong>总结：该服务器有2个4核CPU，型号Intel(R) Xeon(R) CPU E5630 @ 2.53GHz</strong></p><h2 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h2><h3 id="查看内存总数"><a href="#查看内存总数" class="headerlink" title="查看内存总数"></a>查看内存总数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#cat /proc/meminfo | grep MemTotal</span><br><span class="line">MemTotal: 32941268 kB //内存32G</span><br></pre></td></tr></table></figure><h3 id="查看内存条数"><a href="#查看内存条数" class="headerlink" title="查看内存条数"></a>查看内存条数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># dmidecode |grep -A16 &quot;Memory Device$&quot;</span><br></pre></td></tr></table></figure><p><strong>总结：该服务器有两条2G内存 ，空余4个插槽</strong></p><h2 id="查看硬盘"><a href="#查看硬盘" class="headerlink" title="查看硬盘"></a>查看硬盘</h2><h3 id="查看硬盘大小"><a href="#查看硬盘大小" class="headerlink" title="查看硬盘大小"></a>查看硬盘大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># fdisk -l | grep Disk</span><br><span class="line">Disk /dev/cciss/c0d0: 146.7 GB, 146778685440 bytes</span><br></pre></td></tr></table></figure><p><strong>总结：硬盘大小146.7G，即厂商标称的160G</strong></p><h2 id="同步系统时间"><a href="#同步系统时间" class="headerlink" title="同步系统时间"></a>同步系统时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntpdate </span><br><span class="line">ntpdate time.nuri.net</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time.nist.gov</span><br><span class="line">time.nuri.net</span><br><span class="line">0.asia.pool.ntp.org</span><br><span class="line">1.asia.pool.ntp.org</span><br><span class="line">2.asia.pool.ntp.org</span><br><span class="line">3.asia.pool.ntp.org</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock -w</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#date</span><br><span class="line">#hwclock</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">定时执行时间同步任务，所以我们利用crontab -e 来添加定时任务</span><br><span class="line"></span><br><span class="line">#* */1 * * * root ntpdate time.nuri.net;hwclock -w </span><br><span class="line"></span><br><span class="line">即：每隔一个小时同步一下internet时间。</span><br></pre></td></tr></table></figure><h3 id="TCP状态查看："><a href="#TCP状态查看：" class="headerlink" title="TCP状态查看："></a>TCP状态查看：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n | grep 60.214.137.170</span><br></pre></td></tr></table></figure><h3 id="查看公网IP："><a href="#查看公网IP：" class="headerlink" title="查看公网IP："></a>查看公网IP：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show eth0 | grep inet | awk &apos;&#123; print $2; &#125;&apos; | sed &apos;s/\/.*$//&apos;</span><br></pre></td></tr></table></figure><h3 id="查看系统："><a href="#查看系统：" class="headerlink" title="查看系统："></a>查看系统：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version</span><br></pre></td></tr></table></figure><h3 id="查看yum安装创建相关文件："><a href="#查看yum安装创建相关文件：" class="headerlink" title="查看yum安装创建相关文件："></a>查看yum安装创建相关文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep redis </span><br><span class="line">rpm -ql redis</span><br></pre></td></tr></table></figure><h3 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/vdb1</span><br><span class="line">fuser -mv /home</span><br></pre></td></tr></table></figure><h3 id="uname-a"><a href="#uname-a" class="headerlink" title="uname -a"></a>uname -a</h3><p>Linux（系统名） iZ23jnmf7iwZ（节点名称） 2.6.32-431.23.3.el6.x86_64（操作系统的发行版号） #1 SMP Thu Jul 31 17:20:51 UTC 2014（内核版本） x86_64（硬件平台） x86_64（机器硬件名） x86_64（系统处理器的体系结构） GNU/Linux（操作系统）</p><h3 id="查看外网ip"><a href="#查看外网ip" class="headerlink" title="查看外网ip"></a>查看外网ip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl members.3322.org/dyndns/getip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-证书生成</title>
      <link href="/2018/01/01/linux/%E8%AF%81%E4%B9%A6/"/>
      <url>/2018/01/01/linux/%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h1><h2 id="通过keytool生成证书"><a href="#通过keytool生成证书" class="headerlink" title="通过keytool生成证书"></a>通过keytool生成证书</h2><h3 id="生成私钥"><a href="#生成私钥" class="headerlink" title="生成私钥"></a>生成私钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkeypair -alias certificatekey -keyalg RSA -validity 1095 -keystore elho_keystore.jks</span><br></pre></td></tr></table></figure><p>keystore:xxxxxx<br>CN=elho, OU=neusoft, O=niox, L=dalian, ST=liaoning, C=cn</p><h3 id="导出公钥证书"><a href="#导出公钥证书" class="headerlink" title="导出公钥证书"></a>导出公钥证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -export -alias certificatekey -keystore elho_keystore.jks -rfc -file elho_cert.cer -storetype BKS</span><br></pre></td></tr></table></figure><h3 id="公钥导入并生成truststore"><a href="#公钥导入并生成truststore" class="headerlink" title="公钥导入并生成truststore:"></a>公钥导入并生成truststore:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -import -alias certificatekey -file elho_cert.cer -keystore elho_truststore.jks</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore elho_keystore.jks</span><br></pre></td></tr></table></figure><h3 id="安卓BKS证书"><a href="#安卓BKS证书" class="headerlink" title="安卓BKS证书"></a>安卓BKS证书</h3><ol><li><p>JKS转PKCS12</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -srckeystore elho_keystore.jks -destkeystore elho_keystore.p12 -srcstoretype jks -deststoretype pkcs12</span><br></pre></td></tr></table></figure></li><li><p>PKCS12转PEM(生成的pem中包含了私钥和证书)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -nodes -in elho_keystore.p12 -out elho_keystore.pem</span><br></pre></td></tr></table></figure></li><li><p>CER转成BKS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importcert -v -trustcacerts -file truststore.cer -alias certificatekey -keystore truststore4android.bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath ./bcprov-jdk15on-1.47.jar -storetype BKS -storepass AntE2a%GH_4G</span><br></pre></td></tr></table></figure></li></ol><h2 id="免费官方证书"><a href="#免费官方证书" class="headerlink" title="免费官方证书"></a>免费官方证书</h2><p><a href="https://letsencrypt.org" target="_blank" rel="noopener">Encrypt</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TODO-持续更新</title>
      <link href="/2017/11/20/other/TODO%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>/2017/11/20/other/TODO%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><h2 id="第三方链接"><a href="#第三方链接" class="headerlink" title="第三方链接"></a>第三方链接</h2><p><a href="https://github.com/stanzhai/be-a-professional-programmer" target="_blank" rel="noopener">工具</a><br><a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="noopener">书</a><br><a href="http://www.jdon.com/dl/best/springsource.html" target="_blank" rel="noopener">Spring各种源码项目下载</a><br><a href="http://blog.csdn.net/u014084065/article/details/53814943" target="_blank" rel="noopener">使用locust做服务器压力测试</a><br><a href="https://yq.aliyun.com/articles/92899" target="_blank" rel="noopener">spring 熔断器</a><br><a href="https://www.cnblogs.com/caolei1108/p/6169950.html" target="_blank" rel="noopener">Spring RestTemplate详解</a><br><a href="http://www.cnblogs.com/larryzeal/p/7430148.html" target="_blank" rel="noopener">spring web源码思路</a><br><a href="https://gitee.com/damivip/spring-remoting-annotation" target="_blank" rel="noopener">结合Spring注解标签发布RMI / HTTPInvoker / Hessian / Burlap服务</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-spring-principle/" target="_blank" rel="noopener">spring设计思想</a><br><a href="http://git.oschina.net/wangzhixuan/spring-shiro-training" target="_blank" rel="noopener">shiro</a><br><a href="https://www.cnblogs.com/jinxiao-pu/p/6670672.html" target="_blank" rel="noopener">豆瓣模拟登录验证码处理</a><br><a href="http://jingyan.baidu.com/article/d45ad14894b0d369552b80bd.html" target="_blank" rel="noopener">调研pdf加密</a><br><a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">Java 诊断工具</a></p><h2 id="值得一看的代码库"><a href="#值得一看的代码库" class="headerlink" title="值得一看的代码库"></a>值得一看的代码库</h2><ul><li>国人写的模板引擎，代码质量很高：subchen/jetbrick-template-2x</li><li>数据结构和算法类的，同时有测试代码：buptdavid/datastructure | kdn251/interviews</li><li>Java写的高性能数据库：jankotek/mapdb</li><li>Netty实现的高性能RPC，有写博文分析：tang-jie/NettyRPC</li><li>Java编写的原子组件库，内功非常深厚：mindwind/craft-atom</li><li>前点评网的一位大牛黄艺华写的爬虫框架：code4craft/webmagic</li><li>针对Java8的一系列代码示例，纯干货无废话：winterbe/java8-tutorial</li><li>Java设计模式的总结以及代码和文章：iluwatar/java-design-patterns</li><li>线上问题排查神器-Btrace</li><li>增量数据同步神器-canal</li><li>mysql中间件：atlas,mycat</li><li>分库分表数据库中间件：Sharding-JDBC</li><li>调用链: hydra,zipkin,CAT,Hiro,skywalking,pinpoint</li><li>代码静态检测工具：PMD</li><li>canal监控对接一下：prometheus+grafana</li><li>安全监测工具：burpsuit,AWVS,Nmap,Nessus,Openvas,Metasploit,kali<h2 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h2>util包：ArrayList,HashMap,LinkedHashMap,LinkedList,HashTable,HashSet。<br>lang包：String,Object,StringBuffer,StringBuilder,Integer</li></ul><p>《如何变得有思想》</p><p>jdk里的util包，把这些类。<br>这些类弄明白了，你可以上升一个台阶。<br>还有平时你工作中用到什么类，就看什么类就ok了。<br>可叹的是，有些人写了五六年代码，连String这个类的源码都没看过，还老是对我说未来很迷茫，不知道怎么提升好，其实我想说，这样不迷茫才怪。<br>juc 包里的aqs框架<br>Okhttp：android开发最受欢迎的http客户端，支持http2，websocket等最新协议。总体采用责任链模式，架构简单且扩展性强，看完几个主要的拦截器相当于把http协议重新学习了一遍。<br>jdk8下的ConcurrentHashMap：Doug Lea 大神的大作，实现上非常精巧，采用cas操作就实现了无锁HashMap，仅仅在Hash冲突插入的情况下锁住一个hash桶，并发度比jdk7版的高出不少。<br>spring-mvc：MVC模式的最佳实践，玩设计模式的癫狂之作，扩展性极强最优雅的网络请求库，一个Java文件：kevinsawicki/http-request</p><p><a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=23_2&amp;index=1" target="_blank" rel="noopener">网络设置指引：</a></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx-使用</title>
      <link href="/2017/09/08/lb/nginx/"/>
      <url>/2017/09/08/lb/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><p>master进程会接收来自外界发来的信号，再根据信号做不同的事情。所以我们要控制nginx，只需要通过kill向master进程发送信号就行了。比如kill -HUP pid，则是告诉nginx，从容地重启nginx</p><h2 id="第三方参照"><a href="#第三方参照" class="headerlink" title="第三方参照"></a>第三方参照</h2><p><a href="https://www.cnblogs.com/codingcloud/p/5095066.html" target="_blank" rel="noopener">nginx优雅启动关闭</a><br><a href="https://www.cnblogs.com/netsa/p/6383094.html" target="_blank" rel="noopener">nginx 正则</a><br><a href="http://www.spring4all.com/article/1291" target="_blank" rel="noopener">从一份配置清单详解Nginx服务器配置</a></p><h2 id="nginx-header中带下划线不转换"><a href="#nginx-header中带下划线不转换" class="headerlink" title="nginx header中带下划线不转换"></a>nginx header中带下划线不转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">underscores_in_headers on;</span><br></pre></td></tr></table></figure><h2 id="root与alias区别"><a href="#root与alias区别" class="headerlink" title="root与alias区别"></a>root与alias区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ~ ^/weblogs/ &#123;</span><br><span class="line">root /data/weblogs/www.ttlsa.com;</span><br><span class="line">autoindex on;</span><br><span class="line">auth_basic            &quot;Restricted&quot;;</span><br><span class="line">auth_basic_user_file  passwd/weblogs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个请求的URI是/weblogs/httplogs/<a href="http://www.ttlsa.com-access.log时" target="_blank" rel="noopener">www.ttlsa.com-access.log时</a>.<br>web服务器将会返回服务器上的/data/weblogs/<a href="http://www.ttlsa.com/weblogs/httplogs/www.ttlsa.com-access.log的文件" target="_blank" rel="noopener">www.ttlsa.com/weblogs/httplogs/www.ttlsa.com-access.log的文件</a></p><p><strong>root会根据完整的URI请求来映射，也就是/path/uri。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /binapp/ &#123;  </span><br><span class="line">limit_conn limit 4;</span><br><span class="line">limit_rate 200k;</span><br><span class="line">internal;  </span><br><span class="line">alias /data/statics/bin/apps/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alias会把location后面配置的路径丢弃掉.<br>如果一个请求的URI是/binapp/a.ttlsa.com/favicon时，web服务器将会返回服务器上的/data/statics/bin/apps/a.ttlsa.com/favicon.jg</p><ol><li>使用alias时，目录名后面一定要加”/“。</li><li>alias可以指定任何名称。</li><li>alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。</li><li>alias只能位于location块中。</li></ol><h2 id="logrotate切割nginx日志"><a href="#logrotate切割nginx日志" class="headerlink" title="logrotate切割nginx日志"></a>logrotate切割nginx日志</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>使用系统自带的logrorate来切个nginx日志，位于/usr/sbin/logrotate<br>假设服务器上有两个网站的nginx配置分别如下:</p><p>去除其它配置信息，只保留了日志相关<br>A网站<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access_log  /data/logs/a.com/access.log;</span><br><span class="line">error_log   /data/logs/a.com/error.log;</span><br></pre></td></tr></table></figure></p><p>B网站<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access_log  /data/logs/b.com/access.log;</span><br><span class="line">error_log   /data/logs/b.com/error.log;</span><br></pre></td></tr></table></figure></p><p>在/etc/logrotate.d/下创建一个配置文件 nginx, 内容如下:</p><h3 id="这里可以添加你想切个的目录，也可以直接使用正则表达式"><a href="#这里可以添加你想切个的目录，也可以直接使用正则表达式" class="headerlink" title="这里可以添加你想切个的目录，也可以直接使用正则表达式"></a>这里可以添加你想切个的目录，也可以直接使用正则表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/data/logs/a.com/*.log</span><br><span class="line">/data/logs/b.com/*.log</span><br><span class="line">&#123;</span><br><span class="line">    daily</span><br><span class="line">    rotate 30</span><br><span class="line">    missingok</span><br><span class="line">    dateext</span><br><span class="line">    compress</span><br><span class="line">    delaycompress</span><br><span class="line">    notifempty</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">        if [ -f /usr/local/nginx/nginx.pid ]; then</span><br><span class="line">            kill -USR1 `cat /usr/local/nginx/nginx.pid`</span><br><span class="line">        fi</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是你们的nginx.pid位置，不一定是在/usr/local/nginx/nginx.pid<br>配置说明</p><h3 id="配置-说明"><a href="#配置-说明" class="headerlink" title="配置    说明"></a>配置    说明</h3><p>daily    指定转储周期为每天<br>weekly    指定转储周期为每周<br>monthly    指定转储周期为每月<br>rotate    转储次数，超过将会删除最老的那一个<br>missingok    忽略错误，如“日志文件无法找到”的错误提示<br>dateext    切换后的日志文件会附加上一个短横线和YYYYMMDD格式的日期<br>compress    通过gzip 压缩转储旧的日志<br>delaycompress    当前转储的日志文件到下一次转储时才压缩<br>notifempty    如果日志文件为空，不执行切割<br>sharedscripts    只为整个日志组运行一次的脚本<br>prerotate/endscript    在转储以前需要执行的命令可以放入这个对，这两个关键字必须单独成行<br>postrotate/endscript    在转储以后需要执行的命令可以放入这个对，这两个关键字必须单独成行</p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3 测试"></a>3 测试</h3><p>执行以下命令进行测试<br>logrotate -vf /etc/logrotate.d/nginx<br>1<br>然后到相应的日志目录下查看 （/data/logs/a.com/, /data/logs/b.com/）<br>应该会有类似以下的文件:<br>access.log<br>access.log-20170626<br>error.log<br>error.log-20170626</p><h3 id="4-添加定时任务"><a href="#4-添加定时任务" class="headerlink" title="4 添加定时任务"></a>4 添加定时任务</h3><p>每日0点执行脚本</p><p>在终端运行 crontab -e<br>插入以下语句<br>0 0 <em> </em> * /usr/sbin/logrotate -vf /etc/logrotate.d/nginx</p>]]></content>
      
      
      <categories>
          
          <category> lb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小故事-父亲去已婚女儿的家中</title>
      <link href="/2017/08/10/live/%E7%88%B6%E4%BA%B2%E5%8E%BB%E5%B7%B2%E5%A9%9A%E5%A5%B3%E5%84%BF%E7%9A%84%E5%AE%B6%E4%B8%AD%EF%BC%8C%E8%A2%AB%E7%9C%BC%E5%89%8D%E7%9A%84%E6%99%AF%E8%B1%A1%E9%9C%87%E6%83%8A%E4%BA%86%E2%80%A6%E2%80%A6/"/>
      <url>/2017/08/10/live/%E7%88%B6%E4%BA%B2%E5%8E%BB%E5%B7%B2%E5%A9%9A%E5%A5%B3%E5%84%BF%E7%9A%84%E5%AE%B6%E4%B8%AD%EF%BC%8C%E8%A2%AB%E7%9C%BC%E5%89%8D%E7%9A%84%E6%99%AF%E8%B1%A1%E9%9C%87%E6%83%8A%E4%BA%86%E2%80%A6%E2%80%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="父亲去已婚女儿的家中，被眼前的景象震惊了……"><a href="#父亲去已婚女儿的家中，被眼前的景象震惊了……" class="headerlink" title="父亲去已婚女儿的家中，被眼前的景象震惊了……"></a>父亲去已婚女儿的家中，被眼前的景象震惊了……</h1><p>当一个父亲，把女儿的手递到另一个男人的手里，他渴望和期待的是女儿能过上幸福的日子。然而，有一天，他到女儿家去看她，突然发现女儿过的生活，并不是自己想象的那样。</p><p>▼女儿几乎从一瞬间，从一个文静优雅的姑娘，变成了一个身兼保姆、妈妈、员工、妻子、女儿的多重身份的女汉子。</p><p>▼父亲觉得有些痛心，因为那个号称是孩子父亲的人，并没有帮到女儿，反而还要女儿像宠爱一个大孩子一样伺候他。</p><p>▼看着女儿要一边打电话一边打开煤气灶做饭，还要打开电脑去看工作进度，更要收拾熊孩子落在地上的玩具，父亲心底说不出的心酸，他有些怀疑，自己是否帮她选错了。</p><p>▼一边是女婿的气定神闲看电视喝咖啡玩电脑，一边是女儿忙得的焦头烂额，老爸心里真是五味杂陈。</p><p>▼女儿的电话一直没来得及放下，还要操心熊孩子，给熊孩子脱下脏了的衣服。</p><p>▼女儿又穿梭于洗衣房跟厨房之间，她根本闲不下来，可是那个孩子的爸爸呢？</p><p>▼女儿的电脑开着，但是手里还抱着一堆盘子，准备开饭。这是女儿的日常，她已经习惯，可是父亲心底却满满是泪。他开始后悔，后悔自己这些年做过的榜样。</p><p>▼他还是忍住眼泪离开，跟女儿道别的时候，无比柔情蜜意。</p><p>▼当父亲离开，女儿终于发现父亲留下了一封信，打开之后，看的热泪盈眶。</p><p>▼作为父亲，他觉得自己这么多年，愧对自己的妻子，因为，自己跟女儿的老公一样，视若无睹妻子的付出。而作为父亲，他又不愿意自己的女儿也重走自己妻子的老路，这么多年，活成女汉子。</p><p>▼所以，他告诉女儿，这个家，是两个人的家，需要孩子的父亲一起付出，这才是完整的家。</p><p>▼当然，他更多的是对自己做了一个坏榜样而感到内疚，是自己这么多年来对妻子的忽略和理所当然，他如今想做的就是，从点滴做起，在这个家里，体贴妻子，当一个让妻子心底温暖起来的好丈夫，也给女儿做一个好榜样。</p><p>是啊，这虽然是一条广告片，可是却赚了许多人的热泪，之所以感动，是因为，这个父亲他意识到了现代家庭里父亲已经不再是那个只需要赚钱养家就可以在沙发上一趟看电视的父亲，父亲这个角色，赋予了更多的意义：</p><p>因为如果你不好好当个父亲<br>你的女儿<br>可能将来就会成为你妻子那样的女汉子<br>因为父亲的形象潜意识成为女儿选择丈夫的标准<br>因为你现在的家<br>就是你孩子以后的原生家庭<br>你的样子<br>就是你女儿将来老公的样子！</p><p>女儿婚礼，爸爸说：“我的小棉袄被人穿走了。</p><p>这是一段爸爸对女儿真情的告白……</p><p>你小时候，不敢抱你怕胡渣弄疼你</p><p>你长大了……<br>只愿和妈妈交心，我只能在一边呵护你；</p><p>你成年了，我天天盼你电话，只为换一份舒心。</p><p>弹指间……<br>你就要和身边这个小子走了，但我还没来得及说句爱你。</p><p>只希望他会比我还疼你。</p><p>但女儿，我只想你知道。<br>我依然会用余下的人生去守护你。</p><p>我一直想要一个儿子而不是一个女儿，其实并不是因为我不喜欢你,而是因为过去的20多年我都不愿意去想象你离开我的这一天，这天我将失去我的一切，但这一天还是来了。</p><p>出嫁前，硬汉一样的爸爸哽噎的说，“以后就剩老两口了，一点也不热闹了”。<br>第一次，看到爸爸流泪，到了自己才发现，父亲在女儿出嫁那天，是这样的心情。</p><p>父亲，面对女儿出嫁的那一刻，也许是这多年来最凌乱的一种感情了。</p><p>很多时候，我们总以为自己有的是机会，孰料其实人生是减法，见一面少一面。在有限的人生里，请一定记得对他好。</p><p>多少年后你还会记得在那个甜蜜，喜悦，幸福，各种情绪交织的早晨，爸爸充满着复杂的情绪为女儿的婚礼忙忙碌碌着，生怕对那一场婚礼细节考虑得有任何不周全。</p><p>小时候因为摔跤哭了，父亲会用宽大得手掌擦去女儿得眼泪。此刻，女儿又一次哭了，而父亲嘴角得微笑是他全部得语言。</p><p>你能看到照片中父亲得失落。父爱如此深沉，无言。</p><p>女儿出嫁时父亲对她说：女儿，你们之间的矛盾和不高兴的事不要给我讲，因为你终会原谅他，但我不会。</p><p>拥抱再紧，也总是要松开。这个世界上，只有一种爱是为了放手。</p><p>如果可以，请把我留在童年里，留在青春里，留在最美好得时光里。</p><p>因为哪里，有父亲最亲密无间得爱。</p>]]></content>
      
      
      <categories>
          
          <category> live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小故事-大树之恩</title>
      <link href="/2017/08/10/live/%E5%A4%A7%E6%A0%91%E4%B9%8B%E6%81%A9/"/>
      <url>/2017/08/10/live/%E5%A4%A7%E6%A0%91%E4%B9%8B%E6%81%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="大树之恩"><a href="#大树之恩" class="headerlink" title="大树之恩"></a>大树之恩</h1><p>很久很久以前，有一棵又高又大的树。<br>一位小男孩，天天到树下来，他爬上去摘果子吃，在树荫下睡觉。他爱大树，大树也爱和他一起玩耍。<br>后来，小男孩长大了，不再天天来玩耍。<br>一天他又来到树下，很伤心的样子。大树要和他一起玩，男孩说：“不行，我不小了，不能再和你玩，我要玩具，可是没钱买。”<br>大树说：“很遗憾，我也没钱，不过，把我所有的果子摘下来卖掉，你不就有钱了？”<br>男孩十分激动，他摘下所有的果子，高高兴兴地走了。<br>然后，男孩好久都没有来。大树很伤心。</p><p>有一天，男孩终于来了，大树兴奋地邀他一起玩。<br>男孩说：“不行，我没有时间，我要替家里干活呢，我们需要一幢房子，你能帮忙吗？”<br>“我没有房子。”大树说，“不过你可以把我的树枝统统砍下来，拿去搭房子。”<br>于是男孩砍下所有的树枝，高高兴兴地运走去盖房子。看到男孩高兴大树好快乐。<br>从此，男孩又不来了。<br>大树再次陷入孤单和悲伤之中。<br>一年夏天，男孩回来了，大树太快乐了：“来呀！孩子，来和我玩呀。”<br>男孩却说：“我心情不好，一天天老了，我要扬帆出海，轻松一下，你能给我一艘船吗？”<br>大树说：“把我的树干砍去，拿去做船吧！”于是男孩砍下了她的树干，造了条船，然后驾船走了，很久都没有回来。<br>大树好快乐……但不是真的。</p><p>许多年过去，男孩终于回来，大树说：“对不起，孩子，我已经没有东西可以给你了，我的果子没了。”<br>男孩说：“我的牙都掉了，吃不了苹果了。”<br>大树又说：“我再没有树干，让你爬上来了。”<br>男孩说：“我太老了，爬不动了。”<br>“我再也没有什么给得出手了….只剩下枯死下去的老根。”树流着泪说。<br>男孩说：“这么多年过去了，现在我感到累了，什么也不想要，只要一个休息的地方。”<br>“好啊！老根是最适合坐下来休息的，来啊，坐下来和我一起休息吧！”男孩坐下来，大树高兴得流下了眼泪……<br>这就是我们每个人的故事。这棵树就是我们的父母。<br>小时候，我们喜欢和爸爸妈妈玩……长大后，我们就离开他们，只在需要什么东西或者遇到麻烦的时候，才回到他们身边。<br>无论如何，父母永远都在那儿，倾其所有使你快乐。你可能认为这个男孩对树很残酷，但这就是我们每个人对待父母的方式。<br>人生确实如此，请朋友们珍惜与父母在一起的时间！因为：树欲静而风不止，子欲养而亲不待。</p>]]></content>
      
      
      <categories>
          
          <category> live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小故事-孩子教育</title>
      <link href="/2017/08/10/live/%E7%94%B7%E5%AD%A9%E6%95%99%E8%82%B2/"/>
      <url>/2017/08/10/live/%E7%94%B7%E5%AD%A9%E6%95%99%E8%82%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="男孩教育"><a href="#男孩教育" class="headerlink" title="男孩教育"></a>男孩教育</h1><p>一个爸爸告诉儿子：顶撞妈妈是有条件的·····有这么一个故事，妈妈们看完很是欣慰，爸爸们看完沉默发出了，孩子们看了懂事了很多···<br>故事是这样的：有一次已经读高中的儿子因为妈妈总是唠叨，不耐烦的顶撞了母亲，母亲气得半死。当晚，父亲便约儿子一起出门散步。两人走了好久，父亲说道，顶撞妈妈时，下列的事任选一样，做到后，才有顶撞的权利！<br>  ● 连续3个月每吃完一餐就须催吐(孕吐)<br>  ● 乳头被别人吸到破皮达一个月(喂奶)<br>  ● 肚子塞一颗篮球达10个月(怀孕)<br>  ● 接受皮鞭抽打达48小时(生小孩)<br>  ● 10个月不能喝冰水、咖啡、茶<br>  ● 5个月睡觉不能翻身<br>  ● 10个月不能出游远行，不能跑跳<br>  ● 10个月不能生病，实在要是病了，生病不能吃药<br>  ● 生完孩子把屎把尿一个月<br>  ● 晚上睡觉每二个小时起床一次，清醒30分钟达一个月。<br>一直到要进家门口时，父亲拍拍儿子的肩膀，以男人对男人的语气说:“等一下进去时，给我女人一点面子！”<br>儿子惊讶于老爸用哥儿们的语气对他说话，并因男人跟男人之间的义气，从此对母亲毕恭毕敬的。看完这个故事，想起一个高中同学他说：<br>有一次顶撞母亲，父亲把他从椅子上踹下来，斥责他：你妈是我捧在手心的宝，我呵护她，照顾她，对她轻声细语，你凭什么对他大声喊叫！我的同学再也不敢顶撞母亲了。<br>这么多年来有谁会忍受着一辈子付出没有回报的？恐怕除了父母没有别人了吧？<br>我们平时总是抱怨自己没有好背景，好父母，可生活在物质条件比父母强百倍的我们为什么不努力拼搏一把，成为父母的骄傲呢？</p><h1 id="需要教给孩子"><a href="#需要教给孩子" class="headerlink" title="需要教给孩子"></a>需要教给孩子</h1><p>Grit坚毅、Zest激情、Self-control自制力、Optimism乐观态度、Gratitude感恩精神、Social intelligence社交智力、Curiosity好奇心</p><h1 id="表达方式"><a href="#表达方式" class="headerlink" title="表达方式"></a>表达方式</h1><ul><li>[该做什么]，而非[不要做什么]</li><li>语言引动，动作也要跟上</li><li>有仪式感的阐述规则</li></ul>]]></content>
      
      
      <categories>
          
          <category> live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小故事-读书无用论</title>
      <link href="/2017/08/10/live/%E4%B8%8A%E4%BA%86985%E3%80%81211%E6%89%8D%E7%9F%A5%E9%81%93%EF%BC%8C%E8%AF%BB%E4%B9%A6%E6%97%A0%E7%94%A8%E8%AE%BA%E9%83%BD%E6%98%AF%E9%AA%97%E4%BA%BA%E7%9A%84/"/>
      <url>/2017/08/10/live/%E4%B8%8A%E4%BA%86985%E3%80%81211%E6%89%8D%E7%9F%A5%E9%81%93%EF%BC%8C%E8%AF%BB%E4%B9%A6%E6%97%A0%E7%94%A8%E8%AE%BA%E9%83%BD%E6%98%AF%E9%AA%97%E4%BA%BA%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="上了985、211才知道，读书无用论都是骗人的"><a href="#上了985、211才知道，读书无用论都是骗人的" class="headerlink" title="上了985、211才知道，读书无用论都是骗人的"></a>上了985、211才知道，读书无用论都是骗人的</h1><h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><p>念高中时，常听班主任提起一位学姐，她几乎不跟周围的人说话，没什么朋友。</p><p>直到高考，她考了全省前十名。</p><p>市里去拍摄宣传时，发现她家中一贫如洗，父亲早就过世了，母亲还一直卧病在床。</p><p>高中为了省钱，她经常趁别人吃完饭离开后，去捡吃剩的馒头，一边捡一边吃。</p><p>那时候，有些高校会给优秀高考生数万元的金钱奖励。</p><p>她说，她高中三年拼命学习，目标就是能拿到那笔钱，这样她就自己赚够了学费，亲人就再也不能逼她赶紧辍学，早点嫁人。</p><p>“像我这种出身卑微的人，连任性的资格都没有，就害怕一停下来，就被别人狠狠地甩在后面。”</p><p>这让我想起云音乐的评论区常看到的一句话：我不敢倒下，因为身后空无一人。</p><p>知乎上有个提问：底层出身的孩子，假设当年你没能上 985 或者 211，你会损失和错过什么？</p><p>什么是底层？</p><p>就是除了你自己，你一无所有。而只能靠自己的人，连个性都是奢侈品。</p><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><p>有人说，这是一个英雄不论出处的年代，也是一个英雄必论出处的年代。</p><p>龟兔赛跑，如果兔子一直在拼命跑，结果会怎么样？</p><p>英国BBC曾拍摄纪录片，展现14个孩子，50年的人生轨迹。</p><p>7岁时，来自精英家庭的John和Andrew已经习惯了每天看《金融报》或《观察家》，而贫民窟孩子的理想，是能少罚站，少被打，吃饱饭。</p><p>50年后，几个精英家庭的孩子，上了好学校，找到好工作。</p><p>三个中产家庭的孩子，有一位成为精英，两个依旧中产。</p><p>而几个来自底层的孩子，包括他们的后代，依然常常与失业相伴。</p><p>知识改变命运背后，也是一场关于家庭的较量。</p><p>有钱的基础是，你家庭的资源、背景，加上你的努力和运气。但大多数人，不过是为了生计而出卖劳动的人。</p><p>纪录片中曾辍学的父母，没能力教孩子怎么学，因为穷，他们也没钱让别人来教，到后来，伦敦的孩子Tony也辍学了。</p><p>七岁的John和Andrew说自己每天都会读《金融时报》/《人生七年》</p><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><p>人脉、财富、教育等资源，会父传子，子传孙。</p><p>据《中国家庭发展报告2015》，农村80%的留守儿童从没参加过课外辅导，在西部贫困农村，63%的学生甚至没有高中文凭。</p><p>中国校友网对全国各省级高考状元开展调查，发现在2007-2016年间，全国共有约837名高考状元。</p><p>其中，近五成状元父母是教师(35%)和工程师(12.6%)，近两成父母是公务员。</p><p>来自农村、经济状况欠佳家庭的状元所占比例在下降。</p><p>这种现象，就如同今年北京高考状元说的：</p><p>像我这种属于中产阶级家庭的孩子，还生在北京，所以在教育资源上享有得天独厚的条件，我在学习的时候，确实能走很多捷径。</p><p>状元身份的背后，一定付出了汗水，但这不是一个人的战斗，支撑他的还有良好的教育环境。</p><p>原生家庭对人的影响，真的太大了，有时你不得不承认：自己努力的天花板，不过是别人的起点。</p><p>条条大路通罗马，有人出生在罗马。</p><p>《北京爱情故事》里的石小猛，前期极尽努力，但在职场上依然被上司克扣，受尽欺负。</p><p>他在特别绝望的时候说：</p><p>人生就是一场比赛，可有的人连参赛资格都没有。确实，那些富家子弟手中的东西可能是我们一辈子也买不起的东西。我再努力再勤奋八百辈子，有用吗？没用，赶不上你一生下来，嘴里边含一把金钥匙，我呢，也别勤奋了，别努力了，我就吃吃斋，念念佛，找个好时候好地方，投个好胎，找个好爹。</p><p>人的每一种奢望都是设想“如何能付出最少而得到最多”，但这个世界上并不存在这种极端不公平的交易。</p><p>所以大学，起码提供给了底层可行的前进捷径，终其一生或许谈不上逆袭，但在人生的接力赛中，你是自己孩子的起点。</p><p>跨过这条千军万马的独木桥，以后的门票会越来越贵，你可能再也买不起入场券了。</p><p>剧中的石小猛/《北京爱情故事》</p><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><p>为什么一定要上名校？</p><p>  ● 一、你身边人的优秀程度，会影响你</p><p>过去20年来，北大先后有500余名保安考学深造，有的考上了研究生，当起大学老师。</p><p>每个学校都有保安，但为什么这种成群结队的考学行为，在名校发生的概率更大？媒体采访“北大保安第一人张俊成”的报道里，或许就藏着答案。</p><p>张俊成说，有次站岗，看到一位老人骑车过来，快到门岗前，老人下车，推车走过。</p><p>经过门岗时，老人点头跟他说：“你辛苦了”。</p><p>张俊成感到很受宠若惊，他问旁人，“这是谁？怎么这么尊重我们？”</p><p>别人告知，老人是北大校长。</p><p>在保安岗位上，张俊成也曾一度“迷失”，他说，“那个时候非常无知、愚昧”。</p><p>但他却得到了多位北大教授的热心帮助，在教授们的建议下，他才开始重新读书学习。</p><p>《精进》一书中谈到：</p><p>一个年轻人，进入一所不那么优秀的高校，对自己的标准会不由自主地降低以适应这个环境，减少自身与环境的冲突，而这种做法对他们的人生也许是致命的。</p><p>而在一片向上的氛围中，周围的人都在努力，自己也会用相对严格的标准来审视自己，不断自省，哪怕最后变不成最牛的，也可以优秀出众。</p><p>  ● 二、名校的光环，是一种优秀的传递</p><p>当别人无法深入接触你时，你的头衔，外表等外在表现，往往决定了他们对你的看法。</p><p>大学生如同韭菜，收完一茬又会有一茬，已经不怎么新鲜了，在这种情况下，“名校”就是一道招牌。</p><p>稍微想一想就不难理解，亲戚家有孩子考上名校，周围人会口口相传，“谁家的孩子，上XX学校了！了不起！”</p><p>八竿子打不着的关系都要掰扯清楚，好像有了这层关系，自己的身价也能水涨船高。</p><p>名校在人心中的地位始终就不一般，它的声望是由多年来源源不断地人才输入和输出才形成的。所以HR选择名牌大学的求职者，成本无疑是最低的。</p><p>在他们看来，出身名校，起码意味着有智商或者有毅力，说到第一学历，古人也非常重视。</p><p>满清重臣左宗棠，举人出身，终其一生没也考中进士，这成了他永远的痛，甚至让他在宦海中饱受侮辱和曲折，后来他成了正一品，还不忘给自己弄一个荣誉进士的称号。</p><p>到了现在，国内大公司招聘时，几乎都会明确地写明岗位的学历要求，有些岗位要求至少是本科以上学历，有人说这是“歧视”。</p><p>关于“第一学历”，某社区曾发起过一次探讨，参与者各抒己见，其中被点赞最多的留言是这么说的：</p><p>国家队为什么要从省队里选运动员？我是全村跑步最快的为什么不能参加奥运会？第一学历不好有两个重要隐患，</p><p>  ● 1、过高地估计自己努力的价值和自身水平；<br>  ● 2、过低地估计科学研究的困难程度和世界的大小。 </p><p>第一学历不能决定人一辈子，文凭也证明不了人的能力，但一些机会，在某些时候只留给有这张纸的人。</p><p>  ● 三、人脉的扩张，是一个人能力与资源的扩张</p><p>好大学能带给你接触更广泛圈子的机会，人脉的扩张，也是一个人能力与资源的扩张。</p><p>有次和一位在创业的学长聊天，他说他现在的团队，基本是研究生时期的同学，并且导师觉得他的项目前景不错，主动帮他做宣传。</p><p>当年北大毕业的陆步轩，以卖猪肉为生，全国哗然。</p><p>别人只看到才子卖猪肉的不光鲜，但陆的校友陈生却注意到：一个档口，自己一天只能卖1.2头猪，陆步轩却能卖出12头，简直太牛逼了。</p><p>陈生邀请他做品牌顾问，两人合作成立“屠夫学校”，养殖土猪，后来，他们开了几百家连锁店，陈生身家也过百亿。</p><p>不光是创业上的资源，为什么名校毕业生大多能找到外人眼中不错的工作？</p><p>除了本身能力问题，校友的作用也很明显。</p><p>比如前辈在大型企业上班，那你进入他的圈子实习和求职的机会，一定会比其他学校的学生多。</p><p>  ● 四、薪酬待遇</p><p>更功利性一些，如果你以赚更多钱为目标，学历绝对是决定因素之一，在薪资这件事上，国内外都保持了一致。</p><p>福利待遇好的公务员事业编国企员工等岗位，都有硬性的比较高的学历要求。</p><p>2010年中央国家行政机关对学历的要求，硕士以上学历的职位有294个，占职位总数的54.55%；而专科学历可以报考的职位只有1个。</p><p>  ● 五、受教育程度低的人，通过嫁娶来改变命运越来越难</p><p>从相同或相似的阶层群体中挑选配偶，这种门当户对式婚姻匹配，被称为同质婚。反之，跨越社会等级、社会群体壁垒的婚姻，为异质婚。</p><p>据《中国家庭发展报告2016》，20世纪80年代以后，相同和相近文化程度的婚姻匹配比例显著提高。</p><p>“男高女低”的异质婚配模式减少，受教育程度低的人群更加难以通过婚姻实现社会流动。</p><p>女性选择比自己受教育程度高的男性的空间越来越小，越来越集中在比自己仅仅高一个层次的梯度中选择，也就是现在鸡汤文常说的“你是谁，就会嫁给谁”。</p><p>而受教育程度低的农村男性，在择偶时面临更为严峻的困境。<br>01<br>一张高校文凭，不能确保让人站上顶峰，却会让大多数人免于跌落谷底。</p><p>那些说它“没用”的人，不过是一直处在谷底上方，但这绝不等同于“谷底”不存在。</p><p>曾看到一位网友的跟贴，他说：</p><p>其实我也没高考，也没读过大学，现在过得也不错，但这是我几年来起早摸黑努力得到的结果。不可以说读书无用论，其实读好大学，人生肯定会有个好的起点，更好地认识世界。</p><p>学识影响眼界，眼界决定格局，而格局影响人一生。</p><p>有句被说过无数遍的话：最怕你一生碌碌无为，还安慰自己平凡可贵。</p><p>还没高调的资格呢，就嚷嚷着要低调，还没活明白呢就开始说去伪存真，这是一种最损己不利人的行为，自己活得假，别人看着也特别累。</p><p>读书是一生的事，不是什么时候要用到了，我们才去学什么。</p><p>刘媛媛演讲“寒门贵子”/《超级演说家》</p><p>刘媛媛在《超级演说家》中曾发表过这样一段演说：</p><p>有些人出生就含着金钥匙，有些人出生连爸妈都没有，人生跟人生是没有可比性的，我们的人生是怎么样，完全决定于自己的感受。</p><p>你一辈子都在感受抱怨，那你的一生就是抱怨的一生；</p><p>你一辈子都在感受感动，那你的一生就是感动的一生；</p><p>你一辈子都立志于改变这个社会，那你的一生就是斗士的一生。</p><p>这世界就是，一些人总在昼夜不停地运转，而另外一些人，起床就发现世界已经变了。</p>]]></content>
      
      
      <categories>
          
          <category> live </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
