<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux-网络监控</title>
      <link href="/2018/12/25/linux/iftop/"/>
      <url>/2018/12/25/linux/iftop/</url>
      
        <content type="html"><![CDATA[<h1 id="iftop"><a href="#iftop" class="headerlink" title="iftop"></a>iftop</h1><p>TX：发送流量<br>RX：接收流量<br>TOTAL：总流量<br>Cumm：运行iftop到目前时间的总流量<br>peak：流量峰值<br>rates：分别表示过去 2s 10s 40s 的平均流量</p><p>按h切换是否显示帮助;</p><p>按n切换显示本机的IP或主机名;</p><p>按s切换是否显示本机的host信息;</p><p>按d切换是否显示远端目标主机的host信息;</p><p>按t切换显示格式为2行/1行/只显示发送流量/只显示接收流量;</p><p>按N切换显示端口号或端口服务名称;</p><p>按S切换是否显示本机的端口信息;</p><p>按D切换是否显示远端目标主机的端口信息;</p><p>按p切换是否显示端口信息;</p><p>按P切换暂停/继续显示;</p><p>按b切换是否显示平均流量图形条;</p><p>按B切换计算2秒或10秒或40秒内的平均流量;</p><p>按T切换是否显示每个连接的总流量;</p><p>按l打开屏幕过滤功能，输入要过滤的字符，比如ip,按回车后，屏幕就只显示这个IP相关的流量信息;</p><p>按L切换显示画面上边的刻度;刻度不同，流量图形条会有变化;</p><p>按j或按k可以向上或向下滚动屏幕显示的连接记录;</p><p>按1或2或3可以根据右侧显示的三列流量数据进行排序;</p><p>按&lt;根据左边的本机名或IP排序;</p><p>按&gt;根据远端目标主机的主机名或IP排序;</p><p>按o切换是否固定只显示当前的连接;</p><p>按f可以编辑过滤代码，这是翻译过来的说法，我还没用过这个！</p><p>按!可以使用shell命令，这个没用过！没搞明白啥命令在这好用呢！</p><p>按q退出监控。</p><p>常用：t p n</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDE-idea</title>
      <link href="/2018/12/25/tool/IDEA/"/>
      <url>/2018/12/25/tool/IDEA/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="显示当前类的层次结构"><a href="#显示当前类的层次结构" class="headerlink" title="显示当前类的层次结构"></a>显示当前类的层次结构</h3><p>⌃H(control + H)</p><h3 id="显示方法层次结构"><a href="#显示方法层次结构" class="headerlink" title="显示方法层次结构"></a>显示方法层次结构</h3><p>⌘⇧H(common+shift+h)</p><h3 id="显示调用层次结构"><a href="#显示调用层次结构" class="headerlink" title="显示调用层次结构"></a>显示调用层次结构</h3><p>⌃⌥H(control+alt+h)</p><h3 id="复制行"><a href="#复制行" class="headerlink" title="复制行"></a>复制行</h3><p>⌘D</p><h3 id="自动代码"><a href="#自动代码" class="headerlink" title="自动代码"></a>自动代码</h3><h3 id="可以显示当前文件的结构"><a href="#可以显示当前文件的结构" class="headerlink" title="可以显示当前文件的结构"></a>可以显示当前文件的结构</h3><p>⌘F12</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p>⌘⌥U</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-内核调优</title>
      <link href="/2018/12/24/linux/%E5%86%85%E6%A0%B8%E8%B0%83%E4%BC%98sysctl.conf/"/>
      <url>/2018/12/24/linux/%E5%86%85%E6%A0%B8%E8%B0%83%E4%BC%98sysctl.conf/</url>
      
        <content type="html"><![CDATA[<h1 id="内核调优sysctl-conf"><a href="#内核调优sysctl-conf" class="headerlink" title="内核调优sysctl.conf"></a>内核调优sysctl.conf</h1><h2 id="net-ipv4-tcp-syncookies-1"><a href="#net-ipv4-tcp-syncookies-1" class="headerlink" title="net.ipv4.tcp_syncookies = 1"></a>net.ipv4.tcp_syncookies = 1</h2><p>表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</p><h2 id="net-ipv4-tcp-tw-reuse-1"><a href="#net-ipv4-tcp-tw-reuse-1" class="headerlink" title="net.ipv4.tcp_tw_reuse = 1"></a>net.ipv4.tcp_tw_reuse = 1</h2><p>表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</p><h2 id="net-ipv4-tcp-tw-recycle-1"><a href="#net-ipv4-tcp-tw-recycle-1" class="headerlink" title="net.ipv4.tcp_tw_recycle = 1"></a>net.ipv4.tcp_tw_recycle = 1</h2><p>表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭；</p><h2 id="net-ipv4-tcp-fin-timeout-30"><a href="#net-ipv4-tcp-fin-timeout-30" class="headerlink" title="net.ipv4.tcp_fin_timeout = 30"></a>net.ipv4.tcp_fin_timeout = 30</h2><p>修改系統默认的 TIMEOUT 时间</p><h2 id="net-ipv4-tcp-keepalive-time-1200"><a href="#net-ipv4-tcp-keepalive-time-1200" class="headerlink" title="net.ipv4.tcp_keepalive_time = 1200"></a>net.ipv4.tcp_keepalive_time = 1200</h2><p>表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。</p><h2 id="net-ipv4-ip-local-port-range-10000-65000"><a href="#net-ipv4-ip-local-port-range-10000-65000" class="headerlink" title="net.ipv4.ip_local_port_range = 10000 65000"></a>net.ipv4.ip_local_port_range = 10000 65000</h2><p>表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为10000到65000。（注意：这里不要将最低值设的太低，否则可能会占用掉正常的端口！）</p><h2 id="net-ipv4-tcp-max-syn-backlog-8192"><a href="#net-ipv4-tcp-max-syn-backlog-8192" class="headerlink" title="net.ipv4.tcp_max_syn_backlog = 8192"></a>net.ipv4.tcp_max_syn_backlog = 8192</h2><p>表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。</p><h2 id="net-ipv4-tcp-max-tw-buckets-6000"><a href="#net-ipv4-tcp-max-tw-buckets-6000" class="headerlink" title="net.ipv4.tcp_max_tw_buckets = 6000"></a>net.ipv4.tcp_max_tw_buckets = 6000</h2><p>表示系统同时保持TIME_WAIT的最大数量，如果超过这个数字，TIME_WAIT将立刻被清除并打印警告信息。默 认为180000，改为6000。对于Apache、Nginx等服务器，上几行的参数可以很好地减少TIME_WAIT套接字数量，但是对于Squid，效果却不大。此项参数可以控制TIME_WAIT的最大数量，避免Squid服务器被大量的TIME_WAIT拖死。</p><h2 id="net-ipv4-tcp-max-syn-backlog-65536"><a href="#net-ipv4-tcp-max-syn-backlog-65536" class="headerlink" title="net.ipv4.tcp_max_syn_backlog = 65536"></a>net.ipv4.tcp_max_syn_backlog = 65536</h2><p>记录的那些尚未收到客户端确认信息的连接请求的最大值。对于有128M内存的系统而言，缺省值是1024，小内存的系统则是128。</p><h2 id="net-core-netdev-max-backlog-32768"><a href="#net-core-netdev-max-backlog-32768" class="headerlink" title="net.core.netdev_max_backlog = 32768"></a>net.core.netdev_max_backlog = 32768</h2><p>每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</p><h2 id="net-core-somaxconn-32768"><a href="#net-core-somaxconn-32768" class="headerlink" title="net.core.somaxconn = 32768"></a>net.core.somaxconn = 32768</h2><p>web应用中listen函数的backlog默认会给我们内核参数的net.core.somaxconn限制到128，而nginx定义的NGX_LISTEN_BACKLOG默认为511，所以有必要调整这个值。</p><h2 id="net-core-wmem-default-8388608"><a href="#net-core-wmem-default-8388608" class="headerlink" title="net.core.wmem_default = 8388608"></a>net.core.wmem_default = 8388608</h2><h2 id="net-core-rmem-default-8388608"><a href="#net-core-rmem-default-8388608" class="headerlink" title="net.core.rmem_default = 8388608"></a>net.core.rmem_default = 8388608</h2><h2 id="net-core-rmem-max-16777216-最大socket读buffer-可参考的优化值-873200"><a href="#net-core-rmem-max-16777216-最大socket读buffer-可参考的优化值-873200" class="headerlink" title="net.core.rmem_max = 16777216           最大socket读buffer,可参考的优化值:873200"></a>net.core.rmem_max = 16777216           最大socket读buffer,可参考的优化值:873200</h2><h2 id="net-core-wmem-max-16777216-最大socket写buffer-可参考的优化值-873200"><a href="#net-core-wmem-max-16777216-最大socket写buffer-可参考的优化值-873200" class="headerlink" title="net.core.wmem_max = 16777216           最大socket写buffer,可参考的优化值:873200"></a>net.core.wmem_max = 16777216           最大socket写buffer,可参考的优化值:873200</h2><h2 id="net-ipv4-tcp-timestsmps-0"><a href="#net-ipv4-tcp-timestsmps-0" class="headerlink" title="net.ipv4.tcp_timestsmps = 0"></a>net.ipv4.tcp_timestsmps = 0</h2><p>时间戳可以避免序列号的卷绕。一个1Gbps的链路肯定会遇到以前用过的序列号。时间戳能够让内核接受这种“异常”的数据包。这里需要将其关掉。</p><h2 id="net-ipv4-tcp-synack-retries-2"><a href="#net-ipv4-tcp-synack-retries-2" class="headerlink" title="net.ipv4.tcp_synack_retries = 2"></a>net.ipv4.tcp_synack_retries = 2</h2><p>为了打开对端的连接，内核需要发送一个SYN并附带一个回应前面一个SYN的ACK。也就是所谓三次握手中的第二次握手。这个设置决定了内核放弃连接之前发送SYN+ACK包的数量。</p><h2 id="net-ipv4-tcp-syn-retries-2"><a href="#net-ipv4-tcp-syn-retries-2" class="headerlink" title="net.ipv4.tcp_syn_retries = 2"></a>net.ipv4.tcp_syn_retries = 2</h2><p>在内核放弃建立连接之前发送SYN包的数量。</p><h2 id="net-ipv4-tcp-tw-len-1"><a href="#net-ipv4-tcp-tw-len-1" class="headerlink" title="#net.ipv4.tcp_tw_len = 1"></a>#net.ipv4.tcp_tw_len = 1</h2><h2 id="net-ipv4-tcp-tw-reuse-1-1"><a href="#net-ipv4-tcp-tw-reuse-1-1" class="headerlink" title="net.ipv4.tcp_tw_reuse = 1"></a>net.ipv4.tcp_tw_reuse = 1</h2><p> 开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接。</p><h2 id="net-ipv4-tcp-wmem-8192-436600-873200"><a href="#net-ipv4-tcp-wmem-8192-436600-873200" class="headerlink" title="net.ipv4.tcp_wmem = 8192 436600 873200"></a>net.ipv4.tcp_wmem = 8192 436600 873200</h2><p>TCP写buffer,可参考的优化值: 8192 436600 873200</p><h2 id="net-ipv4-tcp-rmem-32768-436600-873200"><a href="#net-ipv4-tcp-rmem-32768-436600-873200" class="headerlink" title="net.ipv4.tcp_rmem  = 32768 436600 873200"></a>net.ipv4.tcp_rmem  = 32768 436600 873200</h2><p>TCP读buffer,可参考的优化值: 32768 436600 873200</p><h2 id="net-ipv4-tcp-mem-94500000-91500000-92700000"><a href="#net-ipv4-tcp-mem-94500000-91500000-92700000" class="headerlink" title="net.ipv4.tcp_mem = 94500000 91500000 92700000"></a>net.ipv4.tcp_mem = 94500000 91500000 92700000</h2><p> 同样有3个值,意思是:<br>net.ipv4.tcp_mem[0]:低于此值，TCP没有内存压力。<br>net.ipv4.tcp_mem[1]:在此值下，进入内存压力阶段。<br>net.ipv4.tcp_mem[2]:高于此值，TCP拒绝分配socket。<br>上述内存单位是页，而不是字节。可参考的优化值是:786432 1048576 1572864</p><h2 id="net-ipv4-tcp-max-orphans-3276800"><a href="#net-ipv4-tcp-max-orphans-3276800" class="headerlink" title="net.ipv4.tcp_max_orphans = 3276800"></a>net.ipv4.tcp_max_orphans = 3276800</h2><p>系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。<br>如果超过这个数字，连接将即刻被复位并打印出警告信息。<br>这个限制仅仅是为了防止简单的DoS攻击，不能过分依靠它或者人为地减小这个值，<br>更应该增加这个值(如果增加了内存之后)。</p><h2 id="net-ipv4-tcp-fin-timeout-30-1"><a href="#net-ipv4-tcp-fin-timeout-30-1" class="headerlink" title="net.ipv4.tcp_fin_timeout = 30"></a>net.ipv4.tcp_fin_timeout = 30</h2><p>如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间。对端可以出错并永远不关闭连接，甚至意外当机。缺省值是60秒。2.2 内核的通常值是180秒，你可以按这个设置，但要记住的是，即使你的机器是一个轻载的WEB服务器，也有因为大量的死套接字而内存溢出的风险，FIN- WAIT-2的危险性比FIN-WAIT-1要小，因为它最多只能吃掉1.5K内存，但是它们的生存期长些。</p><h2 id="DOS和DDOS原理"><a href="#DOS和DDOS原理" class="headerlink" title="DOS和DDOS原理"></a>DOS和DDOS原理</h2><p>假冒的IP发来海量的请求连接的第一个握手包（SYN包），被攻击服务器回应第二个握手包（SYN+ACK包），因为对方是假冒IP，对方永远收不到包且不会回应第三个握手包。导致被攻击服务器保持大量SYN_RECV状态的“半连接”</p><h3 id="应急处理"><a href="#应急处理" class="headerlink" title="应急处理"></a>应急处理</h3><p>netstat -na&gt;net.log<br>netstat -na |grep SYN_RECV|more<br>iptables -A INPUT -s  173.0.0.0/8  -p tcp  –dport 80 -j DROP</p><h3 id="使用F5挡攻击-中转一层"><a href="#使用F5挡攻击-中转一层" class="headerlink" title="使用F5挡攻击,中转一层"></a>使用F5挡攻击,中转一层</h3><p>让客户端先和F5三次握手，连接建立之后F5才转发到后端业务服务器</p><h3 id="调整系统参数挡攻击"><a href="#调整系统参数挡攻击" class="headerlink" title="调整系统参数挡攻击"></a>调整系统参数挡攻击</h3><p>tcp_synack_retries = 0<br>不重试，默认重试5次<br>net.ipv4.tcp_max_syn_backlog = 200000</p><h2 id="sysctl-p"><a href="#sysctl-p" class="headerlink" title="sysctl -p"></a>sysctl -p</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java-时间复杂度</title>
      <link href="/2018/12/22/JVM/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2018/12/22/JVM/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><h2 id="时间复杂度说明"><a href="#时间复杂度说明" class="headerlink" title="时间复杂度说明"></a>时间复杂度说明</h2><table><thead><tr><th>复杂度</th><th>标记符号</th><th>描述</th></tr></thead><tbody><tr><td>常量</td><td>O(1)</td><td>操作的数量为常数，与输入的数据的规模无关。</td></tr><tr><td>对数</td><td>O(log2 n)</td><td>操作的数量与输入数据的规模 n 的比例是 log2 (n),当n=8，log2(8)=3即2的立方=8，以10为底的对数简写做 lg N</td></tr><tr><td>线性</td><td>O(n)</td><td>操作的数量与输入数据的规模 n 成正比</td></tr><tr><td>平方</td><td>O(n2)</td><td>操作的数量与输入数据的规模 n 的比例为二次平方</td></tr><tr><td>立方</td><td>O(n3)</td><td></td></tr><tr><td>指数</td><td>O(2n) O(kn) O(n!)</td><td>指数级的操作，快速的增长</td></tr></tbody></table><h2 id="时间复杂度与运行时间"><a href="#时间复杂度与运行时间" class="headerlink" title="时间复杂度与运行时间"></a>时间复杂度与运行时间</h2><table><thead><tr><th>复杂度</th><th>1000</th><th>10000</th><th>100000</th></tr></thead><tbody><tr><td>O(1)</td><td>&lt;1s</td><td>&lt;1s</td><td>&lt;1s</td></tr><tr><td>O(log2(n))</td><td>&lt;1s</td><td>&lt;1s</td><td>&lt;1s</td></tr><tr><td>O(n)</td><td>&lt;1s</td><td>&lt;1s</td><td>&lt;1s</td></tr><tr><td>(n*log2(n))</td><td>&lt;1s</td><td>&lt;1s</td><td>&lt;1s</td></tr><tr><td>O(n2)</td><td>&lt;1s</td><td>2s</td><td>3-4 min</td></tr><tr><td>O(n3)</td><td>20s</td><td>5 hours</td><td>231 days</td></tr></tbody></table><p>ps:循环1 &lt;&lt; n，时间复杂度为 2的n次方</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tool-brew</title>
      <link href="/2018/12/12/tool/Homebrew/"/>
      <url>/2018/12/12/tool/Homebrew/</url>
      
        <content type="html"><![CDATA[<h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h1><h2 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tomcat</span><br></pre></td></tr></table></figure><p>安装的是最新版的版本</p><h2 id="卸载-Tomcat"><a href="#卸载-Tomcat" class="headerlink" title="卸载 Tomcat"></a>卸载 Tomcat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall tomcat</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade tomcat</span><br></pre></td></tr></table></figure><p>更新不会删除原来的，相当于重新安装一个最新版，也就是说配置不能共用</p><h2 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew switch tomcat 8.5.4</span><br></pre></td></tr></table></figure><p>升级会出现几个不同版本的 Tomcat 同时存在，切换到指定的版本就很有必要了<br>卸载</p><h2 id="卸载全部旧版本"><a href="#卸载全部旧版本" class="headerlink" title="卸载全部旧版本"></a>卸载全部旧版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup tomcat</span><br></pre></td></tr></table></figure><h2 id="卸载当前版本"><a href="#卸载当前版本" class="headerlink" title="卸载当前版本"></a>卸载当前版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew remove tomcat</span><br></pre></td></tr></table></figure><h2 id="卸载全部版本"><a href="#卸载全部版本" class="headerlink" title="卸载全部版本"></a>卸载全部版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall --force tomcat</span><br></pre></td></tr></table></figure><h2 id="卸载指定版本"><a href="#卸载指定版本" class="headerlink" title="卸载指定版本"></a>卸载指定版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew switch tomcat 8.5.4</span><br><span class="line">brew remove tomcat</span><br></pre></td></tr></table></figure><h2 id="查看已安装的-Tomcat-的版本和最新的版本信息"><a href="#查看已安装的-Tomcat-的版本和最新的版本信息" class="headerlink" title="查看已安装的 Tomcat 的版本和最新的版本信息"></a>查看已安装的 Tomcat 的版本和最新的版本信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info tomcat</span><br></pre></td></tr></table></figure><h2 id="查看可安装的-Tomcat-的所有版本"><a href="#查看可安装的-Tomcat-的所有版本" class="headerlink" title="查看可安装的 Tomcat 的所有版本"></a>查看可安装的 Tomcat 的所有版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search tomcat</span><br></pre></td></tr></table></figure><p>输出:<br>homebrew/versions/tomcat6<br>homebrew/versions/tomcat7<br>tomcat<br>tomcat-native</p><h2 id="安装指定版本的-Tomcat，例如-tomcat6"><a href="#安装指定版本的-Tomcat，例如-tomcat6" class="headerlink" title="安装指定版本的 Tomcat，例如 tomcat6"></a>安装指定版本的 Tomcat，例如 tomcat6</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install homebrew/versions/tomcat6</span><br></pre></td></tr></table></figure><h2 id="列出已经安装的软件"><a href="#列出已经安装的软件" class="headerlink" title="列出已经安装的软件"></a>列出已经安装的软件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure><h2 id="查看-brew-的帮助"><a href="#查看-brew-的帮助" class="headerlink" title="查看 brew 的帮助"></a>查看 brew 的帮助</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man brew</span><br></pre></td></tr></table></figure><h2 id="列出所有安装的软件里可以升级的"><a href="#列出所有安装的软件里可以升级的" class="headerlink" title="列出所有安装的软件里可以升级的"></a>列出所有安装的软件里可以升级的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew outdated</span><br></pre></td></tr></table></figure><h2 id="清理不需要的版本极其安装包缓存"><a href="#清理不需要的版本极其安装包缓存" class="headerlink" title="清理不需要的版本极其安装包缓存"></a>清理不需要的版本极其安装包缓存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java-JVM调优</title>
      <link href="/2018/11/20/JVM/JVM%E8%B0%83%E4%BC%98/"/>
      <url>/2018/11/20/JVM/JVM%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h1><h2 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h2><ol><li>基本数据类型，堆对象的引用，程序存储在栈中，方法以先进后出进栈，栈的起点是main方法<br>一个线程对应一个栈空间，栈是运行单元，<strong>栈调优参数：-Xss</strong>，StackOverFlowError是栈中死循环无法返回递归。</li><li>对象存储在堆中，堆是存储单元。<strong>堆调优参数：-Xms</strong></li></ol><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><ol><li>引用计数：增加一个对象引用，计数加1，减少一个对象引用，计数减1，计数为0 回收，问题：循环引用无法回收</li><li>标记-清除：第一阶段从根节点开始标记对象引用，第二阶段未标记的对象清除。问题：空间碎片</li><li>复制：两块内存，复制正在使用对象到另外一块内存空间。问题：两倍空间</li><li>标记-整理：第一阶段从根节点开始标记对象引用，第二阶段未标记的对象清除同时整理存活对象到清除的对象空间上</li></ol><h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><p>不同对象有不同的生命周期（人也如此），session，socket等需要长周期，String 这种不变类需要短周期</p><ol><li>分代：</li></ol><ul><li>年轻代（Eden，survivor），有意思的命名！Eden：伊甸园，亚当夏娃居住地。survivor：幸存者</li><li>年老代，</li><li>持久代（方法区），java.lang.OutOfMemoryError: PermGen space，<strong>调优参数：-XX:MaxPermSize</strong>。<br>调优经验：<br>问题描述：thrift定义了大量big class，尽管以及做了生产环境1024M的调优，但依旧出现PerGen space错误。<br>解决办法：升级到jdk8。<br>原理：因为jdk8已经元空间代替持久代，metaspace占用本地内存，不占用虚拟机内存。</li></ul><ol start="2"><li>GC类型</li></ol><ul><li>scavenge（搜索） GC：主要作用于年轻代，高频清理Eden，采用并行收集器，<strong>调优参数：XX:+UseParallelGC</strong></li><li>full GC</li></ul><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><ul><li>-Xmx：JVM最大可用内存</li><li>-Xms：JVM初始内存，设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存</li><li>-Xmn：年轻代内存</li><li>-Xss：</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>k8s集群安装</title>
      <link href="/2018/10/11/k8s/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/10/11/k8s/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="k8s集群部署"><a href="#k8s集群部署" class="headerlink" title="k8s集群部署"></a>k8s集群部署</h1><h2 id="master"><a href="#master" class="headerlink" title="master"></a>master</h2><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl --static set-hostname master</span><br><span class="line">vi /etc/hosts</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install firewalld -y</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">apt install selinux-utils -y</span><br><span class="line">setenforce 0</span><br><span class="line">swapoff -a</span><br></pre></td></tr></table></figure><p>vi /etc/sysctl.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure></p><p>sysctl -p</p><p>vi /etc/docker/daemon.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;iptables&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/sysctl.d/k8s.conf &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装包允许apt通过HTTPS使用仓库</span></span><br><span class="line"><span class="number">1</span>. apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加Docker官方GPG key</span></span><br><span class="line"><span class="number">2</span>. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key <span class="keyword">add</span> -</span><br><span class="line"></span><br><span class="line"># 设置Docker稳定版仓库</span><br><span class="line">3. add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</span><br><span class="line"></span><br><span class="line">4. add-apt-repository "deb https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial main"</span><br><span class="line"></span><br><span class="line">5. apt-get update</span><br><span class="line"></span><br><span class="line"># 安装Docker CE（社区版）</span><br><span class="line">6. apt-get install -y docker-ce=17.03.2~ce-0~ubuntu-xenial</span><br></pre></td></tr></table></figure><h3 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y kubelet=1.10.3-00 kubeadm=1.10.3-00 kubectl=1.10.3-00 --allow-unauthenticated</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-cache madison kubeadm</span><br><span class="line">apt-get remove -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><h3 id="kubeadm初始化集群"><a href="#kubeadm初始化集群" class="headerlink" title="kubeadm初始化集群"></a>kubeadm初始化集群</h3><p><a href="https://hub.docker.com/u/anjia0532" target="_blank" rel="noopener">国内镜像</a><br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">images=(kube-proxy-amd64:v1.<span class="number">10.3</span> kube-scheduler-amd64:v1.<span class="number">10.3</span> kube-controller-manager-amd64:v1.<span class="number">10.3</span> kube-apiserver-amd64:v1.<span class="number">10.3</span> etcd-amd64:<span class="number">3.1</span>.<span class="number">12</span> pause-amd64:<span class="number">3.1</span> k8s-dns-sidecar-amd64:<span class="number">1.14</span>.<span class="number">8</span> k8s-dns-kube-dns-amd64:<span class="number">1.14</span>.<span class="number">8</span> k8s-dns-dnsmasq-nanny-amd64:<span class="number">1.14</span>.<span class="number">8</span>)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">  docker pull anjia0532/$imageName</span><br><span class="line">  docker tag anjia0532/$imageName k8s.gcr.io/$imageName</span><br><span class="line">  docker rmi anjia0532/$imageName</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建/etc/sysctl.d/k8s.conf文件，添加如下内容：</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br></pre></td></tr></table></figure><h4 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h4><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version <span class="number">1.10</span>.<span class="number">3</span> --apiserver-advertise-address=<span class="number">172</span>.xx.xxx.xx --pod-network-cidr=<span class="number">10.244</span>.<span class="number">0.0</span>/<span class="number">16</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><h4 id="生成如下串，请记录下来"><a href="#生成如下串，请记录下来" class="headerlink" title="生成如下串，请记录下来"></a>生成如下串，请记录下来</h4><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join <span class="number">172</span>.xx.xxx.xx:<span class="number">6443</span> --token xxxxxx --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line">kubectl get pod --all-namespaces</span><br><span class="line">kubectl create -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel-rbac.yml</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">heapster</span><br><span class="line">kubectl create -f http://res.yinnote.com/kubernetes/heapster/<span class="number">1.5</span>.<span class="number">1</span>/heapster-rbac.yaml</span><br><span class="line">kubectl create -f http://res.yinnote.com/kubernetes/heapster/<span class="number">1.5</span>.<span class="number">1</span>/influxdb/heapster.yaml</span><br></pre></td></tr></table></figure><h4 id="kubernetes-dashboard安装"><a href="#kubernetes-dashboard安装" class="headerlink" title="kubernetes-dashboard安装"></a>kubernetes-dashboard安装</h4><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull siriuszg/kubernetes-dashboard-amd64</span><br><span class="line">docker tag siriuszg/kubernetes-dashboard-amd64 k8s.gcr.io/kubernetes-dashboard-amd64:v1.<span class="number">10.0</span></span><br><span class="line"></span><br><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</span><br><span class="line"></span><br><span class="line">vi kubernetes-dashboard.yaml</span><br><span class="line">修改：</span><br><span class="line">type:NodePort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成client-certificate-data</span></span><br><span class="line">grep <span class="string">'client-certificate-data'</span> ~/.kube/config | head -n <span class="number">1</span> | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt;&gt; kubecfg.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成client-key-data</span></span><br><span class="line">grep <span class="string">'client-key-data'</span> ~/.kube/config | head -n <span class="number">1</span> | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt;&gt; kubecfg.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成p12</span></span><br><span class="line">openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name <span class="string">"kubernetes-client"</span></span><br><span class="line"></span><br><span class="line">https://<span class="number">192.168</span>.x.xxx:<span class="number">6443</span>/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl describe secret admin-<span class="keyword">user</span> --namespace=kube-system</span><br></pre></td></tr></table></figure><h2 id="node1"><a href="#node1" class="headerlink" title="node1"></a>node1</h2><h3 id="将Node加到集群中"><a href="#将Node加到集群中" class="headerlink" title="将Node加到集群中"></a>将Node加到集群中</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">images=(kube-proxy-amd64:v1.<span class="number">10.3</span> kube-scheduler-amd64:v1.<span class="number">10.3</span> kube-controller-manager-amd64:v1.<span class="number">10.3</span> kube-apiserver-amd64:v1.<span class="number">10.3</span> etcd-amd64:<span class="number">3.1</span>.<span class="number">12</span> pause-amd64:<span class="number">3.1</span> k8s-dns-sidecar-amd64:<span class="number">1.14</span>.<span class="number">8</span> k8s-dns-kube-dns-amd64:<span class="number">1.14</span>.<span class="number">8</span> k8s-dns-dnsmasq-nanny-amd64:<span class="number">1.14</span>.<span class="number">8</span>)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">  docker pull anjia0532/$imageName</span><br><span class="line">  docker tag anjia0532/$imageName k8s.gcr.io/$imageName</span><br><span class="line">  docker rmi anjia0532/$imageName</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">kubeadm join <span class="number">172</span>.xx.xxx.xxx:<span class="number">6443</span> --token xxxxx --discovery-token-ca-cert-hash sha256:xxxxxxxxx</span><br></pre></td></tr></table></figure><hr><h2 id="k8s默认配置文件路径"><a href="#k8s默认配置文件路径" class="headerlink" title="k8s默认配置文件路径"></a>k8s默认配置文件路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/kubernetes/manifests</span><br></pre></td></tr></table></figure><h2 id="cni默认路径"><a href="#cni默认路径" class="headerlink" title="cni默认路径"></a>cni默认路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/cni/net.d</span><br></pre></td></tr></table></figure><h2 id="卸载集群"><a href="#卸载集群" class="headerlink" title="卸载集群"></a>卸载集群</h2><p>想要撤销kubeadm做的事，首先要排除节点，并确保在关闭节点之前要清空节点。</p><h3 id="在主节点上运行："><a href="#在主节点上运行：" class="headerlink" title="在主节点上运行："></a>在主节点上运行：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain &lt;node name&gt; --delete-local-data --force --ignore-daemonsets</span><br><span class="line">kubectl delete node &lt;node name&gt; --grace-period=0 --force</span><br></pre></td></tr></table></figure><p>然后在需要移除的节点上，重置kubeadm的安装状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure></p><p>如果你想重新配置集群，只需运行kubeadm init或者kubeadm join并使用所需的参数即可。</p><h3 id="卸载cni"><a href="#卸载cni" class="headerlink" title="卸载cni"></a>卸载cni</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br><span class="line">systemctl stop kubelet</span><br><span class="line">systemctl stop docker</span><br><span class="line">rm -rf /var/lib/cni/</span><br><span class="line">rm -rf /var/lib/kubelet/*</span><br><span class="line">rm -rf /etc/cni/</span><br><span class="line">ifconfig cni0 down</span><br><span class="line">ifconfig flannel.1 down</span><br><span class="line">ifconfig docker0 down</span><br><span class="line">ip link delete cni0</span><br><span class="line">ip link delete flannel.1</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl -u kubelet</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kubectl常用命令</title>
      <link href="/2018/06/22/k8s/kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/06/22/k8s/kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="kubectl常用命令"><a href="#kubectl常用命令" class="headerlink" title="kubectl常用命令"></a>kubectl常用命令</h1><h2 id="创建pods："><a href="#创建pods：" class="headerlink" title="创建pods："></a>创建pods：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><h2 id="查看pods："><a href="#查看pods：" class="headerlink" title="查看pods："></a>查看pods：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get po -o wide -n kube-system</span><br></pre></td></tr></table></figure><h2 id="删除pods："><a href="#删除pods：" class="headerlink" title="删除pods："></a>删除pods：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pods kubernetes-dashboard-302935354-0h7p6 -n kube-system</span><br></pre></td></tr></table></figure><h2 id="查看报错日志："><a href="#查看报错日志：" class="headerlink" title="查看报错日志："></a>查看报错日志：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pods kubernetes-dashboard-2496492025-rwczb -n kube-system</span><br></pre></td></tr></table></figure><h2 id="查看明细日志："><a href="#查看明细日志：" class="headerlink" title="查看明细日志："></a>查看明细日志：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs kubernetes-dashboard-1338994370-w8bmt -n kube-system</span><br></pre></td></tr></table></figure><h2 id="动态修改服务"><a href="#动态修改服务" class="headerlink" title="动态修改服务"></a>动态修改服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system edit service kubernetes-dashboard</span><br></pre></td></tr></table></figure><h2 id="关键字补全"><a href="#关键字补全" class="headerlink" title="关键字补全"></a>关键字补全</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure><h2 id="获取yaml模板"><a href="#获取yaml模板" class="headerlink" title="获取yaml模板"></a>获取yaml模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run --image=nginx my-deploy -o yaml --dry-run &gt; my-deploy.yaml</span><br><span class="line">kubectl get statefulset/foo -o yaml --export &gt; new.yaml</span><br><span class="line">kubectl get node/xx -o yaml --export &gt; node.yaml</span><br></pre></td></tr></table></figure><h2 id="创建secret，从私用仓库拉取镜像"><a href="#创建secret，从私用仓库拉取镜像" class="headerlink" title="创建secret，从私用仓库拉取镜像"></a>创建secret，从私用仓库拉取镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret docker-registry myregistrykey --docker-server=https://index.docker.io/v1/ --docker-username=xxxx --docker-password=xxxx --docker-email=xxxx@qq.com</span><br></pre></td></tr></table></figure><h2 id="开放NodePort"><a href="#开放NodePort" class="headerlink" title="开放NodePort"></a>开放NodePort</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment kube-node --type=NodePort</span><br></pre></td></tr></table></figure><h2 id="helm命令"><a href="#helm命令" class="headerlink" title="helm命令"></a>helm命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm install --name elho-hook-1 ./elho-hook</span><br><span class="line">helm del elho-hook-1 —purge</span><br></pre></td></tr></table></figure><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><p>Q:<br>GPG error: <a href="http://archive.ubuntukylin.com:10006" target="_blank" rel="noopener">http://archive.ubuntukylin.com:10006</a> xenial InRelease: The following signatures couldn’t be verified because the public key is not available: NO_PUBKEY 8D5A09DC9B929006<br>A: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 8D5A09DC9B929006</span><br></pre></td></tr></table></figure></p><p>Q: kubectl get pod -n kube_get_comp_words_by_ref: command not found<br>A: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source /etc/bash_completion</span><br><span class="line">source &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Haproxy-配置</title>
      <link href="/2018/06/11/load%20balance/Haproxy%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/"/>
      <url>/2018/06/11/load%20balance/Haproxy%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="Haproxy配置文件说明"><a href="#Haproxy配置文件说明" class="headerlink" title="Haproxy配置文件说明"></a>Haproxy配置文件说明</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -st `cat /var/run/haproxy.pid`</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">       ####################全局配置信息######################## </span><br><span class="line"></span><br><span class="line">       #######参数是进程级的，通常和操作系统（OS）相关#########</span><br></pre></td></tr></table></figure><pre><code>global maxconn 20480                   #默认最大连接数 log 127.0.0.1 local3            #[err warning info debug] chroot /var/haproxy             #chroot运行的路径 uid 99                          #所属运行的用户uid gid 99                          #所属运行的用户组 daemon                          #以后台形式运行haproxy nbproc 1                        #进程数量(可以设置多个进程提高性能) pidfile /var/run/haproxy.pid    #haproxy的pid存放路径,启动进程的用户必须有权限访问此文件 ulimit-n 65535                  #ulimit的数量限制<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#####################默认的全局设置###################### </span><br><span class="line"></span><br><span class="line">       ##这些参数可以被利用配置到frontend，backend，listen组件##</span><br></pre></td></tr></table></figure>defaults log global mode http                       #所处理的类别 (#7层 http;4层tcp  ) maxconn 20480                   #最大连接数 option httplog                  #日志类别http日志格式        option httpclose                #每次请求完毕后主动关闭http通道 option dontlognull              #不记录健康检查的日志信息 option forwardfor               #如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip  option redispatch               #serverId对应的服务器挂掉后,强制定向到其他健康的服务器  option abortonclose             #当服务器负载很高的时候，自动结束掉当前队列处理比较久的连接 stats refresh 30                #统计页面刷新间隔 retries 3                       #3次连接失败就认为服务不可用，也可以通过后面设置 balance roundrobin              #默认的负载均衡的方式,轮询方式 #balance source                  #默认的负载均衡的方式,类似nginx的ip_hash #balance leastconn               #默认的负载均衡的方式,最小连接 contimeout 5000                 #连接超时 clitimeout 50000                #客户端超时 srvtimeout 50000                #服务器超时 timeout check 2000              #心跳检测超时<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">####################监控页面的设置#######################</span><br></pre></td></tr></table></figure></code></pre><p>listen admin_status                    #Frontend和Backend的组合体,监控组的名称，按需自定义名称 </p><pre><code> bind 0.0.0.0:65532             #监听端口  mode http                      #http的7层模式  log 127.0.0.1 local3 err       #错误日志记录  stats refresh 5s               #每隔5秒自动刷新监控页面  stats uri /admin?stats         #监控页面的url  stats realm xuequn\ xuequn   #监控页面的提示信息  stats auth admin:admin         #监控页面的用户和密码admin,可以设置多个用户名  stats auth admin1:admin1       #监控页面的用户和密码admin1  stats hide-version             #隐藏统计页面上的HAproxy版本信息   stats admin if TRUE            #手工启用/禁用,后端服务器(haproxy-1.4.9以后版本) errorfile 403 /etc/haproxy/errorfiles/403.http errorfile 500 /etc/haproxy/errorfiles/500.http errorfile 502 /etc/haproxy/errorfiles/502.http errorfile 503 /etc/haproxy/errorfiles/503.http errorfile 504 /etc/haproxy/errorfiles/504.http</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#################HAProxy的日志记录内容设置###################</span><br></pre></td></tr></table></figure><p>capture request  header Host           len 40 </p><pre><code>capture request  header Content-Length len 10 capture request  header Referer        len 200 capture response header Server         len 40 capture response header Content-Length len 10 capture response header Cache-Control  len 8</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#######################网站监测listen配置##################### </span><br><span class="line"></span><br><span class="line">      ###########此用法主要是监控haproxy后端服务器的监控状态############</span><br></pre></td></tr></table></figure><p>listen site_status </p><pre><code>bind 0.0.0.0:1081                    #监听端口 mode http                            #http的7层模式 log 127.0.0.1 local3 err             #[err warning info debug] monitor-uri /site_status             #网站健康检测URL，用来检测HAProxy管理的网站是否可以用，正常返回200，不正常返回503 acl site_dead nbsrv(server_web) lt 2 #定义网站down时的策略当挂在负载均衡上的指定backend的中有效机器数小于1台时返回true acl site_dead nbsrv(server_blog) lt 2 acl site_dead nbsrv(server_bbs)  lt 2  monitor fail if site_dead            #当满足策略的时候返回503，网上文档说的是500，实际测试为503 monitor-net 192.168.16.2/32          #来自192.168.16.2的日志信息不会被记录和转发 monitor-net 192.168.16.3/32</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">########frontend配置############ </span><br><span class="line"></span><br><span class="line">       #####注意，frontend配置里面可以定义多个acl进行匹配操作########</span><br></pre></td></tr></table></figure><pre><code>frontend http_80_in bind 0.0.0.0:80      #监听端口，即haproxy提供web服务的端口，和lvs的vip端口类似 mode http            #http的7层模式 log global           #应用全局的日志配置 option httplog       #启用http的log option httpclose     #每次请求完毕后主动关闭http通道，HA-Proxy不支持keep-alive模式 option forwardfor    #如果后端服务器需要获得客户端的真实IP需要配置次参数，将可以从Http Header中获得客户端IP<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">########acl策略配置#############</span><br></pre></td></tr></table></figure></code></pre><p>acl xuequn_web hdr_reg(host) -i ^(<a href="http://www.xuequn.cn|ww1.xuequn.cn)$" target="_blank" rel="noopener">www.xuequn.cn|ww1.xuequn.cn)$</a>    #如果请求的域名满足正则表达式中的2个域名返回true -i是忽略大小写 </p><pre><code>acl xuequn_blog hdr_dom(host) -i blog.xuequn.cn #如果请求的域名满足www.xuequn.cn返回true -i是忽略大小写 #acl xuequn    hdr(host) -i xuequn.cn    #如果请求的域名满足xuequn.cn返回true -i是忽略大小写 #acl file_req url_sub -i  killall   #在请求url中包含killall=，则此控制策略返回true,否则为false #acl dir_req url_dir -i allow      #在请求url中存在allow作为部分地址路径，则此控制策略返回true,否则返回false #acl missing_cl hdr_cnt(Content-length) eq 0    #当请求的header中Content-length等于0时返回true</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">########acl策略匹配相应#############</span><br></pre></td></tr></table></figure><p>#block if missing_cl     #当请求中header中Content-length等于0阻止请求返回403 </p><pre><code>#block if !file_req || dir_req       #block表示阻止请求，返回403错误，当前表示如果不满足策略file_req，或者满足策略dir_req，则阻止请求 use_backend  server_web  if xuequn_web    #当满足xuequn_web的策略时使用server_web的backend use_backend  server_blog if xuequn_blog     #当满足xuequn_blog的策略时使用server_blog的backend #redirect prefix http://192.168.16.3 code 301 if xuequn     #当访问xuequn.cn的时候，用http的301挑转到http://192.168.16.3 default_backend server_bbs     #以上都不满足的时候使用默认server_bbs的backend</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##########backend的设置############## </span><br><span class="line"></span><br><span class="line">#下面我将设置三组服务器 server_web，server_blog，server_bbs</span><br><span class="line"></span><br><span class="line">###########################backend server_web#############################</span><br></pre></td></tr></table></figure><p>backend server_web </p><pre><code>mode http            #http的7层模式 balance roundrobin   #负载均衡的方式，roundrobin平均方式 cookie SERVERID      #允许插入serverid到cookie中，serverid后面可以定义 option httpchk GET /index.html #心跳检测的文件 server web1 192.168.16.2:80 cookie web1 check inter 1500 rise 3 fall 3 weight 1  #服务器定义，cookie 1表示serverid为web1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用， #fall 3是3次失败认为服务器不可用，weight代表权重 server web2 192.168.16.3:80 cookie web2 check inter 1500 rise 3 fall 3 weight 2 #服务器定义，cookie 1表示serverid为web2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用， #fall 3是3次失败认为服务器不可用，weight代表权重</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###################################backend server_blog###############################################</span><br></pre></td></tr></table></figure><p>backend server_blog </p><pre><code>mode http            #http的7层模式 balance roundrobin   #负载均衡的方式，roundrobin平均方式 cookie SERVERID      #允许插入serverid到cookie中，serverid后面可以定义 option httpchk GET /index.html #心跳检测的文件 server blog1 192.168.16.2:80 cookie blog1 check inter 1500 rise 3 fall 3 weight 1  #服务器定义，cookie 1表示serverid为web1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重 server blog2 192.168.16.3:80 cookie blog2 check inter 1500 rise 3 fall 3 weight 2  #服务器定义，cookie 1表示serverid为web2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">###################################backend server_bbs###############################################</span><br></pre></td></tr></table></figure><p>backend server_bbs </p><pre><code>mode http            #http的7层模式 balance roundrobin   #负载均衡的方式，roundrobin平均方式 cookie SERVERID      #允许插入serverid到cookie中，serverid后面可以定义 option httpchk GET /index.html #心跳检测的文件 server bbs1 192.168.16.2:80 cookie bbs1 check inter 1500 rise 3 fall 3 weight 1  #服务器定义，cookie 1表示serverid为web1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重 server bbs2 192.168.16.3:80 cookie bbs2 check inter 1500 rise 3 fall 3 weight 2  #服务器定义，cookie 1表示serverid为web2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</code></pre><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> lb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-系统信息</title>
      <link href="/2018/02/28/linux/Linux%E6%9F%A5%E7%9C%8BCPU%EF%BC%8C%E5%86%85%E5%AD%98%EF%BC%8C%E7%A1%AC%E7%9B%98/"/>
      <url>/2018/02/28/linux/Linux%E6%9F%A5%E7%9C%8BCPU%EF%BC%8C%E5%86%85%E5%AD%98%EF%BC%8C%E7%A1%AC%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux查看CPU，内存，硬盘"><a href="#Linux查看CPU，内存，硬盘" class="headerlink" title="Linux查看CPU，内存，硬盘"></a>Linux查看CPU，内存，硬盘</h1><h2 id="查看CPU"><a href="#查看CPU" class="headerlink" title="查看CPU"></a>查看CPU</h2><h3 id="查看CPU核数"><a href="#查看CPU核数" class="headerlink" title="查看CPU核数"></a>查看CPU核数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/cpuinfo | grep &quot;cpu cores&quot; | uniq</span><br><span class="line">cpu cores : 4</span><br></pre></td></tr></table></figure><h3 id="查看CPU个数"><a href="#查看CPU个数" class="headerlink" title="查看CPU个数"></a>查看CPU个数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/cpuinfo | grep &quot;physical id&quot; | uniq | wc -l</span><br><span class="line">2 **uniq命令：删除重复行;wc –l命令：统计行数**</span><br></pre></td></tr></table></figure><h3 id="查看CPU型号"><a href="#查看CPU型号" class="headerlink" title="查看CPU型号"></a>查看CPU型号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/cpuinfo | grep &apos;model name&apos; |uniq</span><br><span class="line">model name : Intel(R) Xeon(R) CPU E5630 @ 2.53GHz</span><br></pre></td></tr></table></figure><p><strong>总结：该服务器有2个4核CPU，型号Intel(R) Xeon(R) CPU E5630 @ 2.53GHz</strong></p><h2 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h2><h3 id="查看内存总数"><a href="#查看内存总数" class="headerlink" title="查看内存总数"></a>查看内存总数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#cat /proc/meminfo | grep MemTotal</span><br><span class="line">MemTotal: 32941268 kB //内存32G</span><br></pre></td></tr></table></figure><h3 id="查看内存条数"><a href="#查看内存条数" class="headerlink" title="查看内存条数"></a>查看内存条数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># dmidecode |grep -A16 &quot;Memory Device$&quot;</span><br></pre></td></tr></table></figure><p><strong>总结：该服务器有两条2G内存 ，空余4个插槽</strong></p><h2 id="查看硬盘"><a href="#查看硬盘" class="headerlink" title="查看硬盘"></a>查看硬盘</h2><h3 id="查看硬盘大小"><a href="#查看硬盘大小" class="headerlink" title="查看硬盘大小"></a>查看硬盘大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># fdisk -l | grep Disk</span><br><span class="line">Disk /dev/cciss/c0d0: 146.7 GB, 146778685440 bytes</span><br></pre></td></tr></table></figure><p><strong>总结：硬盘大小146.7G，即厂商标称的160G</strong></p><h2 id="同步系统时间"><a href="#同步系统时间" class="headerlink" title="同步系统时间"></a>同步系统时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntpdate </span><br><span class="line">ntpdate time.nuri.net</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time.nist.gov</span><br><span class="line">time.nuri.net</span><br><span class="line">0.asia.pool.ntp.org</span><br><span class="line">1.asia.pool.ntp.org</span><br><span class="line">2.asia.pool.ntp.org</span><br><span class="line">3.asia.pool.ntp.org</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock -w</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#date</span><br><span class="line">#hwclock</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">定时执行时间同步任务，所以我们利用crontab -e 来添加定时任务</span><br><span class="line"></span><br><span class="line">#* */1 * * * root ntpdate time.nuri.net;hwclock -w </span><br><span class="line"></span><br><span class="line">即：每隔一个小时同步一下internet时间。</span><br></pre></td></tr></table></figure><h3 id="TCP状态查看："><a href="#TCP状态查看：" class="headerlink" title="TCP状态查看："></a>TCP状态查看：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n | grep 60.214.137.170</span><br></pre></td></tr></table></figure><h3 id="查看公网IP："><a href="#查看公网IP：" class="headerlink" title="查看公网IP："></a>查看公网IP：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show eth0 | grep inet | awk &apos;&#123; print $2; &#125;&apos; | sed &apos;s/\/.*$//&apos;</span><br></pre></td></tr></table></figure><h3 id="查看系统："><a href="#查看系统：" class="headerlink" title="查看系统："></a>查看系统：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version</span><br></pre></td></tr></table></figure><h3 id="查看yum安装创建相关文件："><a href="#查看yum安装创建相关文件：" class="headerlink" title="查看yum安装创建相关文件："></a>查看yum安装创建相关文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep redis </span><br><span class="line">rpm -ql redis</span><br></pre></td></tr></table></figure><h3 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/vdb1</span><br><span class="line">fuser -mv /home</span><br></pre></td></tr></table></figure><h3 id="uname-a"><a href="#uname-a" class="headerlink" title="uname -a"></a>uname -a</h3><p>Linux（系统名） iZ23jnmf7iwZ（节点名称） 2.6.32-431.23.3.el6.x86_64（操作系统的发行版号） #1 SMP Thu Jul 31 17:20:51 UTC 2014（内核版本） x86_64（硬件平台） x86_64（机器硬件名） x86_64（系统处理器的体系结构） GNU/Linux（操作系统）</p><h3 id="查看外网ip"><a href="#查看外网ip" class="headerlink" title="查看外网ip"></a>查看外网ip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl members.3322.org/dyndns/getip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx-使用</title>
      <link href="/2017/09/08/load%20balance/nginx/"/>
      <url>/2017/09/08/load%20balance/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><p>master进程会接收来自外界发来的信号，再根据信号做不同的事情。所以我们要控制nginx，只需要通过kill向master进程发送信号就行了。比如kill -HUP pid，则是告诉nginx，从容地重启nginx</p><h2 id="第三方参照"><a href="#第三方参照" class="headerlink" title="第三方参照"></a>第三方参照</h2><p><a href="https://www.cnblogs.com/codingcloud/p/5095066.html" target="_blank" rel="noopener">nginx优雅启动关闭</a><br><a href="https://www.cnblogs.com/netsa/p/6383094.html" target="_blank" rel="noopener">nginx 正则</a><br><a href="http://www.spring4all.com/article/1291" target="_blank" rel="noopener">从一份配置清单详解Nginx服务器配置</a></p><h2 id="nginx-header中带下划线不转换"><a href="#nginx-header中带下划线不转换" class="headerlink" title="nginx header中带下划线不转换"></a>nginx header中带下划线不转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">underscores_in_headers on;</span><br></pre></td></tr></table></figure><h2 id="root与alias区别"><a href="#root与alias区别" class="headerlink" title="root与alias区别"></a>root与alias区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ~ ^/weblogs/ &#123;</span><br><span class="line">root /data/weblogs/www.ttlsa.com;</span><br><span class="line">autoindex on;</span><br><span class="line">auth_basic            &quot;Restricted&quot;;</span><br><span class="line">auth_basic_user_file  passwd/weblogs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个请求的URI是/weblogs/httplogs/<a href="http://www.ttlsa.com-access.log时" target="_blank" rel="noopener">www.ttlsa.com-access.log时</a>.<br>web服务器将会返回服务器上的/data/weblogs/<a href="http://www.ttlsa.com/weblogs/httplogs/www.ttlsa.com-access.log的文件" target="_blank" rel="noopener">www.ttlsa.com/weblogs/httplogs/www.ttlsa.com-access.log的文件</a></p><p><strong>root会根据完整的URI请求来映射，也就是/path/uri。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /binapp/ &#123;  </span><br><span class="line">limit_conn limit 4;</span><br><span class="line">limit_rate 200k;</span><br><span class="line">internal;  </span><br><span class="line">alias /data/statics/bin/apps/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alias会把location后面配置的路径丢弃掉.<br>如果一个请求的URI是/binapp/a.ttlsa.com/favicon时，web服务器将会返回服务器上的/data/statics/bin/apps/a.ttlsa.com/favicon.jg</p><ol><li>使用alias时，目录名后面一定要加”/“。</li><li>alias可以指定任何名称。</li><li>alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。</li><li>alias只能位于location块中。</li></ol><h2 id="logrotate切割nginx日志"><a href="#logrotate切割nginx日志" class="headerlink" title="logrotate切割nginx日志"></a>logrotate切割nginx日志</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>使用系统自带的logrorate来切个nginx日志，位于/usr/sbin/logrotate<br>假设服务器上有两个网站的nginx配置分别如下:</p><p>去除其它配置信息，只保留了日志相关<br>A网站<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access_log  /data/logs/a.com/access.log;</span><br><span class="line">error_log   /data/logs/a.com/error.log;</span><br></pre></td></tr></table></figure></p><p>B网站<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access_log  /data/logs/b.com/access.log;</span><br><span class="line">error_log   /data/logs/b.com/error.log;</span><br></pre></td></tr></table></figure></p><p>在/etc/logrotate.d/下创建一个配置文件 nginx, 内容如下:</p><h3 id="这里可以添加你想切个的目录，也可以直接使用正则表达式"><a href="#这里可以添加你想切个的目录，也可以直接使用正则表达式" class="headerlink" title="这里可以添加你想切个的目录，也可以直接使用正则表达式"></a>这里可以添加你想切个的目录，也可以直接使用正则表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/data/logs/a.com/*.log</span><br><span class="line">/data/logs/b.com/*.log</span><br><span class="line">&#123;</span><br><span class="line">    daily</span><br><span class="line">    rotate 30</span><br><span class="line">    missingok</span><br><span class="line">    dateext</span><br><span class="line">    compress</span><br><span class="line">    delaycompress</span><br><span class="line">    notifempty</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">        if [ -f /usr/local/nginx/nginx.pid ]; then</span><br><span class="line">            kill -USR1 `cat /usr/local/nginx/nginx.pid`</span><br><span class="line">        fi</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是你们的nginx.pid位置，不一定是在/usr/local/nginx/nginx.pid<br>配置说明</p><h3 id="配置-说明"><a href="#配置-说明" class="headerlink" title="配置    说明"></a>配置    说明</h3><p>daily    指定转储周期为每天<br>weekly    指定转储周期为每周<br>monthly    指定转储周期为每月<br>rotate    转储次数，超过将会删除最老的那一个<br>missingok    忽略错误，如“日志文件无法找到”的错误提示<br>dateext    切换后的日志文件会附加上一个短横线和YYYYMMDD格式的日期<br>compress    通过gzip 压缩转储旧的日志<br>delaycompress    当前转储的日志文件到下一次转储时才压缩<br>notifempty    如果日志文件为空，不执行切割<br>sharedscripts    只为整个日志组运行一次的脚本<br>prerotate/endscript    在转储以前需要执行的命令可以放入这个对，这两个关键字必须单独成行<br>postrotate/endscript    在转储以后需要执行的命令可以放入这个对，这两个关键字必须单独成行</p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3 测试"></a>3 测试</h3><p>执行以下命令进行测试<br>logrotate -vf /etc/logrotate.d/nginx<br>1<br>然后到相应的日志目录下查看 （/data/logs/a.com/, /data/logs/b.com/）<br>应该会有类似以下的文件:<br>access.log<br>access.log-20170626<br>error.log<br>error.log-20170626</p><h3 id="4-添加定时任务"><a href="#4-添加定时任务" class="headerlink" title="4 添加定时任务"></a>4 添加定时任务</h3><p>每日0点执行脚本</p><p>在终端运行 crontab -e<br>插入以下语句<br>0 0 <em> </em> * /usr/sbin/logrotate -vf /etc/logrotate.d/nginx</p>]]></content>
      
      
      <categories>
          
          <category> lb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小故事-父亲去已婚女儿的家中</title>
      <link href="/2017/08/10/live/%E7%88%B6%E4%BA%B2%E5%8E%BB%E5%B7%B2%E5%A9%9A%E5%A5%B3%E5%84%BF%E7%9A%84%E5%AE%B6%E4%B8%AD%EF%BC%8C%E8%A2%AB%E7%9C%BC%E5%89%8D%E7%9A%84%E6%99%AF%E8%B1%A1%E9%9C%87%E6%83%8A%E4%BA%86%E2%80%A6%E2%80%A6/"/>
      <url>/2017/08/10/live/%E7%88%B6%E4%BA%B2%E5%8E%BB%E5%B7%B2%E5%A9%9A%E5%A5%B3%E5%84%BF%E7%9A%84%E5%AE%B6%E4%B8%AD%EF%BC%8C%E8%A2%AB%E7%9C%BC%E5%89%8D%E7%9A%84%E6%99%AF%E8%B1%A1%E9%9C%87%E6%83%8A%E4%BA%86%E2%80%A6%E2%80%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="父亲去已婚女儿的家中，被眼前的景象震惊了……"><a href="#父亲去已婚女儿的家中，被眼前的景象震惊了……" class="headerlink" title="父亲去已婚女儿的家中，被眼前的景象震惊了……"></a>父亲去已婚女儿的家中，被眼前的景象震惊了……</h1><p>当一个父亲，把女儿的手递到另一个男人的手里，他渴望和期待的是女儿能过上幸福的日子。然而，有一天，他到女儿家去看她，突然发现女儿过的生活，并不是自己想象的那样。</p><p>▼女儿几乎从一瞬间，从一个文静优雅的姑娘，变成了一个身兼保姆、妈妈、员工、妻子、女儿的多重身份的女汉子。</p><p>▼父亲觉得有些痛心，因为那个号称是孩子父亲的人，并没有帮到女儿，反而还要女儿像宠爱一个大孩子一样伺候他。</p><p>▼看着女儿要一边打电话一边打开煤气灶做饭，还要打开电脑去看工作进度，更要收拾熊孩子落在地上的玩具，父亲心底说不出的心酸，他有些怀疑，自己是否帮她选错了。</p><p>▼一边是女婿的气定神闲看电视喝咖啡玩电脑，一边是女儿忙得的焦头烂额，老爸心里真是五味杂陈。</p><p>▼女儿的电话一直没来得及放下，还要操心熊孩子，给熊孩子脱下脏了的衣服。</p><p>▼女儿又穿梭于洗衣房跟厨房之间，她根本闲不下来，可是那个孩子的爸爸呢？</p><p>▼女儿的电脑开着，但是手里还抱着一堆盘子，准备开饭。这是女儿的日常，她已经习惯，可是父亲心底却满满是泪。他开始后悔，后悔自己这些年做过的榜样。</p><p>▼他还是忍住眼泪离开，跟女儿道别的时候，无比柔情蜜意。</p><p>▼当父亲离开，女儿终于发现父亲留下了一封信，打开之后，看的热泪盈眶。</p><p>▼作为父亲，他觉得自己这么多年，愧对自己的妻子，因为，自己跟女儿的老公一样，视若无睹妻子的付出。而作为父亲，他又不愿意自己的女儿也重走自己妻子的老路，这么多年，活成女汉子。</p><p>▼所以，他告诉女儿，这个家，是两个人的家，需要孩子的父亲一起付出，这才是完整的家。</p><p>▼当然，他更多的是对自己做了一个坏榜样而感到内疚，是自己这么多年来对妻子的忽略和理所当然，他如今想做的就是，从点滴做起，在这个家里，体贴妻子，当一个让妻子心底温暖起来的好丈夫，也给女儿做一个好榜样。</p><p>是啊，这虽然是一条广告片，可是却赚了许多人的热泪，之所以感动，是因为，这个父亲他意识到了现代家庭里父亲已经不再是那个只需要赚钱养家就可以在沙发上一趟看电视的父亲，父亲这个角色，赋予了更多的意义：</p><p>因为如果你不好好当个父亲<br>你的女儿<br>可能将来就会成为你妻子那样的女汉子<br>因为父亲的形象潜意识成为女儿选择丈夫的标准<br>因为你现在的家<br>就是你孩子以后的原生家庭<br>你的样子<br>就是你女儿将来老公的样子！</p><p>女儿婚礼，爸爸说：“我的小棉袄被人穿走了。</p><p>这是一段爸爸对女儿真情的告白……</p><p>你小时候，不敢抱你怕胡渣弄疼你</p><p>你长大了……<br>只愿和妈妈交心，我只能在一边呵护你；</p><p>你成年了，我天天盼你电话，只为换一份舒心。</p><p>弹指间……<br>你就要和身边这个小子走了，但我还没来得及说句爱你。</p><p>只希望他会比我还疼你。</p><p>但女儿，我只想你知道。<br>我依然会用余下的人生去守护你。</p><p>我一直想要一个儿子而不是一个女儿，其实并不是因为我不喜欢你,而是因为过去的20多年我都不愿意去想象你离开我的这一天，这天我将失去我的一切，但这一天还是来了。</p><p>出嫁前，硬汉一样的爸爸哽噎的说，“以后就剩老两口了，一点也不热闹了”。<br>第一次，看到爸爸流泪，到了自己才发现，父亲在女儿出嫁那天，是这样的心情。</p><p>父亲，面对女儿出嫁的那一刻，也许是这多年来最凌乱的一种感情了。</p><p>很多时候，我们总以为自己有的是机会，孰料其实人生是减法，见一面少一面。在有限的人生里，请一定记得对他好。</p><p>多少年后你还会记得在那个甜蜜，喜悦，幸福，各种情绪交织的早晨，爸爸充满着复杂的情绪为女儿的婚礼忙忙碌碌着，生怕对那一场婚礼细节考虑得有任何不周全。</p><p>小时候因为摔跤哭了，父亲会用宽大得手掌擦去女儿得眼泪。此刻，女儿又一次哭了，而父亲嘴角得微笑是他全部得语言。</p><p>你能看到照片中父亲得失落。父爱如此深沉，无言。</p><p>女儿出嫁时父亲对她说：女儿，你们之间的矛盾和不高兴的事不要给我讲，因为你终会原谅他，但我不会。</p><p>拥抱再紧，也总是要松开。这个世界上，只有一种爱是为了放手。</p><p>如果可以，请把我留在童年里，留在青春里，留在最美好得时光里。</p><p>因为哪里，有父亲最亲密无间得爱。</p>]]></content>
      
      
      <categories>
          
          <category> live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小故事-大树之恩</title>
      <link href="/2017/08/10/live/%E5%A4%A7%E6%A0%91%E4%B9%8B%E6%81%A9/"/>
      <url>/2017/08/10/live/%E5%A4%A7%E6%A0%91%E4%B9%8B%E6%81%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="大树之恩"><a href="#大树之恩" class="headerlink" title="大树之恩"></a>大树之恩</h1><p>很久很久以前，有一棵又高又大的树。<br>一位小男孩，天天到树下来，他爬上去摘果子吃，在树荫下睡觉。他爱大树，大树也爱和他一起玩耍。<br>后来，小男孩长大了，不再天天来玩耍。<br>一天他又来到树下，很伤心的样子。大树要和他一起玩，男孩说：“不行，我不小了，不能再和你玩，我要玩具，可是没钱买。”<br>大树说：“很遗憾，我也没钱，不过，把我所有的果子摘下来卖掉，你不就有钱了？”<br>男孩十分激动，他摘下所有的果子，高高兴兴地走了。<br>然后，男孩好久都没有来。大树很伤心。</p><p>有一天，男孩终于来了，大树兴奋地邀他一起玩。<br>男孩说：“不行，我没有时间，我要替家里干活呢，我们需要一幢房子，你能帮忙吗？”<br>“我没有房子。”大树说，“不过你可以把我的树枝统统砍下来，拿去搭房子。”<br>于是男孩砍下所有的树枝，高高兴兴地运走去盖房子。看到男孩高兴大树好快乐。<br>从此，男孩又不来了。<br>大树再次陷入孤单和悲伤之中。<br>一年夏天，男孩回来了，大树太快乐了：“来呀！孩子，来和我玩呀。”<br>男孩却说：“我心情不好，一天天老了，我要扬帆出海，轻松一下，你能给我一艘船吗？”<br>大树说：“把我的树干砍去，拿去做船吧！”于是男孩砍下了她的树干，造了条船，然后驾船走了，很久都没有回来。<br>大树好快乐……但不是真的。</p><p>许多年过去，男孩终于回来，大树说：“对不起，孩子，我已经没有东西可以给你了，我的果子没了。”<br>男孩说：“我的牙都掉了，吃不了苹果了。”<br>大树又说：“我再没有树干，让你爬上来了。”<br>男孩说：“我太老了，爬不动了。”<br>“我再也没有什么给得出手了….只剩下枯死下去的老根。”树流着泪说。<br>男孩说：“这么多年过去了，现在我感到累了，什么也不想要，只要一个休息的地方。”<br>“好啊！老根是最适合坐下来休息的，来啊，坐下来和我一起休息吧！”男孩坐下来，大树高兴得流下了眼泪……<br>这就是我们每个人的故事。这棵树就是我们的父母。<br>小时候，我们喜欢和爸爸妈妈玩……长大后，我们就离开他们，只在需要什么东西或者遇到麻烦的时候，才回到他们身边。<br>无论如何，父母永远都在那儿，倾其所有使你快乐。你可能认为这个男孩对树很残酷，但这就是我们每个人对待父母的方式。<br>人生确实如此，请朋友们珍惜与父母在一起的时间！因为：树欲静而风不止，子欲养而亲不待。</p>]]></content>
      
      
      <categories>
          
          <category> live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小故事-孩子教育</title>
      <link href="/2017/08/10/live/%E7%94%B7%E5%AD%A9%E6%95%99%E8%82%B2/"/>
      <url>/2017/08/10/live/%E7%94%B7%E5%AD%A9%E6%95%99%E8%82%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="男孩教育"><a href="#男孩教育" class="headerlink" title="男孩教育"></a>男孩教育</h1><p>一个爸爸告诉儿子：顶撞妈妈是有条件的·····有这么一个故事，妈妈们看完很是欣慰，爸爸们看完沉默发出了，孩子们看了懂事了很多···<br>故事是这样的：有一次已经读高中的儿子因为妈妈总是唠叨，不耐烦的顶撞了母亲，母亲气得半死。当晚，父亲便约儿子一起出门散步。两人走了好久，父亲说道，顶撞妈妈时，下列的事任选一样，做到后，才有顶撞的权利！<br>  ● 连续3个月每吃完一餐就须催吐(孕吐)<br>  ● 乳头被别人吸到破皮达一个月(喂奶)<br>  ● 肚子塞一颗篮球达10个月(怀孕)<br>  ● 接受皮鞭抽打达48小时(生小孩)<br>  ● 10个月不能喝冰水、咖啡、茶<br>  ● 5个月睡觉不能翻身<br>  ● 10个月不能出游远行，不能跑跳<br>  ● 10个月不能生病，实在要是病了，生病不能吃药<br>  ● 生完孩子把屎把尿一个月<br>  ● 晚上睡觉每二个小时起床一次，清醒30分钟达一个月。<br>一直到要进家门口时，父亲拍拍儿子的肩膀，以男人对男人的语气说:“等一下进去时，给我女人一点面子！”<br>儿子惊讶于老爸用哥儿们的语气对他说话，并因男人跟男人之间的义气，从此对母亲毕恭毕敬的。看完这个故事，想起一个高中同学他说：<br>有一次顶撞母亲，父亲把他从椅子上踹下来，斥责他：你妈是我捧在手心的宝，我呵护她，照顾她，对她轻声细语，你凭什么对他大声喊叫！我的同学再也不敢顶撞母亲了。<br>这么多年来有谁会忍受着一辈子付出没有回报的？恐怕除了父母没有别人了吧？<br>我们平时总是抱怨自己没有好背景，好父母，可生活在物质条件比父母强百倍的我们为什么不努力拼搏一把，成为父母的骄傲呢？</p><h1 id="需要教给孩子"><a href="#需要教给孩子" class="headerlink" title="需要教给孩子"></a>需要教给孩子</h1><p>Grit坚毅、Zest激情、Self-control自制力、Optimism乐观态度、Gratitude感恩精神、Social intelligence社交智力、Curiosity好奇心</p>]]></content>
      
      
      <categories>
          
          <category> live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小故事-读书无用论</title>
      <link href="/2017/08/10/live/%E4%B8%8A%E4%BA%86985%E3%80%81211%E6%89%8D%E7%9F%A5%E9%81%93%EF%BC%8C%E8%AF%BB%E4%B9%A6%E6%97%A0%E7%94%A8%E8%AE%BA%E9%83%BD%E6%98%AF%E9%AA%97%E4%BA%BA%E7%9A%84/"/>
      <url>/2017/08/10/live/%E4%B8%8A%E4%BA%86985%E3%80%81211%E6%89%8D%E7%9F%A5%E9%81%93%EF%BC%8C%E8%AF%BB%E4%B9%A6%E6%97%A0%E7%94%A8%E8%AE%BA%E9%83%BD%E6%98%AF%E9%AA%97%E4%BA%BA%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="上了985、211才知道，读书无用论都是骗人的"><a href="#上了985、211才知道，读书无用论都是骗人的" class="headerlink" title="上了985、211才知道，读书无用论都是骗人的"></a>上了985、211才知道，读书无用论都是骗人的</h1><h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><p>念高中时，常听班主任提起一位学姐，她几乎不跟周围的人说话，没什么朋友。</p><p>直到高考，她考了全省前十名。</p><p>市里去拍摄宣传时，发现她家中一贫如洗，父亲早就过世了，母亲还一直卧病在床。</p><p>高中为了省钱，她经常趁别人吃完饭离开后，去捡吃剩的馒头，一边捡一边吃。</p><p>那时候，有些高校会给优秀高考生数万元的金钱奖励。</p><p>她说，她高中三年拼命学习，目标就是能拿到那笔钱，这样她就自己赚够了学费，亲人就再也不能逼她赶紧辍学，早点嫁人。</p><p>“像我这种出身卑微的人，连任性的资格都没有，就害怕一停下来，就被别人狠狠地甩在后面。”</p><p>这让我想起云音乐的评论区常看到的一句话：我不敢倒下，因为身后空无一人。</p><p>知乎上有个提问：底层出身的孩子，假设当年你没能上 985 或者 211，你会损失和错过什么？</p><p>什么是底层？</p><p>就是除了你自己，你一无所有。而只能靠自己的人，连个性都是奢侈品。</p><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><p>有人说，这是一个英雄不论出处的年代，也是一个英雄必论出处的年代。</p><p>龟兔赛跑，如果兔子一直在拼命跑，结果会怎么样？</p><p>英国BBC曾拍摄纪录片，展现14个孩子，50年的人生轨迹。</p><p>7岁时，来自精英家庭的John和Andrew已经习惯了每天看《金融报》或《观察家》，而贫民窟孩子的理想，是能少罚站，少被打，吃饱饭。</p><p>50年后，几个精英家庭的孩子，上了好学校，找到好工作。</p><p>三个中产家庭的孩子，有一位成为精英，两个依旧中产。</p><p>而几个来自底层的孩子，包括他们的后代，依然常常与失业相伴。</p><p>知识改变命运背后，也是一场关于家庭的较量。</p><p>有钱的基础是，你家庭的资源、背景，加上你的努力和运气。但大多数人，不过是为了生计而出卖劳动的人。</p><p>纪录片中曾辍学的父母，没能力教孩子怎么学，因为穷，他们也没钱让别人来教，到后来，伦敦的孩子Tony也辍学了。</p><p>七岁的John和Andrew说自己每天都会读《金融时报》/《人生七年》</p><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><p>人脉、财富、教育等资源，会父传子，子传孙。</p><p>据《中国家庭发展报告2015》，农村80%的留守儿童从没参加过课外辅导，在西部贫困农村，63%的学生甚至没有高中文凭。</p><p>中国校友网对全国各省级高考状元开展调查，发现在2007-2016年间，全国共有约837名高考状元。</p><p>其中，近五成状元父母是教师(35%)和工程师(12.6%)，近两成父母是公务员。</p><p>来自农村、经济状况欠佳家庭的状元所占比例在下降。</p><p>这种现象，就如同今年北京高考状元说的：</p><p>像我这种属于中产阶级家庭的孩子，还生在北京，所以在教育资源上享有得天独厚的条件，我在学习的时候，确实能走很多捷径。</p><p>状元身份的背后，一定付出了汗水，但这不是一个人的战斗，支撑他的还有良好的教育环境。</p><p>原生家庭对人的影响，真的太大了，有时你不得不承认：自己努力的天花板，不过是别人的起点。</p><p>条条大路通罗马，有人出生在罗马。</p><p>《北京爱情故事》里的石小猛，前期极尽努力，但在职场上依然被上司克扣，受尽欺负。</p><p>他在特别绝望的时候说：</p><p>人生就是一场比赛，可有的人连参赛资格都没有。确实，那些富家子弟手中的东西可能是我们一辈子也买不起的东西。我再努力再勤奋八百辈子，有用吗？没用，赶不上你一生下来，嘴里边含一把金钥匙，我呢，也别勤奋了，别努力了，我就吃吃斋，念念佛，找个好时候好地方，投个好胎，找个好爹。</p><p>人的每一种奢望都是设想“如何能付出最少而得到最多”，但这个世界上并不存在这种极端不公平的交易。</p><p>所以大学，起码提供给了底层可行的前进捷径，终其一生或许谈不上逆袭，但在人生的接力赛中，你是自己孩子的起点。</p><p>跨过这条千军万马的独木桥，以后的门票会越来越贵，你可能再也买不起入场券了。</p><p>剧中的石小猛/《北京爱情故事》</p><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><p>为什么一定要上名校？</p><p>  ● 一、你身边人的优秀程度，会影响你</p><p>过去20年来，北大先后有500余名保安考学深造，有的考上了研究生，当起大学老师。</p><p>每个学校都有保安，但为什么这种成群结队的考学行为，在名校发生的概率更大？媒体采访“北大保安第一人张俊成”的报道里，或许就藏着答案。</p><p>张俊成说，有次站岗，看到一位老人骑车过来，快到门岗前，老人下车，推车走过。</p><p>经过门岗时，老人点头跟他说：“你辛苦了”。</p><p>张俊成感到很受宠若惊，他问旁人，“这是谁？怎么这么尊重我们？”</p><p>别人告知，老人是北大校长。</p><p>在保安岗位上，张俊成也曾一度“迷失”，他说，“那个时候非常无知、愚昧”。</p><p>但他却得到了多位北大教授的热心帮助，在教授们的建议下，他才开始重新读书学习。</p><p>《精进》一书中谈到：</p><p>一个年轻人，进入一所不那么优秀的高校，对自己的标准会不由自主地降低以适应这个环境，减少自身与环境的冲突，而这种做法对他们的人生也许是致命的。</p><p>而在一片向上的氛围中，周围的人都在努力，自己也会用相对严格的标准来审视自己，不断自省，哪怕最后变不成最牛的，也可以优秀出众。</p><p>  ● 二、名校的光环，是一种优秀的传递</p><p>当别人无法深入接触你时，你的头衔，外表等外在表现，往往决定了他们对你的看法。</p><p>大学生如同韭菜，收完一茬又会有一茬，已经不怎么新鲜了，在这种情况下，“名校”就是一道招牌。</p><p>稍微想一想就不难理解，亲戚家有孩子考上名校，周围人会口口相传，“谁家的孩子，上XX学校了！了不起！”</p><p>八竿子打不着的关系都要掰扯清楚，好像有了这层关系，自己的身价也能水涨船高。</p><p>名校在人心中的地位始终就不一般，它的声望是由多年来源源不断地人才输入和输出才形成的。所以HR选择名牌大学的求职者，成本无疑是最低的。</p><p>在他们看来，出身名校，起码意味着有智商或者有毅力，说到第一学历，古人也非常重视。</p><p>满清重臣左宗棠，举人出身，终其一生没也考中进士，这成了他永远的痛，甚至让他在宦海中饱受侮辱和曲折，后来他成了正一品，还不忘给自己弄一个荣誉进士的称号。</p><p>到了现在，国内大公司招聘时，几乎都会明确地写明岗位的学历要求，有些岗位要求至少是本科以上学历，有人说这是“歧视”。</p><p>关于“第一学历”，某社区曾发起过一次探讨，参与者各抒己见，其中被点赞最多的留言是这么说的：</p><p>国家队为什么要从省队里选运动员？我是全村跑步最快的为什么不能参加奥运会？第一学历不好有两个重要隐患，</p><p>  ● 1、过高地估计自己努力的价值和自身水平；<br>  ● 2、过低地估计科学研究的困难程度和世界的大小。 </p><p>第一学历不能决定人一辈子，文凭也证明不了人的能力，但一些机会，在某些时候只留给有这张纸的人。</p><p>  ● 三、人脉的扩张，是一个人能力与资源的扩张</p><p>好大学能带给你接触更广泛圈子的机会，人脉的扩张，也是一个人能力与资源的扩张。</p><p>有次和一位在创业的学长聊天，他说他现在的团队，基本是研究生时期的同学，并且导师觉得他的项目前景不错，主动帮他做宣传。</p><p>当年北大毕业的陆步轩，以卖猪肉为生，全国哗然。</p><p>别人只看到才子卖猪肉的不光鲜，但陆的校友陈生却注意到：一个档口，自己一天只能卖1.2头猪，陆步轩却能卖出12头，简直太牛逼了。</p><p>陈生邀请他做品牌顾问，两人合作成立“屠夫学校”，养殖土猪，后来，他们开了几百家连锁店，陈生身家也过百亿。</p><p>不光是创业上的资源，为什么名校毕业生大多能找到外人眼中不错的工作？</p><p>除了本身能力问题，校友的作用也很明显。</p><p>比如前辈在大型企业上班，那你进入他的圈子实习和求职的机会，一定会比其他学校的学生多。</p><p>  ● 四、薪酬待遇</p><p>更功利性一些，如果你以赚更多钱为目标，学历绝对是决定因素之一，在薪资这件事上，国内外都保持了一致。</p><p>福利待遇好的公务员事业编国企员工等岗位，都有硬性的比较高的学历要求。</p><p>2010年中央国家行政机关对学历的要求，硕士以上学历的职位有294个，占职位总数的54.55%；而专科学历可以报考的职位只有1个。</p><p>  ● 五、受教育程度低的人，通过嫁娶来改变命运越来越难</p><p>从相同或相似的阶层群体中挑选配偶，这种门当户对式婚姻匹配，被称为同质婚。反之，跨越社会等级、社会群体壁垒的婚姻，为异质婚。</p><p>据《中国家庭发展报告2016》，20世纪80年代以后，相同和相近文化程度的婚姻匹配比例显著提高。</p><p>“男高女低”的异质婚配模式减少，受教育程度低的人群更加难以通过婚姻实现社会流动。</p><p>女性选择比自己受教育程度高的男性的空间越来越小，越来越集中在比自己仅仅高一个层次的梯度中选择，也就是现在鸡汤文常说的“你是谁，就会嫁给谁”。</p><p>而受教育程度低的农村男性，在择偶时面临更为严峻的困境。<br>01<br>一张高校文凭，不能确保让人站上顶峰，却会让大多数人免于跌落谷底。</p><p>那些说它“没用”的人，不过是一直处在谷底上方，但这绝不等同于“谷底”不存在。</p><p>曾看到一位网友的跟贴，他说：</p><p>其实我也没高考，也没读过大学，现在过得也不错，但这是我几年来起早摸黑努力得到的结果。不可以说读书无用论，其实读好大学，人生肯定会有个好的起点，更好地认识世界。</p><p>学识影响眼界，眼界决定格局，而格局影响人一生。</p><p>有句被说过无数遍的话：最怕你一生碌碌无为，还安慰自己平凡可贵。</p><p>还没高调的资格呢，就嚷嚷着要低调，还没活明白呢就开始说去伪存真，这是一种最损己不利人的行为，自己活得假，别人看着也特别累。</p><p>读书是一生的事，不是什么时候要用到了，我们才去学什么。</p><p>刘媛媛演讲“寒门贵子”/《超级演说家》</p><p>刘媛媛在《超级演说家》中曾发表过这样一段演说：</p><p>有些人出生就含着金钥匙，有些人出生连爸妈都没有，人生跟人生是没有可比性的，我们的人生是怎么样，完全决定于自己的感受。</p><p>你一辈子都在感受抱怨，那你的一生就是抱怨的一生；</p><p>你一辈子都在感受感动，那你的一生就是感动的一生；</p><p>你一辈子都立志于改变这个社会，那你的一生就是斗士的一生。</p><p>这世界就是，一些人总在昼夜不停地运转，而另外一些人，起床就发现世界已经变了。</p>]]></content>
      
      
      <categories>
          
          <category> live </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
